
Task4_InterruptsTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b054  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800b1f8  0800b1f8  0001b1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b724  0800b724  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b724  0800b724  0001b724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b72c  0800b72c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b72c  0800b72c  0001b72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b730  0800b730  0001b730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054f4  200001e0  0800b914  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056d4  0800b914  000256d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023aa3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000411c  00000000  00000000  00043cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00047dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  000496d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006070  00000000  00000000  0004ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb07  00000000  00000000  00050ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0151  00000000  00000000  0006c9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010cb00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad4  00000000  00000000  0010cb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1dc 	.word	0x0800b1dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b1dc 	.word	0x0800b1dc

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000561c 	.word	0x2000561c

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <print_function>:

SemaphoreHandle_t semPtr = NULL;

uint32_t task1Profiler, task2Profiler, task3Profiler;

void print_function(char *str){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 8000f58:	f005 f894 	bl	8006084 <vPortEnterCritical>
	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff f989 	bl	8000274 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <print_function+0x30>)
 8000f6e:	f002 f816 	bl	8002f9e <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 8000f72:	f005 f8b7 	bl	80060e4 <vPortExitCritical>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000554c 	.word	0x2000554c

08000f84 <main>:

float count = 0;


int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
	  HAL_Init();
 8000f8a:	f000 fc0d 	bl	80017a8 <HAL_Init>
	  SystemClock_Config();
 8000f8e:	f000 f86f 	bl	8001070 <SystemClock_Config>
	  MX_GPIO_Init();
 8000f92:	f000 f901 	bl	8001198 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 8000f96:	f000 f8d5 	bl	8001144 <MX_USART2_UART_Init>
	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f000 fcf3 	bl	8001986 <HAL_NVIC_SetPriorityGrouping>


	  MX_TIM2_Init();
 8000fa0:	f000 f968 	bl	8001274 <MX_TIM2_Init>


	  semPtr = xSemaphoreCreateBinary();
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f002 fca7 	bl	80038fc <xQueueGenericCreate>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a15      	ldr	r2, [pc, #84]	; (8001008 <main+0x84>)
 8000fb2:	6013      	str	r3, [r2, #0]
	  if(semPtr != NULL){
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <main+0x84>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d021      	beq.n	8001000 <main+0x7c>

		uint8_t retVal = 0xFF;
 8000fbc:	23ff      	movs	r3, #255	; 0xff
 8000fbe:	71fb      	strb	r3, [r7, #7]
		retVal = xTaskCreate(vSenderTask, "Task-1", STACK_SIZE, (void *)100, (tskIDLE_PRIORITY + 1), &Task1Handle_t);
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <main+0x88>)
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fce:	4910      	ldr	r1, [pc, #64]	; (8001010 <main+0x8c>)
 8000fd0:	4810      	ldr	r0, [pc, #64]	; (8001014 <main+0x90>)
 8000fd2:	f003 fba4 	bl	800471e <xTaskCreate>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
		if(retVal != pdPASS){
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d002      	beq.n	8000fe6 <main+0x62>
			print_function("Creation of task 1 failed\r\n");
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <main+0x94>)
 8000fe2:	f7ff ffb5 	bl	8000f50 <print_function>
		}

		 xSemaphoreGive(semPtr);
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <main+0x84>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	2300      	movs	r3, #0
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f002 fce8 	bl	80039c4 <xQueueGenericSend>

		  SEGGER_SYSVIEW_Conf();
 8000ff4:	f005 fb68 	bl	80066c8 <SEGGER_SYSVIEW_Conf>
		  vTaskStartScheduler();
 8000ff8:	f003 fcf4 	bl	80049e4 <vTaskStartScheduler>
		  SEGGER_SYSVIEW_Conf();
 8000ffc:	f005 fb64 	bl	80066c8 <SEGGER_SYSVIEW_Conf>

	  }
		//if you've wound up here, there is likely an issue with overrunning the freeRTOS heap
		while(1)
		{
			print_function("Queue Creation failed");
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <main+0x98>)
 8001002:	f7ff ffa5 	bl	8000f50 <print_function>
 8001006:	e7fb      	b.n	8001000 <main+0x7c>
 8001008:	20000200 	.word	0x20000200
 800100c:	200054ec 	.word	0x200054ec
 8001010:	0800b1f8 	.word	0x0800b1f8
 8001014:	08001021 	.word	0x08001021
 8001018:	0800b200 	.word	0x0800b200
 800101c:	0800b21c 	.word	0x0800b21c

08001020 <vSenderTask>:
}
/*-----------------------------------------------------------------------------------------------------------------------*/


void vSenderTask(void *argument)
	{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim2); //Start the timer
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <vSenderTask+0x40>)
 800102a:	f001 fb75 	bl	8002718 <HAL_TIM_Base_Start_IT>
	char str[30];
		while(1){
			xSemaphoreTake(semPtr, portMAX_DELAY);
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <vSenderTask+0x44>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f04f 31ff 	mov.w	r1, #4294967295
 8001036:	4618      	mov	r0, r3
 8001038:	f003 f84a 	bl	80040d0 <xQueueSemaphoreTake>
			sprintf(str, "%.4f\r\n", timestamp);
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <vSenderTask+0x48>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fad9 	bl	80005f8 <__aeabi_f2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	f107 0008 	add.w	r0, r7, #8
 800104e:	4907      	ldr	r1, [pc, #28]	; (800106c <vSenderTask+0x4c>)
 8001050:	f007 feba 	bl	8008dc8 <siprintf>
			print_function(str);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff79 	bl	8000f50 <print_function>
			xSemaphoreTake(semPtr, portMAX_DELAY);
 800105e:	e7e6      	b.n	800102e <vSenderTask+0xe>
 8001060:	20005504 	.word	0x20005504
 8001064:	20000200 	.word	0x20000200
 8001068:	200001fc 	.word	0x200001fc
 800106c:	0800b234 	.word	0x0800b234

08001070 <SystemClock_Config>:
/*
 * @brief: Initialize the RCC Peripheral
 * @param[in]: None
 */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f007 fa30 	bl	80084e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <SystemClock_Config+0xd0>)
 80010ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d4:	2310      	movs	r3, #16
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010dc:	2300      	movs	r3, #0
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010e0:	2310      	movs	r3, #16
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ea:	2304      	movs	r3, #4
 80010ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ee:	2304      	movs	r3, #4
 80010f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fe18 	bl	8001d2c <HAL_RCC_OscConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001102:	f000 f939 	bl	8001378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2102      	movs	r1, #2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f87a 	bl	800221c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112e:	f000 f923 	bl	8001378 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_USART2_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800117c:	f001 fec2 	bl	8002f04 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 f8f7 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000554c 	.word	0x2000554c
 8001194:	40004400 	.word	0x40004400

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_GPIO_Init+0xd0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <MX_GPIO_Init+0xd0>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_GPIO_Init+0xd0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2120      	movs	r1, #32
 8001222:	4812      	ldr	r0, [pc, #72]	; (800126c <MX_GPIO_Init+0xd4>)
 8001224:	f000 fd68 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <MX_GPIO_Init+0xd8>)
 8001240:	f000 fbd6 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001244:	2320      	movs	r3, #32
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_GPIO_Init+0xd4>)
 800125c:	f000 fbc8 	bl	80019f0 <HAL_GPIO_Init>
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020800 	.word	0x40020800

08001274 <MX_TIM2_Init>:
/*-----------------------------------------------------------------------------------------------------------------------*/

/* USER CODE BEGIN 4 */
static void MX_TIM2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_TIM2_Init+0x94>)
 8001292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_TIM2_Init+0x94>)
 800129a:	2231      	movs	r2, #49	; 0x31
 800129c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM2_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169325;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_TIM2_Init+0x94>)
 80012a6:	4a19      	ldr	r2, [pc, #100]	; (800130c <MX_TIM2_Init+0x98>)
 80012a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_TIM2_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_TIM2_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b6:	4814      	ldr	r0, [pc, #80]	; (8001308 <MX_TIM2_Init+0x94>)
 80012b8:	f001 f9de 	bl	8002678 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 f859 	bl	8001378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_TIM2_Init+0x94>)
 80012d4:	f001 fb8a 	bl	80029ec <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80012de:	f000 f84b 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_TIM2_Init+0x94>)
 80012f0:	f001 fd86 	bl	8002e00 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80012fa:	f000 f83d 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20005504 	.word	0x20005504
 800130c:	0002956d 	.word	0x0002956d

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	BaseType_t xHigherPriorityTaskWoken;

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001322:	f000 fa63 	bl	80017ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2){
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800132e:	d119      	bne.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x54>

	  xHigherPriorityTaskWoken = pdTRUE;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
	  xSemaphoreGiveFromISR(semPtr, &xHigherPriorityTaskWoken);
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f107 020c 	add.w	r2, r7, #12
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fd15 	bl	8003d6e <xQueueGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <HAL_TIM_PeriodElapsedCallback+0x50>
 800134a:	f006 fdcd 	bl	8007ee8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	f3bf 8f4f 	dsb	sy
 800135a:	f3bf 8f6f 	isb	sy
  }

  /* USER CODE END Callback 1 */
}
 800135e:	e001      	b.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x54>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001360:	f006 fda6 	bl	8007eb0 <SEGGER_SYSVIEW_RecordExitISR>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40010000 	.word	0x40010000
 8001370:	20000200 	.word	0x20000200
 8001374:	e000ed04 	.word	0xe000ed04

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	e7fe      	b.n	8001380 <Error_Handler+0x8>
	...

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_MspInit+0x54>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_MspInit+0x54>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_MspInit+0x54>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_MspInit+0x54>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_MspInit+0x54>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_MspInit+0x54>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	210f      	movs	r1, #15
 80013c6:	f06f 0001 	mvn.w	r0, #1
 80013ca:	f000 fae7 	bl	800199c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <HAL_UART_MspInit+0x84>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d12b      	bne.n	8001456 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_UART_MspInit+0x88>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_UART_MspInit+0x88>)
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_MspInit+0x88>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_UART_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_UART_MspInit+0x88>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_UART_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001436:	230c      	movs	r3, #12
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001446:	2307      	movs	r3, #7
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_UART_MspInit+0x8c>)
 8001452:	f000 facd 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004400 	.word	0x40004400
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_TIM_Base_MspInit>:

}

/* USER CODE BEGIN 1 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800147c:	d115      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_TIM_Base_MspInit+0x48>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_TIM_Base_MspInit+0x48>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_TIM_Base_MspInit+0x48>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2106      	movs	r1, #6
 800149e:	201c      	movs	r0, #28
 80014a0:	f000 fa7c 	bl	800199c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014a4:	201c      	movs	r0, #28
 80014a6:	f000 fa95 	bl	80019d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	2019      	movs	r0, #25
 80014ce:	f000 fa65 	bl	800199c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014d2:	2019      	movs	r0, #25
 80014d4:	f000 fa7e 	bl	80019d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_InitTick+0xa0>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_InitTick+0xa0>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6453      	str	r3, [r2, #68]	; 0x44
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_InitTick+0xa0>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f4:	f107 0210 	add.w	r2, r7, #16
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 f888 	bl	8002614 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001504:	f001 f872 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8001508:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <HAL_InitTick+0xa4>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0c9b      	lsrs	r3, r3, #18
 8001514:	3b01      	subs	r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_InitTick+0xa8>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_InitTick+0xac>)
 800151c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_InitTick+0xa8>)
 8001520:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001524:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_InitTick+0xa8>)
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_InitTick+0xa8>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_InitTick+0xa8>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <HAL_InitTick+0xa8>)
 800153a:	f001 f89d 	bl	8002678 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d104      	bne.n	800154e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <HAL_InitTick+0xa8>)
 8001546:	f001 f8e7 	bl	8002718 <HAL_TIM_Base_Start_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3730      	adds	r7, #48	; 0x30
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	431bde83 	.word	0x431bde83
 8001560:	20005590 	.word	0x20005590
 8001564:	40010000 	.word	0x40010000

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800156c:	e7fe      	b.n	800156c <NMI_Handler+0x4>

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800159a:	f001 f91f 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20005590 	.word	0x20005590

080015a8 <TIM2_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM2_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  timestamp = (float)xTaskGetTickCount()/100000;
 80015ac:	f003 fb46 	bl	8004c3c <xTaskGetTickCount>
 80015b0:	ee07 0a90 	vmov	s15, r0
 80015b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b8:	eddf 6a05 	vldr	s13, [pc, #20]	; 80015d0 <TIM2_IRQHandler+0x28>
 80015bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <TIM2_IRQHandler+0x2c>)
 80015c2:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c6:	4804      	ldr	r0, [pc, #16]	; (80015d8 <TIM2_IRQHandler+0x30>)
 80015c8:	f001 f908 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	47c35000 	.word	0x47c35000
 80015d4:	200001fc 	.word	0x200001fc
 80015d8:	20005504 	.word	0x20005504

080015dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_kill>:

int _kill(int pid, int sig)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f6:	f006 ff2f 	bl	8008458 <__errno>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2216      	movs	r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_exit>:

void _exit (int status)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800161e:	e7fe      	b.n	800161e <_exit+0x12>

08001620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e00a      	b.n	8001648 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001632:	f3af 8000 	nop.w
 8001636:	4601      	mov	r1, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	dbf0      	blt.n	8001632 <_read+0x12>
	}

return len;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_close>:
	}
	return len;
}

int _close(int file)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
	return -1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001682:	605a      	str	r2, [r3, #4]
	return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_isatty>:

int _isatty(int file)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	return 1;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f006 feb0 	bl	8008458 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20020000 	.word	0x20020000
 8001724:	00000400 	.word	0x00000400
 8001728:	20000204 	.word	0x20000204
 800172c:	200056d8 	.word	0x200056d8

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800178c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800175a:	490e      	ldr	r1, [pc, #56]	; (8001794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001770:	4c0b      	ldr	r4, [pc, #44]	; (80017a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800177e:	f7ff ffd7 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f006 fe6f 	bl	8008464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff fbfd 	bl	8000f84 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001798:	0800b734 	.word	0x0800b734
  ldr r2, =_sbss
 800179c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017a0:	200056d4 	.word	0x200056d4

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_Init+0x40>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_Init+0x40>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_Init+0x40>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 f8d8 	bl	8001986 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fe6e 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fdd2 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	200055d8 	.word	0x200055d8

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200055d8 	.word	0x200055d8

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ff4c 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ae:	f7ff ff61 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	6978      	ldr	r0, [r7, #20]
 80019ba:	f7ff ffb1 	bl	8001920 <NVIC_EncodePriority>
 80019be:	4602      	mov	r2, r0
 80019c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff80 	bl	80018cc <__NVIC_SetPriority>
}
 80019cc:	bf00      	nop
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff54 	bl	8001890 <__NVIC_EnableIRQ>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e159      	b.n	8001cc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8148 	bne.w	8001cba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d005      	beq.n	8001a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d017      	beq.n	8001ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d123      	bne.n	8001b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a2 	beq.w	8001cba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b92:	4a52      	ldr	r2, [pc, #328]	; (8001cdc <HAL_GPIO_Init+0x2ec>)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x202>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a48      	ldr	r2, [pc, #288]	; (8001ce4 <HAL_GPIO_Init+0x2f4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x1fe>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a47      	ldr	r2, [pc, #284]	; (8001ce8 <HAL_GPIO_Init+0x2f8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x1fa>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a46      	ldr	r2, [pc, #280]	; (8001cec <HAL_GPIO_Init+0x2fc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x1f6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a45      	ldr	r2, [pc, #276]	; (8001cf0 <HAL_GPIO_Init+0x300>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x1f2>
 8001bde:	2304      	movs	r3, #4
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x2ec>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c12:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c36:	4a2f      	ldr	r2, [pc, #188]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c60:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8a:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f aea2 	bls.w	8001a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40013c00 	.word	0x40013c00

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e264      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d075      	beq.n	8001e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d4a:	4ba3      	ldr	r3, [pc, #652]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d00c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4ba0      	ldr	r3, [pc, #640]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d112      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4b9d      	ldr	r3, [pc, #628]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	4b99      	ldr	r3, [pc, #612]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05b      	beq.n	8001e34 <HAL_RCC_OscConfig+0x108>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d157      	bne.n	8001e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e23f      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d106      	bne.n	8001da0 <HAL_RCC_OscConfig+0x74>
 8001d92:	4b91      	ldr	r3, [pc, #580]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a90      	ldr	r2, [pc, #576]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0xb0>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x98>
 8001daa:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a8a      	ldr	r2, [pc, #552]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a87      	ldr	r2, [pc, #540]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xb0>
 8001dc4:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a83      	ldr	r2, [pc, #524]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a80      	ldr	r2, [pc, #512]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fd16 	bl	8001814 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fd12 	bl	8001814 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e204      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xc0>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fd02 	bl	8001814 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff fcfe 	bl	8001814 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1f0      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0xe8>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d063      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e42:	4b65      	ldr	r3, [pc, #404]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b62      	ldr	r3, [pc, #392]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d11c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x152>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e1c4      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4952      	ldr	r1, [pc, #328]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	e03a      	b.n	8001f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9c:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_RCC_OscConfig+0x2b0>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fcb7 	bl	8001814 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7ff fcb3 	bl	8001814 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e1a5      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec8:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4940      	ldr	r1, [pc, #256]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	e015      	b.n	8001f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ede:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCC_OscConfig+0x2b0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fc96 	bl	8001814 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eec:	f7ff fc92 	bl	8001814 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e184      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d030      	beq.n	8001f78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1e:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <HAL_RCC_OscConfig+0x2b4>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7ff fc76 	bl	8001814 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7ff fc72 	bl	8001814 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e164      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x200>
 8001f4a:	e015      	b.n	8001f78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_RCC_OscConfig+0x2b4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fc5f 	bl	8001814 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fc5b 	bl	8001814 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e14d      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80a0 	beq.w	80020c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x2b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d121      	bne.n	8002006 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_RCC_OscConfig+0x2b8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_RCC_OscConfig+0x2b8>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fc21 	bl	8001814 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e011      	b.n	8001ffa <HAL_RCC_OscConfig+0x2ce>
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	42470000 	.word	0x42470000
 8001fe0:	42470e80 	.word	0x42470e80
 8001fe4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7ff fc14 	bl	8001814 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e106      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b85      	ldr	r3, [pc, #532]	; (8002210 <HAL_RCC_OscConfig+0x4e4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d106      	bne.n	800201c <HAL_RCC_OscConfig+0x2f0>
 800200e:	4b81      	ldr	r3, [pc, #516]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a80      	ldr	r2, [pc, #512]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6713      	str	r3, [r2, #112]	; 0x70
 800201a:	e01c      	b.n	8002056 <HAL_RCC_OscConfig+0x32a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d10c      	bne.n	800203e <HAL_RCC_OscConfig+0x312>
 8002024:	4b7b      	ldr	r3, [pc, #492]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a7a      	ldr	r2, [pc, #488]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
 8002030:	4b78      	ldr	r3, [pc, #480]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	4a77      	ldr	r2, [pc, #476]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6713      	str	r3, [r2, #112]	; 0x70
 800203c:	e00b      	b.n	8002056 <HAL_RCC_OscConfig+0x32a>
 800203e:	4b75      	ldr	r3, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a74      	ldr	r2, [pc, #464]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	4b72      	ldr	r3, [pc, #456]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a71      	ldr	r2, [pc, #452]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d015      	beq.n	800208a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7ff fbd9 	bl	8001814 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff fbd5 	bl	8001814 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0c5      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	4b65      	ldr	r3, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ee      	beq.n	8002066 <HAL_RCC_OscConfig+0x33a>
 8002088:	e014      	b.n	80020b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff fbc3 	bl	8001814 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff fbbf 	bl	8001814 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0af      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	4b5a      	ldr	r3, [pc, #360]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ee      	bne.n	8002092 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4b56      	ldr	r3, [pc, #344]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a55      	ldr	r2, [pc, #340]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 809b 	beq.w	8002206 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d05c      	beq.n	8002196 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d141      	bne.n	8002168 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <HAL_RCC_OscConfig+0x4ec>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fb93 	bl	8001814 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff fb8f 	bl	8001814 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e081      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002104:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	019b      	lsls	r3, r3, #6
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	3b01      	subs	r3, #1
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	4937      	ldr	r1, [pc, #220]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213a:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_RCC_OscConfig+0x4ec>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fb68 	bl	8001814 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002148:	f7ff fb64 	bl	8001814 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e056      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x41c>
 8002166:	e04e      	b.n	8002206 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCC_OscConfig+0x4ec>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7ff fb51 	bl	8001814 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002176:	f7ff fb4d 	bl	8001814 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e03f      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x44a>
 8002194:	e037      	b.n	8002206 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e032      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_RCC_OscConfig+0x4e8>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d028      	beq.n	8002202 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d121      	bne.n	8002202 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d11a      	bne.n	8002202 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d2:	4013      	ands	r3, r2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021da:	4293      	cmp	r3, r2
 80021dc:	d111      	bne.n	8002202 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40007000 	.word	0x40007000
 8002214:	40023800 	.word	0x40023800
 8002218:	42470060 	.word	0x42470060

0800221c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0cc      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d90c      	bls.n	8002258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b65      	ldr	r3, [pc, #404]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0b8      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800227a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	494d      	ldr	r1, [pc, #308]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d044      	beq.n	800233c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d119      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d003      	beq.n	80022da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e06f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e067      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4934      	ldr	r1, [pc, #208]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7ff fa82 	bl	8001814 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7ff fa7e 	bl	8001814 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e04f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d20c      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e032      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4916      	ldr	r1, [pc, #88]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490e      	ldr	r1, [pc, #56]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023a2:	f000 f821 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490a      	ldr	r1, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f878 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00
 80023d8:	40023800 	.word	0x40023800
 80023dc:	0800b304 	.word	0x0800b304
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	2300      	movs	r3, #0
 80023fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002400:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d00d      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 800240c:	2b08      	cmp	r3, #8
 800240e:	f200 80bd 	bhi.w	800258c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
 8002416:	2b04      	cmp	r3, #4
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x3a>
 800241a:	e0b7      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800241e:	60bb      	str	r3, [r7, #8]
       break;
 8002420:	e0b7      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002422:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002424:	60bb      	str	r3, [r7, #8]
      break;
 8002426:	e0b4      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002428:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002430:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d04d      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243e:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	461a      	mov	r2, r3
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	ea02 0800 	and.w	r8, r2, r0
 8002456:	ea03 0901 	and.w	r9, r3, r1
 800245a:	4640      	mov	r0, r8
 800245c:	4649      	mov	r1, r9
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	014b      	lsls	r3, r1, #5
 8002468:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800246c:	0142      	lsls	r2, r0, #5
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	ebb0 0008 	subs.w	r0, r0, r8
 8002476:	eb61 0109 	sbc.w	r1, r1, r9
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	018b      	lsls	r3, r1, #6
 8002484:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002488:	0182      	lsls	r2, r0, #6
 800248a:	1a12      	subs	r2, r2, r0
 800248c:	eb63 0301 	sbc.w	r3, r3, r1
 8002490:	f04f 0000 	mov.w	r0, #0
 8002494:	f04f 0100 	mov.w	r1, #0
 8002498:	00d9      	lsls	r1, r3, #3
 800249a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800249e:	00d0      	lsls	r0, r2, #3
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	eb12 0208 	adds.w	r2, r2, r8
 80024a8:	eb43 0309 	adc.w	r3, r3, r9
 80024ac:	f04f 0000 	mov.w	r0, #0
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	0259      	lsls	r1, r3, #9
 80024b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024ba:	0250      	lsls	r0, r2, #9
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	f7fe fbc4 	bl	8000c58 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e04a      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	099b      	lsrs	r3, r3, #6
 80024e0:	461a      	mov	r2, r3
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	ea02 0400 	and.w	r4, r2, r0
 80024f2:	ea03 0501 	and.w	r5, r3, r1
 80024f6:	4620      	mov	r0, r4
 80024f8:	4629      	mov	r1, r5
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	014b      	lsls	r3, r1, #5
 8002504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002508:	0142      	lsls	r2, r0, #5
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	1b00      	subs	r0, r0, r4
 8002510:	eb61 0105 	sbc.w	r1, r1, r5
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	018b      	lsls	r3, r1, #6
 800251e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002522:	0182      	lsls	r2, r0, #6
 8002524:	1a12      	subs	r2, r2, r0
 8002526:	eb63 0301 	sbc.w	r3, r3, r1
 800252a:	f04f 0000 	mov.w	r0, #0
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	00d9      	lsls	r1, r3, #3
 8002534:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002538:	00d0      	lsls	r0, r2, #3
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	1912      	adds	r2, r2, r4
 8002540:	eb45 0303 	adc.w	r3, r5, r3
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	0299      	lsls	r1, r3, #10
 800254e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002552:	0290      	lsls	r0, r2, #10
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	f7fe fb78 	bl	8000c58 <__aeabi_uldivmod>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4613      	mov	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	60bb      	str	r3, [r7, #8]
      break;
 800258a:	e002      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800258e:	60bb      	str	r3, [r7, #8]
      break;
 8002590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002592:	68bb      	ldr	r3, [r7, #8]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025c8:	f7ff fff0 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0a9b      	lsrs	r3, r3, #10
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	0800b314 	.word	0x0800b314

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025f0:	f7ff ffdc 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0b5b      	lsrs	r3, r3, #13
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	0800b314 	.word	0x0800b314

08002614 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	220f      	movs	r2, #15
 8002622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <HAL_RCC_GetClockConfig+0x60>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40023c00 	.word	0x40023c00

08002678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e041      	b.n	800270e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fee4 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f000 fa88 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d001      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e044      	b.n	80027ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d018      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x6c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275a:	d013      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x6c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1a      	ldr	r2, [pc, #104]	; (80027cc <HAL_TIM_Base_Start_IT+0xb4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00e      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x6c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x6c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x6c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d111      	bne.n	80027a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b06      	cmp	r3, #6
 8002794:	d010      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a6:	e007      	b.n	80027b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40000c00 	.word	0x40000c00
 80027d8:	40014000 	.word	0x40014000

080027dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0202 	mvn.w	r2, #2
 8002808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f9b5 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f9a7 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f9b8 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b04      	cmp	r3, #4
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0204 	mvn.w	r2, #4
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f98b 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f97d 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f98e 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d122      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d11b      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0208 	mvn.w	r2, #8
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f961 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f953 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f964 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0210 	mvn.w	r2, #16
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2208      	movs	r2, #8
 800290a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f937 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f929 	bl	8002b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f93a 	bl	8002ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0201 	mvn.w	r2, #1
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fcd8 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d10e      	bne.n	800298c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d107      	bne.n	800298c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fab2 	bl	8002ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b40      	cmp	r3, #64	; 0x40
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d107      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8ff 	bl	8002bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d107      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0220 	mvn.w	r2, #32
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa7c 	bl	8002edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_TIM_ConfigClockSource+0x1c>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0b4      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x186>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a40:	d03e      	beq.n	8002ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8002a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a46:	f200 8087 	bhi.w	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4e:	f000 8086 	beq.w	8002b5e <HAL_TIM_ConfigClockSource+0x172>
 8002a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a56:	d87f      	bhi.n	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b70      	cmp	r3, #112	; 0x70
 8002a5a:	d01a      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0xa6>
 8002a5c:	2b70      	cmp	r3, #112	; 0x70
 8002a5e:	d87b      	bhi.n	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
 8002a60:	2b60      	cmp	r3, #96	; 0x60
 8002a62:	d050      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x11a>
 8002a64:	2b60      	cmp	r3, #96	; 0x60
 8002a66:	d877      	bhi.n	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
 8002a68:	2b50      	cmp	r3, #80	; 0x50
 8002a6a:	d03c      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8002a6c:	2b50      	cmp	r3, #80	; 0x50
 8002a6e:	d873      	bhi.n	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d058      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0x13a>
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d86f      	bhi.n	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
 8002a78:	2b30      	cmp	r3, #48	; 0x30
 8002a7a:	d064      	beq.n	8002b46 <HAL_TIM_ConfigClockSource+0x15a>
 8002a7c:	2b30      	cmp	r3, #48	; 0x30
 8002a7e:	d86b      	bhi.n	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d060      	beq.n	8002b46 <HAL_TIM_ConfigClockSource+0x15a>
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d867      	bhi.n	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d05c      	beq.n	8002b46 <HAL_TIM_ConfigClockSource+0x15a>
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	d05a      	beq.n	8002b46 <HAL_TIM_ConfigClockSource+0x15a>
 8002a90:	e062      	b.n	8002b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6899      	ldr	r1, [r3, #8]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f000 f98d 	bl	8002dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	609a      	str	r2, [r3, #8]
      break;
 8002abe:	e04f      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f000 f976 	bl	8002dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae2:	609a      	str	r2, [r3, #8]
      break;
 8002ae4:	e03c      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f000 f8ea 	bl	8002ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2150      	movs	r1, #80	; 0x50
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f943 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b04:	e02c      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f000 f909 	bl	8002d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2160      	movs	r1, #96	; 0x60
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f933 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b24:	e01c      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	461a      	mov	r2, r3
 8002b34:	f000 f8ca 	bl	8002ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2140      	movs	r1, #64	; 0x40
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f923 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b44:	e00c      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4610      	mov	r0, r2
 8002b52:	f000 f91a 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b56:	e003      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e000      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00f      	beq.n	8002c04 <TIM_Base_SetConfig+0x38>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d00b      	beq.n	8002c04 <TIM_Base_SetConfig+0x38>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <TIM_Base_SetConfig+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <TIM_Base_SetConfig+0x38>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <TIM_Base_SetConfig+0xec>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_Base_SetConfig+0x38>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <TIM_Base_SetConfig+0xf0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d108      	bne.n	8002c16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01b      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d017      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <TIM_Base_SetConfig+0xe8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <TIM_Base_SetConfig+0xec>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00f      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <TIM_Base_SetConfig+0xf0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <TIM_Base_SetConfig+0xf4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <TIM_Base_SetConfig+0xf8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <TIM_Base_SetConfig+0xfc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d103      	bne.n	8002c9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	615a      	str	r2, [r3, #20]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40010000 	.word	0x40010000
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	40014000 	.word	0x40014000
 8002cc4:	40014400 	.word	0x40014400
 8002cc8:	40014800 	.word	0x40014800

08002ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f023 0201 	bic.w	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 030a 	bic.w	r3, r3, #10
 8002d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	621a      	str	r2, [r3, #32]
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b087      	sub	sp, #28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0210 	bic.w	r2, r3, #16
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	031b      	lsls	r3, r3, #12
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f043 0307 	orr.w	r3, r3, #7
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	021a      	lsls	r2, r3, #8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e050      	b.n	8002eba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d018      	beq.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d013      	beq.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00
 8002ed8:	40014000 	.word	0x40014000

08002edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e03f      	b.n	8002f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fa56 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	; 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f929 	bl	80031a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b08a      	sub	sp, #40	; 0x28
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d17c      	bne.n	80030b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_UART_Transmit+0x2c>
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e075      	b.n	80030ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Transmit+0x3e>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e06e      	b.n	80030ba <HAL_UART_Transmit+0x11c>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2221      	movs	r2, #33	; 0x21
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff2:	f7fe fc0f 	bl	8001814 <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	88fa      	ldrh	r2, [r7, #6]
 8003002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d108      	bne.n	8003020 <HAL_UART_Transmit+0x82>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d104      	bne.n	8003020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e003      	b.n	8003028 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003030:	e02a      	b.n	8003088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2200      	movs	r2, #0
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f840 	bl	80030c2 <UART_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e036      	b.n	80030ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	3302      	adds	r3, #2
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	e007      	b.n	800307a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	3301      	adds	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1cf      	bne.n	8003032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2140      	movs	r1, #64	; 0x40
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f810 	bl	80030c2 <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e006      	b.n	80030ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e000      	b.n	80030ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b090      	sub	sp, #64	; 0x40
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d2:	e050      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d04c      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030e2:	f7fe fb97 	bl	8001814 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d241      	bcs.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	330c      	adds	r3, #12
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003112:	637a      	str	r2, [r7, #52]	; 0x34
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e5      	bne.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3314      	adds	r3, #20
 800312c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	613b      	str	r3, [r7, #16]
   return(result);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	63bb      	str	r3, [r7, #56]	; 0x38
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003146:	623a      	str	r2, [r7, #32]
 8003148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	69f9      	ldr	r1, [r7, #28]
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	61bb      	str	r3, [r7, #24]
   return(result);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e5      	bne.n	8003126 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e00f      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d09f      	beq.n	80030d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3740      	adds	r7, #64	; 0x40
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a4:	b09f      	sub	sp, #124	; 0x7c
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	68d9      	ldr	r1, [r3, #12]
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	ea40 0301 	orr.w	r3, r0, r1
 80031c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031e4:	f021 010c 	bic.w	r1, r1, #12
 80031e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ee:	430b      	orrs	r3, r1
 80031f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fe:	6999      	ldr	r1, [r3, #24]
 8003200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	ea40 0301 	orr.w	r3, r0, r1
 8003208:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800320a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4bc5      	ldr	r3, [pc, #788]	; (8003524 <UART_SetConfig+0x384>)
 8003210:	429a      	cmp	r2, r3
 8003212:	d004      	beq.n	800321e <UART_SetConfig+0x7e>
 8003214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4bc3      	ldr	r3, [pc, #780]	; (8003528 <UART_SetConfig+0x388>)
 800321a:	429a      	cmp	r2, r3
 800321c:	d103      	bne.n	8003226 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800321e:	f7ff f9e5 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8003222:	6778      	str	r0, [r7, #116]	; 0x74
 8003224:	e002      	b.n	800322c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003226:	f7ff f9cd 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 800322a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003234:	f040 80b6 	bne.w	80033a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323a:	461c      	mov	r4, r3
 800323c:	f04f 0500 	mov.w	r5, #0
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	1891      	adds	r1, r2, r2
 8003246:	6439      	str	r1, [r7, #64]	; 0x40
 8003248:	415b      	adcs	r3, r3
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
 800324c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003250:	1912      	adds	r2, r2, r4
 8003252:	eb45 0303 	adc.w	r3, r5, r3
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	00d9      	lsls	r1, r3, #3
 8003260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003264:	00d0      	lsls	r0, r2, #3
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	1911      	adds	r1, r2, r4
 800326c:	6639      	str	r1, [r7, #96]	; 0x60
 800326e:	416b      	adcs	r3, r5
 8003270:	667b      	str	r3, [r7, #100]	; 0x64
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	1891      	adds	r1, r2, r2
 800327e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003280:	415b      	adcs	r3, r3
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003288:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800328c:	f7fd fce4 	bl	8000c58 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4ba5      	ldr	r3, [pc, #660]	; (800352c <UART_SetConfig+0x38c>)
 8003296:	fba3 2302 	umull	r2, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	011e      	lsls	r6, r3, #4
 800329e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a0:	461c      	mov	r4, r3
 80032a2:	f04f 0500 	mov.w	r5, #0
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	1891      	adds	r1, r2, r2
 80032ac:	6339      	str	r1, [r7, #48]	; 0x30
 80032ae:	415b      	adcs	r3, r3
 80032b0:	637b      	str	r3, [r7, #52]	; 0x34
 80032b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032b6:	1912      	adds	r2, r2, r4
 80032b8:	eb45 0303 	adc.w	r3, r5, r3
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	00d9      	lsls	r1, r3, #3
 80032c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ca:	00d0      	lsls	r0, r2, #3
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	1911      	adds	r1, r2, r4
 80032d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80032d4:	416b      	adcs	r3, r5
 80032d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	461a      	mov	r2, r3
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80032e6:	415b      	adcs	r3, r3
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032f2:	f7fd fcb1 	bl	8000c58 <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4b8c      	ldr	r3, [pc, #560]	; (800352c <UART_SetConfig+0x38c>)
 80032fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	2164      	movs	r1, #100	; 0x64
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	3332      	adds	r3, #50	; 0x32
 800330e:	4a87      	ldr	r2, [pc, #540]	; (800352c <UART_SetConfig+0x38c>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800331c:	441e      	add	r6, r3
 800331e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003320:	4618      	mov	r0, r3
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	1894      	adds	r4, r2, r2
 800332c:	623c      	str	r4, [r7, #32]
 800332e:	415b      	adcs	r3, r3
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003336:	1812      	adds	r2, r2, r0
 8003338:	eb41 0303 	adc.w	r3, r1, r3
 800333c:	f04f 0400 	mov.w	r4, #0
 8003340:	f04f 0500 	mov.w	r5, #0
 8003344:	00dd      	lsls	r5, r3, #3
 8003346:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800334a:	00d4      	lsls	r4, r2, #3
 800334c:	4622      	mov	r2, r4
 800334e:	462b      	mov	r3, r5
 8003350:	1814      	adds	r4, r2, r0
 8003352:	653c      	str	r4, [r7, #80]	; 0x50
 8003354:	414b      	adcs	r3, r1
 8003356:	657b      	str	r3, [r7, #84]	; 0x54
 8003358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	461a      	mov	r2, r3
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	1891      	adds	r1, r2, r2
 8003364:	61b9      	str	r1, [r7, #24]
 8003366:	415b      	adcs	r3, r3
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003372:	f7fd fc71 	bl	8000c58 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4b6c      	ldr	r3, [pc, #432]	; (800352c <UART_SetConfig+0x38c>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a67      	ldr	r2, [pc, #412]	; (800352c <UART_SetConfig+0x38c>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 0207 	and.w	r2, r3, #7
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4432      	add	r2, r6
 80033a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033a2:	e0b9      	b.n	8003518 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a6:	461c      	mov	r4, r3
 80033a8:	f04f 0500 	mov.w	r5, #0
 80033ac:	4622      	mov	r2, r4
 80033ae:	462b      	mov	r3, r5
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	6139      	str	r1, [r7, #16]
 80033b4:	415b      	adcs	r3, r3
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033bc:	1912      	adds	r2, r2, r4
 80033be:	eb45 0303 	adc.w	r3, r5, r3
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	00d9      	lsls	r1, r3, #3
 80033cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033d0:	00d0      	lsls	r0, r2, #3
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	eb12 0804 	adds.w	r8, r2, r4
 80033da:	eb43 0905 	adc.w	r9, r3, r5
 80033de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f04f 0100 	mov.w	r1, #0
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	008b      	lsls	r3, r1, #2
 80033f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033f6:	0082      	lsls	r2, r0, #2
 80033f8:	4640      	mov	r0, r8
 80033fa:	4649      	mov	r1, r9
 80033fc:	f7fd fc2c 	bl	8000c58 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4b49      	ldr	r3, [pc, #292]	; (800352c <UART_SetConfig+0x38c>)
 8003406:	fba3 2302 	umull	r2, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	011e      	lsls	r6, r3, #4
 800340e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003410:	4618      	mov	r0, r3
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	1894      	adds	r4, r2, r2
 800341c:	60bc      	str	r4, [r7, #8]
 800341e:	415b      	adcs	r3, r3
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003426:	1812      	adds	r2, r2, r0
 8003428:	eb41 0303 	adc.w	r3, r1, r3
 800342c:	f04f 0400 	mov.w	r4, #0
 8003430:	f04f 0500 	mov.w	r5, #0
 8003434:	00dd      	lsls	r5, r3, #3
 8003436:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800343a:	00d4      	lsls	r4, r2, #3
 800343c:	4622      	mov	r2, r4
 800343e:	462b      	mov	r3, r5
 8003440:	1814      	adds	r4, r2, r0
 8003442:	64bc      	str	r4, [r7, #72]	; 0x48
 8003444:	414b      	adcs	r3, r1
 8003446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	008b      	lsls	r3, r1, #2
 800345c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003460:	0082      	lsls	r2, r0, #2
 8003462:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003466:	f7fd fbf7 	bl	8000c58 <__aeabi_uldivmod>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <UART_SetConfig+0x38c>)
 8003470:	fba3 1302 	umull	r1, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	2164      	movs	r1, #100	; 0x64
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	3332      	adds	r3, #50	; 0x32
 8003482:	4a2a      	ldr	r2, [pc, #168]	; (800352c <UART_SetConfig+0x38c>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800348e:	441e      	add	r6, r3
 8003490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003492:	4618      	mov	r0, r3
 8003494:	f04f 0100 	mov.w	r1, #0
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	1894      	adds	r4, r2, r2
 800349e:	603c      	str	r4, [r7, #0]
 80034a0:	415b      	adcs	r3, r3
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034a8:	1812      	adds	r2, r2, r0
 80034aa:	eb41 0303 	adc.w	r3, r1, r3
 80034ae:	f04f 0400 	mov.w	r4, #0
 80034b2:	f04f 0500 	mov.w	r5, #0
 80034b6:	00dd      	lsls	r5, r3, #3
 80034b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034bc:	00d4      	lsls	r4, r2, #3
 80034be:	4622      	mov	r2, r4
 80034c0:	462b      	mov	r3, r5
 80034c2:	eb12 0a00 	adds.w	sl, r2, r0
 80034c6:	eb43 0b01 	adc.w	fp, r3, r1
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	008b      	lsls	r3, r1, #2
 80034de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034e2:	0082      	lsls	r2, r0, #2
 80034e4:	4650      	mov	r0, sl
 80034e6:	4659      	mov	r1, fp
 80034e8:	f7fd fbb6 	bl	8000c58 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <UART_SetConfig+0x38c>)
 80034f2:	fba3 1302 	umull	r1, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2164      	movs	r1, #100	; 0x64
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	3332      	adds	r3, #50	; 0x32
 8003504:	4a09      	ldr	r2, [pc, #36]	; (800352c <UART_SetConfig+0x38c>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	f003 020f 	and.w	r2, r3, #15
 8003510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4432      	add	r2, r6
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bf00      	nop
 800351a:	377c      	adds	r7, #124	; 0x7c
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	40011000 	.word	0x40011000
 8003528:	40011400 	.word	0x40011400
 800352c:	51eb851f 	.word	0x51eb851f

08003530 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <SysTick_Handler+0x1c>)
 8003536:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003538:	f001 ff26 	bl	8005388 <xTaskGetSchedulerState>
 800353c:	4603      	mov	r3, r0
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003542:	f002 fe31 	bl	80061a8 <xPortSysTickHandler>
  }
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000e010 	.word	0xe000e010

08003550 <vApplicationIdleHook>:

/**
  Dummy implementation of the callback function vApplicationIdleHook().
*/
#if (configUSE_IDLE_HOOK == 1)
__WEAK void vApplicationIdleHook (void){}
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4a07      	ldr	r2, [pc, #28]	; (8003598 <vApplicationGetIdleTaskMemory+0x2c>)
 800357c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4a06      	ldr	r2, [pc, #24]	; (800359c <vApplicationGetIdleTaskMemory+0x30>)
 8003582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000208 	.word	0x20000208
 800359c:	20000264 	.word	0x20000264

080035a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a07      	ldr	r2, [pc, #28]	; (80035cc <vApplicationGetTimerTaskMemory+0x2c>)
 80035b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <vApplicationGetTimerTaskMemory+0x30>)
 80035b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035be:	601a      	str	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	20000464 	.word	0x20000464
 80035d0:	200004c0 	.word	0x200004c0

080035d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f103 0208 	add.w	r2, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f103 0208 	add.w	r2, r3, #8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f103 0208 	add.w	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d103      	bne.n	8003696 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e00c      	b.n	80036b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3308      	adds	r3, #8
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e002      	b.n	80036a4 <vListInsert+0x2e>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d2f6      	bcs.n	800369e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	601a      	str	r2, [r3, #0]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6892      	ldr	r2, [r2, #8]
 80036fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6852      	ldr	r2, [r2, #4]
 8003708:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d103      	bne.n	800371c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	1e5a      	subs	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003766:	f002 fc8d 	bl	8006084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	441a      	add	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	3b01      	subs	r3, #1
 8003798:	68f9      	ldr	r1, [r7, #12]
 800379a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	441a      	add	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d114      	bne.n	80037e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01a      	beq.n	80037fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3310      	adds	r3, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fbe1 	bl	8004f90 <xTaskRemoveFromEventList>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d012      	beq.n	80037fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <xQueueGenericReset+0xcc>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	e009      	b.n	80037fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3310      	adds	r3, #16
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fef2 	bl	80035d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3324      	adds	r3, #36	; 0x24
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff feed 	bl	80035d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037fa:	f002 fc73 	bl	80060e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037fe:	2301      	movs	r3, #1
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08e      	sub	sp, #56	; 0x38
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <xQueueGenericCreateStatic+0x52>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <xQueueGenericCreateStatic+0x56>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <xQueueGenericCreateStatic+0x58>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	623b      	str	r3, [r7, #32]
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <xQueueGenericCreateStatic+0x7e>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <xQueueGenericCreateStatic+0x82>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <xQueueGenericCreateStatic+0x84>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	61fb      	str	r3, [r7, #28]
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038aa:	2350      	movs	r3, #80	; 0x50
 80038ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b50      	cmp	r3, #80	; 0x50
 80038b2:	d00a      	beq.n	80038ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	61bb      	str	r3, [r7, #24]
}
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f83f 	bl	8003970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	613b      	str	r3, [r7, #16]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3350      	adds	r3, #80	; 0x50
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fccf 	bl	80062d8 <pvPortMalloc>
 800393a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3350      	adds	r3, #80	; 0x50
 800394a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003954:	79fa      	ldrb	r2, [r7, #7]
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f805 	bl	8003970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003966:	69bb      	ldr	r3, [r7, #24]
	}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e002      	b.n	8003992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800399e:	2101      	movs	r1, #1
 80039a0:	69b8      	ldr	r0, [r7, #24]
 80039a2:	f7ff fecb 	bl	800373c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	2073      	movs	r0, #115	; 0x73
 80039b6:	f003 fe69 	bl	800768c <SEGGER_SYSVIEW_RecordU32x3>
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b090      	sub	sp, #64	; 0x40
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039d2:	2300      	movs	r3, #0
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xQueueGenericSend+0x32>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <xQueueGenericSend+0x40>
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <xQueueGenericSend+0x44>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <xQueueGenericSend+0x46>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <xQueueGenericSend+0x60>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d103      	bne.n	8003a32 <xQueueGenericSend+0x6e>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <xQueueGenericSend+0x72>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <xQueueGenericSend+0x74>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	623b      	str	r3, [r7, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a52:	f001 fc99 	bl	8005388 <xTaskGetSchedulerState>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <xQueueGenericSend+0x9e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <xQueueGenericSend+0xa2>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <xQueueGenericSend+0xa4>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xQueueGenericSend+0xbe>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	61fb      	str	r3, [r7, #28]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a82:	f002 faff 	bl	8006084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <xQueueGenericSend+0xd4>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d136      	bne.n	8003b06 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 fb82 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4601      	mov	r1, r0
 8003aac:	205a      	movs	r0, #90	; 0x5a
 8003aae:	f003 fe63 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab8:	f000 fc5e 	bl	8004378 <prvCopyDataToQueue>
 8003abc:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d010      	beq.n	8003ae8 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	3324      	adds	r3, #36	; 0x24
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 fa60 	bl	8004f90 <xTaskRemoveFromEventList>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d013      	beq.n	8003afe <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	; (8003c0c <xQueueGenericSend+0x248>)
 8003ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	e00a      	b.n	8003afe <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <xQueueGenericSend+0x248>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003afe:	f002 faf1 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07d      	b.n	8003c02 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d110      	bne.n	8003b2e <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b0c:	f002 faea 	bl	80060e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	4618      	mov	r0, r3
 8003b14:	f004 fb46 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	460b      	mov	r3, r1
 8003b22:	4601      	mov	r1, r0
 8003b24:	205a      	movs	r0, #90	; 0x5a
 8003b26:	f003 fe27 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e069      	b.n	8003c02 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fa91 	bl	8005060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b42:	f002 facf 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b46:	f000 ffc9 	bl	8004adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b4a:	f002 fa9b 	bl	8006084 <vPortEnterCritical>
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b54:	b25b      	sxtb	r3, r3
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d103      	bne.n	8003b64 <xQueueGenericSend+0x1a0>
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSend+0x1b6>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b7a:	f002 fab3 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b7e:	1d3a      	adds	r2, r7, #4
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa80 	bl	800508c <xTaskCheckForTimeOut>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d124      	bne.n	8003bdc <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b94:	f000 fce8 	bl	8004568 <prvIsQueueFull>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 f9a0 	bl	8004eec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bae:	f000 fc73 	bl	8004498 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bb2:	f000 ffa1 	bl	8004af8 <xTaskResumeAll>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f af62 	bne.w	8003a82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <xQueueGenericSend+0x248>)
 8003bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	e758      	b.n	8003a82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd2:	f000 fc61 	bl	8004498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bd6:	f000 ff8f 	bl	8004af8 <xTaskResumeAll>
 8003bda:	e752      	b.n	8003a82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bde:	f000 fc5b 	bl	8004498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003be2:	f000 ff89 	bl	8004af8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	4618      	mov	r0, r3
 8003bea:	f004 fadb 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4601      	mov	r1, r0
 8003bfa:	205a      	movs	r0, #90	; 0x5a
 8003bfc:	f003 fdbc 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8003c00:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3738      	adds	r7, #56	; 0x38
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b090      	sub	sp, #64	; 0x40
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <xQueueGenericSendFromISR+0x3c>
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <xQueueGenericSendFromISR+0x40>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <xQueueGenericSendFromISR+0x42>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d103      	bne.n	8003c7a <xQueueGenericSendFromISR+0x6a>
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <xQueueGenericSendFromISR+0x6e>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueGenericSendFromISR+0x70>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	623b      	str	r3, [r7, #32]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c9a:	f002 fadd 	bl	8006258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	61fa      	str	r2, [r7, #28]
 8003cb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <xQueueGenericSendFromISR+0xbc>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d139      	bne.n	8003d40 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f004 fa60 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003ce4:	4601      	mov	r1, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2060      	movs	r0, #96	; 0x60
 8003cec:	f003 fc74 	bl	80075d8 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cf6:	f000 fb3f 	bl	8004378 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d112      	bne.n	8003d2a <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d016      	beq.n	8003d3a <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	3324      	adds	r3, #36	; 0x24
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 f93d 	bl	8004f90 <xTaskRemoveFromEventList>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e007      	b.n	8003d3a <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d2e:	3301      	adds	r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	b25a      	sxtb	r2, r3
 8003d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d3e:	e00b      	b.n	8003d58 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 fa2e 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003d48:	4601      	mov	r1, r0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2060      	movs	r0, #96	; 0x60
 8003d50:	f003 fc42 	bl	80075d8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3740      	adds	r7, #64	; 0x40
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b08e      	sub	sp, #56	; 0x38
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	623b      	str	r3, [r7, #32]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	61fb      	str	r3, [r7, #28]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <xQueueGiveFromISR+0x58>
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <xQueueGiveFromISR+0x5c>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <xQueueGiveFromISR+0x5e>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	61bb      	str	r3, [r7, #24]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003de6:	f002 fa37 	bl	8006258 <vPortValidateInterruptPriority>
	__asm volatile
 8003dea:	f3ef 8211 	mrs	r2, BASEPRI
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	617a      	str	r2, [r7, #20]
 8003e00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003e02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d235      	bcs.n	8003e82 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 f9be 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003e28:	4601      	mov	r1, r0
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2060      	movs	r0, #96	; 0x60
 8003e30:	f003 fbd2 	bl	80075d8 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d112      	bne.n	8003e6c <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	3324      	adds	r3, #36	; 0x24
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f89c 	bl	8004f90 <xTaskRemoveFromEventList>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00e      	beq.n	8003e7c <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e007      	b.n	8003e7c <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e70:	3301      	adds	r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	b25a      	sxtb	r2, r3
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e80:	e00b      	b.n	8003e9a <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	4618      	mov	r0, r3
 8003e86:	f004 f98d 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2060      	movs	r0, #96	; 0x60
 8003e92:	f003 fba1 	bl	80075d8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f383 8811 	msr	BASEPRI, r3
}
 8003ea4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3738      	adds	r7, #56	; 0x38
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b08f      	sub	sp, #60	; 0x3c
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <xQueueReceive+0x30>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	623b      	str	r3, [r7, #32]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <xQueueReceive+0x3e>
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <xQueueReceive+0x42>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <xQueueReceive+0x44>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <xQueueReceive+0x5e>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	61fb      	str	r3, [r7, #28]
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f0e:	f001 fa3b 	bl	8005388 <xTaskGetSchedulerState>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <xQueueReceive+0x6e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <xQueueReceive+0x72>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <xQueueReceive+0x74>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <xQueueReceive+0x8e>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	61bb      	str	r3, [r7, #24]
}
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f3e:	f002 f8a1 	bl	8006084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02f      	beq.n	8003fae <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f52:	f000 fa7b 	bl	800444c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f004 f923 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003f5e:	4604      	mov	r4, r0
 8003f60:	2000      	movs	r0, #0
 8003f62:	f004 f91f 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	9100      	str	r1, [sp, #0]
 8003f6e:	4621      	mov	r1, r4
 8003f70:	205c      	movs	r0, #92	; 0x5c
 8003f72:	f003 fc01 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	1e5a      	subs	r2, r3, #1
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00f      	beq.n	8003fa6 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	3310      	adds	r3, #16
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 f800 	bl	8004f90 <xTaskRemoveFromEventList>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f96:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <xQueueReceive+0x21c>)
 8003f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fa6:	f002 f89d 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e08a      	b.n	80040c4 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d113      	bne.n	8003fdc <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fb4:	f002 f896 	bl	80060e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 f8f2 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f004 f8ee 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2101      	movs	r1, #1
 8003fce:	9100      	str	r1, [sp, #0]
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	205c      	movs	r0, #92	; 0x5c
 8003fd4:	f003 fbd0 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e073      	b.n	80040c4 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fe2:	f107 0310 	add.w	r3, r7, #16
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 f83a 	bl	8005060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ff0:	f002 f878 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ff4:	f000 fd72 	bl	8004adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ff8:	f002 f844 	bl	8006084 <vPortEnterCritical>
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004002:	b25b      	sxtb	r3, r3
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d103      	bne.n	8004012 <xQueueReceive+0x162>
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004018:	b25b      	sxtb	r3, r3
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d103      	bne.n	8004028 <xQueueReceive+0x178>
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004028:	f002 f85c 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800402c:	1d3a      	adds	r2, r7, #4
 800402e:	f107 0310 	add.w	r3, r7, #16
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f001 f829 	bl	800508c <xTaskCheckForTimeOut>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d124      	bne.n	800408a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004042:	f000 fa7b 	bl	800453c <prvIsQueueEmpty>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d018      	beq.n	800407e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	3324      	adds	r3, #36	; 0x24
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 ff49 	bl	8004eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800405a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800405c:	f000 fa1c 	bl	8004498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004060:	f000 fd4a 	bl	8004af8 <xTaskResumeAll>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	f47f af69 	bne.w	8003f3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <xQueueReceive+0x21c>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	e75f      	b.n	8003f3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800407e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004080:	f000 fa0a 	bl	8004498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004084:	f000 fd38 	bl	8004af8 <xTaskResumeAll>
 8004088:	e759      	b.n	8003f3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800408a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408c:	f000 fa04 	bl	8004498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004090:	f000 fd32 	bl	8004af8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004096:	f000 fa51 	bl	800453c <prvIsQueueEmpty>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	f43f af4e 	beq.w	8003f3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	4618      	mov	r0, r3
 80040a6:	f004 f87d 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 80040aa:	4604      	mov	r4, r0
 80040ac:	2000      	movs	r0, #0
 80040ae:	f004 f879 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 80040b2:	4602      	mov	r2, r0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2101      	movs	r1, #1
 80040b8:	9100      	str	r1, [sp, #0]
 80040ba:	4621      	mov	r1, r4
 80040bc:	205c      	movs	r0, #92	; 0x5c
 80040be:	f003 fb5b 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80040c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3734      	adds	r7, #52	; 0x34
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}
 80040cc:	e000ed04 	.word	0xe000ed04

080040d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b091      	sub	sp, #68	; 0x44
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80040da:	2300      	movs	r3, #0
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	623b      	str	r3, [r7, #32]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	61fb      	str	r3, [r7, #28]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004120:	f001 f932 	bl	8005388 <xTaskGetSchedulerState>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <xQueueSemaphoreTake+0x60>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <xQueueSemaphoreTake+0x64>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <xQueueSemaphoreTake+0x66>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	61bb      	str	r3, [r7, #24]
}
 800414c:	bf00      	nop
 800414e:	e7fe      	b.n	800414e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004150:	f001 ff98 	bl	8006084 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d034      	beq.n	80041ca <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	4618      	mov	r0, r3
 8004164:	f004 f81e 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8004168:	4604      	mov	r4, r0
 800416a:	2000      	movs	r0, #0
 800416c:	f004 f81a 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8004170:	4602      	mov	r2, r0
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2101      	movs	r1, #1
 8004176:	9100      	str	r1, [sp, #0]
 8004178:	4621      	mov	r1, r4
 800417a:	205c      	movs	r0, #92	; 0x5c
 800417c:	f003 fafc 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	1e5a      	subs	r2, r3, #1
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d104      	bne.n	800419a <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004190:	f001 fa82 	bl	8005698 <pvTaskIncrementMutexHeldCount>
 8004194:	4602      	mov	r2, r0
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00f      	beq.n	80041c2 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	3310      	adds	r3, #16
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fef2 	bl	8004f90 <xTaskRemoveFromEventList>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041b2:	4b64      	ldr	r3, [pc, #400]	; (8004344 <xQueueSemaphoreTake+0x274>)
 80041b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041c2:	f001 ff8f 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e0b7      	b.n	800433a <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d121      	bne.n	8004214 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <xQueueSemaphoreTake+0x11c>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	617b      	str	r3, [r7, #20]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80041ec:	f001 ff7a 	bl	80060e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	4618      	mov	r0, r3
 80041f4:	f003 ffd6 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 80041f8:	4604      	mov	r4, r0
 80041fa:	2000      	movs	r0, #0
 80041fc:	f003 ffd2 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8004200:	4602      	mov	r2, r0
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2101      	movs	r1, #1
 8004206:	9100      	str	r1, [sp, #0]
 8004208:	4621      	mov	r1, r4
 800420a:	205c      	movs	r0, #92	; 0x5c
 800420c:	f003 fab4 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004210:	2300      	movs	r3, #0
 8004212:	e092      	b.n	800433a <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800421a:	f107 030c 	add.w	r3, r7, #12
 800421e:	4618      	mov	r0, r3
 8004220:	f000 ff1e 	bl	8005060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004228:	f001 ff5c 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800422c:	f000 fc56 	bl	8004adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004230:	f001 ff28 	bl	8006084 <vPortEnterCritical>
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d103      	bne.n	800424a <xQueueSemaphoreTake+0x17a>
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004250:	b25b      	sxtb	r3, r3
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d103      	bne.n	8004260 <xQueueSemaphoreTake+0x190>
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004260:	f001 ff40 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004264:	463a      	mov	r2, r7
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f000 ff0d 	bl	800508c <xTaskCheckForTimeOut>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d132      	bne.n	80042de <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800427a:	f000 f95f 	bl	800453c <prvIsQueueEmpty>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d026      	beq.n	80042d2 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 800428c:	f001 fefa 	bl	8006084 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4618      	mov	r0, r3
 8004296:	f001 f895 	bl	80053c4 <xTaskPriorityInherit>
 800429a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800429c:	f001 ff22 	bl	80060e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	3324      	adds	r3, #36	; 0x24
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fe1f 	bl	8004eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042b0:	f000 f8f2 	bl	8004498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042b4:	f000 fc20 	bl	8004af8 <xTaskResumeAll>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f47f af48 	bne.w	8004150 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <xQueueSemaphoreTake+0x274>)
 80042c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	e73e      	b.n	8004150 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80042d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042d4:	f000 f8e0 	bl	8004498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042d8:	f000 fc0e 	bl	8004af8 <xTaskResumeAll>
 80042dc:	e738      	b.n	8004150 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80042de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042e0:	f000 f8da 	bl	8004498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042e4:	f000 fc08 	bl	8004af8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042ea:	f000 f927 	bl	800453c <prvIsQueueEmpty>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f43f af2d 	beq.w	8004150 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00d      	beq.n	8004318 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 80042fc:	f001 fec2 	bl	8006084 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004302:	f000 f821 	bl	8004348 <prvGetDisinheritPriorityAfterTimeout>
 8004306:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f938 	bl	8005584 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004314:	f001 fee6 	bl	80060e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	4618      	mov	r0, r3
 800431c:	f003 ff42 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8004320:	4604      	mov	r4, r0
 8004322:	2000      	movs	r0, #0
 8004324:	f003 ff3e 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 8004328:	4602      	mov	r2, r0
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	9100      	str	r1, [sp, #0]
 8004330:	4621      	mov	r1, r4
 8004332:	205c      	movs	r0, #92	; 0x5c
 8004334:	f003 fa20 	bl	8007778 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004338:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800433a:	4618      	mov	r0, r3
 800433c:	373c      	adds	r7, #60	; 0x3c
 800433e:	46bd      	mov	sp, r7
 8004340:	bd90      	pop	{r4, r7, pc}
 8004342:	bf00      	nop
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d006      	beq.n	8004366 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e001      	b.n	800436a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800436a:	68fb      	ldr	r3, [r7, #12]
	}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10d      	bne.n	80043b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d14d      	bne.n	800443a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 f87c 	bl	80054a0 <xTaskPriorityDisinherit>
 80043a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	e043      	b.n	800443a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d119      	bne.n	80043ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6858      	ldr	r0, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	461a      	mov	r2, r3
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	f004 f880 	bl	80084c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	441a      	add	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d32b      	bcc.n	800443a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	e026      	b.n	800443a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68d8      	ldr	r0, [r3, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	461a      	mov	r2, r3
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	f004 f866 	bl	80084c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	425b      	negs	r3, r3
 8004406:	441a      	add	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d207      	bcs.n	8004428 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	425b      	negs	r3, r3
 8004422:	441a      	add	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d105      	bne.n	800443a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	3b01      	subs	r3, #1
 8004438:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004442:	697b      	ldr	r3, [r7, #20]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d018      	beq.n	8004490 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	441a      	add	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	d303      	bcc.n	8004480 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68d9      	ldr	r1, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	461a      	mov	r2, r3
 800448a:	6838      	ldr	r0, [r7, #0]
 800448c:	f004 f81c 	bl	80084c8 <memcpy>
	}
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044a0:	f001 fdf0 	bl	8006084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044ac:	e011      	b.n	80044d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d012      	beq.n	80044dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3324      	adds	r3, #36	; 0x24
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fd68 	bl	8004f90 <xTaskRemoveFromEventList>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044c6:	f000 fe43 	bl	8005150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	dce9      	bgt.n	80044ae <prvUnlockQueue+0x16>
 80044da:	e000      	b.n	80044de <prvUnlockQueue+0x46>
					break;
 80044dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	22ff      	movs	r2, #255	; 0xff
 80044e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044e6:	f001 fdfd 	bl	80060e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044ea:	f001 fdcb 	bl	8006084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044f6:	e011      	b.n	800451c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3310      	adds	r3, #16
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fd43 	bl	8004f90 <xTaskRemoveFromEventList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004510:	f000 fe1e 	bl	8005150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004514:	7bbb      	ldrb	r3, [r7, #14]
 8004516:	3b01      	subs	r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800451c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004520:	2b00      	cmp	r3, #0
 8004522:	dce9      	bgt.n	80044f8 <prvUnlockQueue+0x60>
 8004524:	e000      	b.n	8004528 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004526:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	22ff      	movs	r2, #255	; 0xff
 800452c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004530:	f001 fdd8 	bl	80060e4 <vPortExitCritical>
}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004544:	f001 fd9e 	bl	8006084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004550:	2301      	movs	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e001      	b.n	800455a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800455a:	f001 fdc3 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 800455e:	68fb      	ldr	r3, [r7, #12]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004570:	f001 fd88 	bl	8006084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	429a      	cmp	r2, r3
 800457e:	d102      	bne.n	8004586 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004580:	2301      	movs	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e001      	b.n	800458a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800458a:	f001 fdab 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 800458e:	68fb      	ldr	r3, [r7, #12]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e01e      	b.n	80045e6 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045a8:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <vQueueAddToRegistry+0x60>)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d115      	bne.n	80045e0 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045b4:	4910      	ldr	r1, [pc, #64]	; (80045f8 <vQueueAddToRegistry+0x60>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <vQueueAddToRegistry+0x60>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f003 fde9 	bl	80081a4 <SEGGER_SYSVIEW_ShrinkId>
 80045d2:	4601      	mov	r1, r0
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	2071      	movs	r0, #113	; 0x71
 80045da:	f002 fffd 	bl	80075d8 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80045de:	e006      	b.n	80045ee <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b07      	cmp	r3, #7
 80045ea:	d9dd      	bls.n	80045a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200055dc 	.word	0x200055dc

080045fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800460c:	f001 fd3a 	bl	8006084 <vPortEnterCritical>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004616:	b25b      	sxtb	r3, r3
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d103      	bne.n	8004626 <vQueueWaitForMessageRestricted+0x2a>
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800462c:	b25b      	sxtb	r3, r3
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d103      	bne.n	800463c <vQueueWaitForMessageRestricted+0x40>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800463c:	f001 fd52 	bl	80060e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3324      	adds	r3, #36	; 0x24
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fc6f 	bl	8004f34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004656:	6978      	ldr	r0, [r7, #20]
 8004658:	f7ff ff1e 	bl	8004498 <prvUnlockQueue>
	}
 800465c:	bf00      	nop
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08e      	sub	sp, #56	; 0x38
 8004668:	af04      	add	r7, sp, #16
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	623b      	str	r3, [r7, #32]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <xTaskCreateStatic+0x46>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	61fb      	str	r3, [r7, #28]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046aa:	235c      	movs	r3, #92	; 0x5c
 80046ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b5c      	cmp	r3, #92	; 0x5c
 80046b2:	d00a      	beq.n	80046ca <xTaskCreateStatic+0x66>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	61bb      	str	r3, [r7, #24]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01e      	beq.n	8004710 <xTaskCreateStatic+0xac>
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01b      	beq.n	8004710 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046ea:	2300      	movs	r3, #0
 80046ec:	9303      	str	r3, [sp, #12]
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	9302      	str	r3, [sp, #8]
 80046f2:	f107 0314 	add.w	r3, r7, #20
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f850 	bl	80047a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800470a:	f000 f8dd 	bl	80048c8 <prvAddNewTaskToReadyList>
 800470e:	e001      	b.n	8004714 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004714:	697b      	ldr	r3, [r7, #20]
	}
 8004716:	4618      	mov	r0, r3
 8004718:	3728      	adds	r7, #40	; 0x28
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800471e:	b580      	push	{r7, lr}
 8004720:	b08c      	sub	sp, #48	; 0x30
 8004722:	af04      	add	r7, sp, #16
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4618      	mov	r0, r3
 8004734:	f001 fdd0 	bl	80062d8 <pvPortMalloc>
 8004738:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00e      	beq.n	800475e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004740:	205c      	movs	r0, #92	; 0x5c
 8004742:	f001 fdc9 	bl	80062d8 <pvPortMalloc>
 8004746:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
 8004754:	e005      	b.n	8004762 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004756:	6978      	ldr	r0, [r7, #20]
 8004758:	f001 fe8a 	bl	8006470 <vPortFree>
 800475c:	e001      	b.n	8004762 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d017      	beq.n	8004798 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	2300      	movs	r3, #0
 8004774:	9303      	str	r3, [sp, #12]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	9302      	str	r3, [sp, #8]
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f80e 	bl	80047a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800478c:	69f8      	ldr	r0, [r7, #28]
 800478e:	f000 f89b 	bl	80048c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004792:	2301      	movs	r3, #1
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	e002      	b.n	800479e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004798:	f04f 33ff 	mov.w	r3, #4294967295
 800479c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800479e:	69bb      	ldr	r3, [r7, #24]
	}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	461a      	mov	r2, r3
 80047c0:	21a5      	movs	r1, #165	; 0xa5
 80047c2:	f003 fe8f 	bl	80084e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047d0:	3b01      	subs	r3, #1
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <prvInitialiseNewTask+0x58>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	617b      	str	r3, [r7, #20]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01f      	beq.n	8004846 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	e012      	b.n	8004832 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	7819      	ldrb	r1, [r3, #0]
 8004814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	3334      	adds	r3, #52	; 0x34
 800481c:	460a      	mov	r2, r1
 800481e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d006      	beq.n	800483a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	3301      	adds	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2b0f      	cmp	r3, #15
 8004836:	d9e9      	bls.n	800480c <prvInitialiseNewTask+0x64>
 8004838:	e000      	b.n	800483c <prvInitialiseNewTask+0x94>
			{
				break;
 800483a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004844:	e003      	b.n	800484e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	2b37      	cmp	r3, #55	; 0x37
 8004852:	d901      	bls.n	8004858 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004854:	2337      	movs	r3, #55	; 0x37
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800485c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004862:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	2200      	movs	r2, #0
 8004868:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fed0 	bl	8003614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	3318      	adds	r3, #24
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe fecb 	bl	8003614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004882:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004892:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	2200      	movs	r2, #0
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	69b8      	ldr	r0, [r7, #24]
 80048a8:	f001 fabe 	bl	8005e28 <pxPortInitialiseStack>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048be:	bf00      	nop
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048c8:	b5b0      	push	{r4, r5, r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048d0:	f001 fbd8 	bl	8006084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048d4:	4b3c      	ldr	r3, [pc, #240]	; (80049c8 <prvAddNewTaskToReadyList+0x100>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <prvAddNewTaskToReadyList+0x100>)
 80048dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048de:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <prvAddNewTaskToReadyList+0x104>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048e6:	4a39      	ldr	r2, [pc, #228]	; (80049cc <prvAddNewTaskToReadyList+0x104>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048ec:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <prvAddNewTaskToReadyList+0x100>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d110      	bne.n	8004916 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048f4:	f000 fc52 	bl	800519c <prvInitialiseTaskLists>
 80048f8:	e00d      	b.n	8004916 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048fa:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <prvAddNewTaskToReadyList+0x108>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004902:	4b32      	ldr	r3, [pc, #200]	; (80049cc <prvAddNewTaskToReadyList+0x104>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	429a      	cmp	r2, r3
 800490e:	d802      	bhi.n	8004916 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004910:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <prvAddNewTaskToReadyList+0x104>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004916:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <prvAddNewTaskToReadyList+0x10c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a2d      	ldr	r2, [pc, #180]	; (80049d4 <prvAddNewTaskToReadyList+0x10c>)
 800491e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004920:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <prvAddNewTaskToReadyList+0x10c>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <prvAddNewTaskToReadyList+0x94>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	f003 fb11 	bl	8007f58 <SEGGER_SYSVIEW_OnTaskCreate>
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	461d      	mov	r5, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461c      	mov	r4, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	1ae3      	subs	r3, r4, r3
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	462b      	mov	r3, r5
 8004958:	f001 ff6c 	bl	8006834 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4618      	mov	r0, r3
 8004960:	f003 fb7e 	bl	8008060 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <prvAddNewTaskToReadyList+0x110>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d903      	bls.n	8004978 <prvAddNewTaskToReadyList+0xb0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <prvAddNewTaskToReadyList+0x110>)
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <prvAddNewTaskToReadyList+0x114>)
 8004986:	441a      	add	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f7fe fe4d 	bl	800362e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004994:	f001 fba6 	bl	80060e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004998:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <prvAddNewTaskToReadyList+0x108>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvAddNewTaskToReadyList+0x104>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d207      	bcs.n	80049be <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <prvAddNewTaskToReadyList+0x118>)
 80049b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bdb0      	pop	{r4, r5, r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000d94 	.word	0x20000d94
 80049cc:	200008c0 	.word	0x200008c0
 80049d0:	20000da0 	.word	0x20000da0
 80049d4:	20000db0 	.word	0x20000db0
 80049d8:	20000d9c 	.word	0x20000d9c
 80049dc:	200008c4 	.word	0x200008c4
 80049e0:	e000ed04 	.word	0xe000ed04

080049e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	; 0x28
 80049e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049f2:	463a      	mov	r2, r7
 80049f4:	1d39      	adds	r1, r7, #4
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fdb6 	bl	800356c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	9202      	str	r2, [sp, #8]
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	460a      	mov	r2, r1
 8004a12:	492b      	ldr	r1, [pc, #172]	; (8004ac0 <vTaskStartScheduler+0xdc>)
 8004a14:	482b      	ldr	r0, [pc, #172]	; (8004ac4 <vTaskStartScheduler+0xe0>)
 8004a16:	f7ff fe25 	bl	8004664 <xTaskCreateStatic>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <vTaskStartScheduler+0xe4>)
 8004a1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a20:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <vTaskStartScheduler+0xe4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	e001      	b.n	8004a32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d102      	bne.n	8004a3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a38:	f000 fea8 	bl	800578c <xTimerCreateTimerTask>
 8004a3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d129      	bne.n	8004a98 <vTaskStartScheduler+0xb4>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	613b      	str	r3, [r7, #16]
}
 8004a56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a58:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <vTaskStartScheduler+0xe8>)
 8004a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <vTaskStartScheduler+0xec>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <vTaskStartScheduler+0xf0>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <vTaskStartScheduler+0xf4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3334      	adds	r3, #52	; 0x34
 8004a72:	2205      	movs	r2, #5
 8004a74:	4912      	ldr	r1, [pc, #72]	; (8004ac0 <vTaskStartScheduler+0xdc>)
 8004a76:	4618      	mov	r0, r3
 8004a78:	f003 fd18 	bl	80084ac <memcmp>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <vTaskStartScheduler+0xaa>
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <vTaskStartScheduler+0xf4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f003 faa8 	bl	8007fdc <SEGGER_SYSVIEW_OnTaskStartExec>
 8004a8c:	e001      	b.n	8004a92 <vTaskStartScheduler+0xae>
 8004a8e:	f003 fa47 	bl	8007f20 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a92:	f001 fa55 	bl	8005f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a96:	e00e      	b.n	8004ab6 <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d10a      	bne.n	8004ab6 <vTaskStartScheduler+0xd2>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <vTaskStartScheduler+0xd0>
}
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	0800b23c 	.word	0x0800b23c
 8004ac4:	08005169 	.word	0x08005169
 8004ac8:	20000db8 	.word	0x20000db8
 8004acc:	20000db4 	.word	0x20000db4
 8004ad0:	20000da0 	.word	0x20000da0
 8004ad4:	20000d98 	.word	0x20000d98
 8004ad8:	200008c0 	.word	0x200008c0

08004adc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <vTaskSuspendAll+0x18>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	4a03      	ldr	r2, [pc, #12]	; (8004af4 <vTaskSuspendAll+0x18>)
 8004ae8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004aea:	bf00      	nop
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	20000dbc 	.word	0x20000dbc

08004af8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b06:	4b44      	ldr	r3, [pc, #272]	; (8004c18 <xTaskResumeAll+0x120>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	603b      	str	r3, [r7, #0]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b24:	f001 faae 	bl	8006084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b28:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <xTaskResumeAll+0x120>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	4a3a      	ldr	r2, [pc, #232]	; (8004c18 <xTaskResumeAll+0x120>)
 8004b30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <xTaskResumeAll+0x120>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d166      	bne.n	8004c08 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b3a:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <xTaskResumeAll+0x124>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d062      	beq.n	8004c08 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b42:	e033      	b.n	8004bac <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <xTaskResumeAll+0x128>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3318      	adds	r3, #24
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe fdc9 	bl	80036e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fdc4 	bl	80036e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f003 fa7c 	bl	8008060 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <xTaskResumeAll+0x12c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d903      	bls.n	8004b7c <xTaskResumeAll+0x84>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4a2a      	ldr	r2, [pc, #168]	; (8004c24 <xTaskResumeAll+0x12c>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4a27      	ldr	r2, [pc, #156]	; (8004c28 <xTaskResumeAll+0x130>)
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fe fd4b 	bl	800362e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <xTaskResumeAll+0x134>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <xTaskResumeAll+0x138>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bac:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <xTaskResumeAll+0x128>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1c7      	bne.n	8004b44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bba:	f000 fbc5 	bl	8005348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <xTaskResumeAll+0x13c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d010      	beq.n	8004bec <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bca:	f000 f859 	bl	8004c80 <xTaskIncrementTick>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8004bd4:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <xTaskResumeAll+0x138>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f1      	bne.n	8004bca <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <xTaskResumeAll+0x13c>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <xTaskResumeAll+0x138>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <xTaskResumeAll+0x140>)
 8004bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c08:	f001 fa6c 	bl	80060e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000dbc 	.word	0x20000dbc
 8004c1c:	20000d94 	.word	0x20000d94
 8004c20:	20000d54 	.word	0x20000d54
 8004c24:	20000d9c 	.word	0x20000d9c
 8004c28:	200008c4 	.word	0x200008c4
 8004c2c:	200008c0 	.word	0x200008c0
 8004c30:	20000da8 	.word	0x20000da8
 8004c34:	20000da4 	.word	0x20000da4
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <xTaskGetTickCount+0x1c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c48:	687b      	ldr	r3, [r7, #4]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000d98 	.word	0x20000d98

08004c5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c62:	f001 faf9 	bl	8006258 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004c66:	2300      	movs	r3, #0
 8004c68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <xTaskGetTickCountFromISR+0x20>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c70:	683b      	ldr	r3, [r7, #0]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000d98 	.word	0x20000d98

08004c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c8a:	4b55      	ldr	r3, [pc, #340]	; (8004de0 <xTaskIncrementTick+0x160>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 8099 	bne.w	8004dc6 <xTaskIncrementTick+0x146>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c94:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <xTaskIncrementTick+0x164>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c9c:	4a51      	ldr	r2, [pc, #324]	; (8004de4 <xTaskIncrementTick+0x164>)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d120      	bne.n	8004cea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ca8:	4b4f      	ldr	r3, [pc, #316]	; (8004de8 <xTaskIncrementTick+0x168>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	603b      	str	r3, [r7, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <xTaskIncrementTick+0x46>
 8004cc8:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <xTaskIncrementTick+0x168>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <xTaskIncrementTick+0x16c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a45      	ldr	r2, [pc, #276]	; (8004de8 <xTaskIncrementTick+0x168>)
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4a45      	ldr	r2, [pc, #276]	; (8004dec <xTaskIncrementTick+0x16c>)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <xTaskIncrementTick+0x170>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a43      	ldr	r2, [pc, #268]	; (8004df0 <xTaskIncrementTick+0x170>)
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	f000 fb2f 	bl	8005348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cea:	4b42      	ldr	r3, [pc, #264]	; (8004df4 <xTaskIncrementTick+0x174>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d34d      	bcc.n	8004d90 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf4:	4b3c      	ldr	r3, [pc, #240]	; (8004de8 <xTaskIncrementTick+0x168>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <xTaskIncrementTick+0x174>)
 8004d00:	f04f 32ff 	mov.w	r2, #4294967295
 8004d04:	601a      	str	r2, [r3, #0]
					break;
 8004d06:	e043      	b.n	8004d90 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d08:	4b37      	ldr	r3, [pc, #220]	; (8004de8 <xTaskIncrementTick+0x168>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d203      	bcs.n	8004d28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d20:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <xTaskIncrementTick+0x174>)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d26:	e033      	b.n	8004d90 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fcdb 	bl	80036e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	3318      	adds	r3, #24
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fcd2 	bl	80036e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f003 f98a 	bl	8008060 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <xTaskIncrementTick+0x178>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d903      	bls.n	8004d60 <xTaskIncrementTick+0xe0>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <xTaskIncrementTick+0x178>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4a23      	ldr	r2, [pc, #140]	; (8004dfc <xTaskIncrementTick+0x17c>)
 8004d6e:	441a      	add	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f7fe fc59 	bl	800362e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <xTaskIncrementTick+0x180>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3b4      	bcc.n	8004cf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d8e:	e7b1      	b.n	8004cf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <xTaskIncrementTick+0x180>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	4919      	ldr	r1, [pc, #100]	; (8004dfc <xTaskIncrementTick+0x17c>)
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d901      	bls.n	8004dac <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8004dac:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <xTaskIncrementTick+0x184>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <xTaskIncrementTick+0x138>
			{
				vApplicationTickHook();
 8004db4:	f7fe fbd3 	bl	800355e <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004db8:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <xTaskIncrementTick+0x188>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <xTaskIncrementTick+0x154>
			{
				xSwitchRequired = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e006      	b.n	8004dd4 <xTaskIncrementTick+0x154>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <xTaskIncrementTick+0x184>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	4a0d      	ldr	r2, [pc, #52]	; (8004e04 <xTaskIncrementTick+0x184>)
 8004dce:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004dd0:	f7fe fbc5 	bl	800355e <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8004dd4:	697b      	ldr	r3, [r7, #20]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000dbc 	.word	0x20000dbc
 8004de4:	20000d98 	.word	0x20000d98
 8004de8:	20000d4c 	.word	0x20000d4c
 8004dec:	20000d50 	.word	0x20000d50
 8004df0:	20000dac 	.word	0x20000dac
 8004df4:	20000db4 	.word	0x20000db4
 8004df8:	20000d9c 	.word	0x20000d9c
 8004dfc:	200008c4 	.word	0x200008c4
 8004e00:	200008c0 	.word	0x200008c0
 8004e04:	20000da4 	.word	0x20000da4
 8004e08:	20000da8 	.word	0x20000da8

08004e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e12:	4b30      	ldr	r3, [pc, #192]	; (8004ed4 <vTaskSwitchContext+0xc8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ed8 <vTaskSwitchContext+0xcc>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e20:	e054      	b.n	8004ecc <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 8004e22:	4b2d      	ldr	r3, [pc, #180]	; (8004ed8 <vTaskSwitchContext+0xcc>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e28:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <vTaskSwitchContext+0xd0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e010      	b.n	8004e52 <vTaskSwitchContext+0x46>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <vTaskSwitchContext+0x40>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	607b      	str	r3, [r7, #4]
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <vTaskSwitchContext+0x3e>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	4923      	ldr	r1, [pc, #140]	; (8004ee0 <vTaskSwitchContext+0xd4>)
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0e4      	beq.n	8004e30 <vTaskSwitchContext+0x24>
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <vTaskSwitchContext+0xd4>)
 8004e72:	4413      	add	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	3308      	adds	r3, #8
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d104      	bne.n	8004e96 <vTaskSwitchContext+0x8a>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <vTaskSwitchContext+0xd8>)
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	4a0e      	ldr	r2, [pc, #56]	; (8004edc <vTaskSwitchContext+0xd0>)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <vTaskSwitchContext+0xd8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3334      	adds	r3, #52	; 0x34
 8004eac:	2205      	movs	r2, #5
 8004eae:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <vTaskSwitchContext+0xdc>)
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f003 fafb 	bl	80084ac <memcmp>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <vTaskSwitchContext+0xbc>
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <vTaskSwitchContext+0xd8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f003 f88b 	bl	8007fdc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004ec6:	e001      	b.n	8004ecc <vTaskSwitchContext+0xc0>
		traceTASK_SWITCHED_IN();
 8004ec8:	f003 f82a 	bl	8007f20 <SEGGER_SYSVIEW_OnIdle>
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000dbc 	.word	0x20000dbc
 8004ed8:	20000da8 	.word	0x20000da8
 8004edc:	20000d9c 	.word	0x20000d9c
 8004ee0:	200008c4 	.word	0x200008c4
 8004ee4:	200008c0 	.word	0x200008c0
 8004ee8:	0800b23c 	.word	0x0800b23c

08004eec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	60fb      	str	r3, [r7, #12]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <vTaskPlaceOnEventList+0x44>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3318      	adds	r3, #24
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fe fbab 	bl	8003676 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f20:	2101      	movs	r1, #1
 8004f22:	6838      	ldr	r0, [r7, #0]
 8004f24:	f000 fbcc 	bl	80056c0 <prvAddCurrentTaskToDelayedList>
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	200008c0 	.word	0x200008c0

08004f34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <vTaskPlaceOnEventListRestricted+0x58>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3318      	adds	r3, #24
 8004f62:	4619      	mov	r1, r3
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7fe fb62 	bl	800362e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295
 8004f74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004f76:	2024      	movs	r0, #36	; 0x24
 8004f78:	f002 fad4 	bl	8007524 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	68b8      	ldr	r0, [r7, #8]
 8004f80:	f000 fb9e 	bl	80056c0 <prvAddCurrentTaskToDelayedList>
	}
 8004f84:	bf00      	nop
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	200008c0 	.word	0x200008c0

08004f90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe fb91 	bl	80036e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <xTaskRemoveFromEventList+0xb8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d121      	bne.n	8005012 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fb88 	bl	80036e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f003 f840 	bl	8008060 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe4:	4b19      	ldr	r3, [pc, #100]	; (800504c <xTaskRemoveFromEventList+0xbc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d903      	bls.n	8004ff4 <xTaskRemoveFromEventList+0x64>
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <xTaskRemoveFromEventList+0xbc>)
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <xTaskRemoveFromEventList+0xc0>)
 8005002:	441a      	add	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fe fb0f 	bl	800362e <vListInsertEnd>
 8005010:	e005      	b.n	800501e <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3318      	adds	r3, #24
 8005016:	4619      	mov	r1, r3
 8005018:	480e      	ldr	r0, [pc, #56]	; (8005054 <xTaskRemoveFromEventList+0xc4>)
 800501a:	f7fe fb08 	bl	800362e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <xTaskRemoveFromEventList+0xc8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	429a      	cmp	r2, r3
 800502a:	d905      	bls.n	8005038 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800502c:	2301      	movs	r3, #1
 800502e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <xTaskRemoveFromEventList+0xcc>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e001      	b.n	800503c <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800503c:	697b      	ldr	r3, [r7, #20]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000dbc 	.word	0x20000dbc
 800504c:	20000d9c 	.word	0x20000d9c
 8005050:	200008c4 	.word	0x200008c4
 8005054:	20000d54 	.word	0x20000d54
 8005058:	200008c0 	.word	0x200008c0
 800505c:	20000da8 	.word	0x20000da8

08005060 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <vTaskInternalSetTimeOutState+0x24>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <vTaskInternalSetTimeOutState+0x28>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	605a      	str	r2, [r3, #4]
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	20000dac 	.word	0x20000dac
 8005088:	20000d98 	.word	0x20000d98

0800508c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	613b      	str	r3, [r7, #16]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	60fb      	str	r3, [r7, #12]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050ce:	f000 ffd9 	bl	8006084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <xTaskCheckForTimeOut+0xbc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d102      	bne.n	80050f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	e023      	b.n	800513a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <xTaskCheckForTimeOut+0xc0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d007      	beq.n	800510e <xTaskCheckForTimeOut+0x82>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	429a      	cmp	r2, r3
 8005106:	d302      	bcc.n	800510e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005108:	2301      	movs	r3, #1
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e015      	b.n	800513a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	429a      	cmp	r2, r3
 8005116:	d20b      	bcs.n	8005130 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff ff9b 	bl	8005060 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e004      	b.n	800513a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005136:	2301      	movs	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800513a:	f000 ffd3 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 800513e:	69fb      	ldr	r3, [r7, #28]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000d98 	.word	0x20000d98
 800514c:	20000dac 	.word	0x20000dac

08005150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005154:	4b03      	ldr	r3, [pc, #12]	; (8005164 <vTaskMissedYield+0x14>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
}
 800515a:	bf00      	nop
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	20000da8 	.word	0x20000da8

08005168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005170:	f000 f854 	bl	800521c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <prvIdleTask+0x2c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d907      	bls.n	800518c <prvIdleTask+0x24>
			{
				taskYIELD();
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <prvIdleTask+0x30>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800518c:	f7fe f9e0 	bl	8003550 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005190:	e7ee      	b.n	8005170 <prvIdleTask+0x8>
 8005192:	bf00      	nop
 8005194:	200008c4 	.word	0x200008c4
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051a2:	2300      	movs	r3, #0
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	e00c      	b.n	80051c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a12      	ldr	r2, [pc, #72]	; (80051fc <prvInitialiseTaskLists+0x60>)
 80051b4:	4413      	add	r3, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fa0c 	bl	80035d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3301      	adds	r3, #1
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b37      	cmp	r3, #55	; 0x37
 80051c6:	d9ef      	bls.n	80051a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051c8:	480d      	ldr	r0, [pc, #52]	; (8005200 <prvInitialiseTaskLists+0x64>)
 80051ca:	f7fe fa03 	bl	80035d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051ce:	480d      	ldr	r0, [pc, #52]	; (8005204 <prvInitialiseTaskLists+0x68>)
 80051d0:	f7fe fa00 	bl	80035d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051d4:	480c      	ldr	r0, [pc, #48]	; (8005208 <prvInitialiseTaskLists+0x6c>)
 80051d6:	f7fe f9fd 	bl	80035d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051da:	480c      	ldr	r0, [pc, #48]	; (800520c <prvInitialiseTaskLists+0x70>)
 80051dc:	f7fe f9fa 	bl	80035d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051e0:	480b      	ldr	r0, [pc, #44]	; (8005210 <prvInitialiseTaskLists+0x74>)
 80051e2:	f7fe f9f7 	bl	80035d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <prvInitialiseTaskLists+0x78>)
 80051e8:	4a05      	ldr	r2, [pc, #20]	; (8005200 <prvInitialiseTaskLists+0x64>)
 80051ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <prvInitialiseTaskLists+0x7c>)
 80051ee:	4a05      	ldr	r2, [pc, #20]	; (8005204 <prvInitialiseTaskLists+0x68>)
 80051f0:	601a      	str	r2, [r3, #0]
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200008c4 	.word	0x200008c4
 8005200:	20000d24 	.word	0x20000d24
 8005204:	20000d38 	.word	0x20000d38
 8005208:	20000d54 	.word	0x20000d54
 800520c:	20000d68 	.word	0x20000d68
 8005210:	20000d80 	.word	0x20000d80
 8005214:	20000d4c 	.word	0x20000d4c
 8005218:	20000d50 	.word	0x20000d50

0800521c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005222:	e019      	b.n	8005258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005224:	f000 ff2e 	bl	8006084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005228:	4b10      	ldr	r3, [pc, #64]	; (800526c <prvCheckTasksWaitingTermination+0x50>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe fa57 	bl	80036e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800523a:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <prvCheckTasksWaitingTermination+0x54>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3b01      	subs	r3, #1
 8005240:	4a0b      	ldr	r2, [pc, #44]	; (8005270 <prvCheckTasksWaitingTermination+0x54>)
 8005242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <prvCheckTasksWaitingTermination+0x58>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3b01      	subs	r3, #1
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <prvCheckTasksWaitingTermination+0x58>)
 800524c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800524e:	f000 ff49 	bl	80060e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f848 	bl	80052e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <prvCheckTasksWaitingTermination+0x58>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e1      	bne.n	8005224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000d68 	.word	0x20000d68
 8005270:	20000d94 	.word	0x20000d94
 8005274:	20000d7c 	.word	0x20000d7c

08005278 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005284:	e005      	b.n	8005292 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3301      	adds	r3, #1
 800528a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2ba5      	cmp	r3, #165	; 0xa5
 8005298:	d0f5      	beq.n	8005286 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	b29b      	uxth	r3, r3
	}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <uxTaskGetStackHighWaterMark+0x14>
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <uxTaskGetStackHighWaterMark+0x34>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	e000      	b.n	80052c6 <uxTaskGetStackHighWaterMark+0x16>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80052ce:	6938      	ldr	r0, [r7, #16]
 80052d0:	f7ff ffd2 	bl	8005278 <prvTaskCheckFreeStackSpace>
 80052d4:	4603      	mov	r3, r0
 80052d6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80052d8:	68fb      	ldr	r3, [r7, #12]
	}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	200008c0 	.word	0x200008c0

080052e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 f8b6 	bl	8006470 <vPortFree>
				vPortFree( pxTCB );
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 f8b3 	bl	8006470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800530a:	e018      	b.n	800533e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005312:	2b01      	cmp	r3, #1
 8005314:	d103      	bne.n	800531e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 f8aa 	bl	8006470 <vPortFree>
	}
 800531c:	e00f      	b.n	800533e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005324:	2b02      	cmp	r3, #2
 8005326:	d00a      	beq.n	800533e <prvDeleteTCB+0x56>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	60fb      	str	r3, [r7, #12]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <prvDeleteTCB+0x54>
	}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800534e:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <prvResetNextTaskUnblockTime+0x38>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <prvResetNextTaskUnblockTime+0x3c>)
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005360:	e008      	b.n	8005374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005362:	4b07      	ldr	r3, [pc, #28]	; (8005380 <prvResetNextTaskUnblockTime+0x38>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a04      	ldr	r2, [pc, #16]	; (8005384 <prvResetNextTaskUnblockTime+0x3c>)
 8005372:	6013      	str	r3, [r2, #0]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000d4c 	.word	0x20000d4c
 8005384:	20000db4 	.word	0x20000db4

08005388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <xTaskGetSchedulerState+0x34>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005396:	2301      	movs	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	e008      	b.n	80053ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <xTaskGetSchedulerState+0x38>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053a4:	2302      	movs	r3, #2
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	e001      	b.n	80053ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053ae:	687b      	ldr	r3, [r7, #4]
	}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20000da0 	.word	0x20000da0
 80053c0:	20000dbc 	.word	0x20000dbc

080053c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d056      	beq.n	8005488 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <xTaskPriorityInherit+0xd0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d246      	bcs.n	8005476 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	db06      	blt.n	80053fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <xTaskPriorityInherit+0xd0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6959      	ldr	r1, [r3, #20]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4a22      	ldr	r2, [pc, #136]	; (8005498 <xTaskPriorityInherit+0xd4>)
 8005410:	4413      	add	r3, r2
 8005412:	4299      	cmp	r1, r3
 8005414:	d122      	bne.n	800545c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3304      	adds	r3, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe f964 	bl	80036e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005420:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <xTaskPriorityInherit+0xd0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <xTaskPriorityInherit+0xd8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d903      	bls.n	800543e <xTaskPriorityInherit+0x7a>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	4a18      	ldr	r2, [pc, #96]	; (800549c <xTaskPriorityInherit+0xd8>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <xTaskPriorityInherit+0xd4>)
 800544c:	441a      	add	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7fe f8ea 	bl	800362e <vListInsertEnd>
 800545a:	e004      	b.n	8005466 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <xTaskPriorityInherit+0xd0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4619      	mov	r1, r3
 800546a:	2049      	movs	r0, #73	; 0x49
 800546c:	f002 f878 	bl	8007560 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005470:	2301      	movs	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e008      	b.n	8005488 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <xTaskPriorityInherit+0xd0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	429a      	cmp	r2, r3
 8005482:	d201      	bcs.n	8005488 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005488:	68fb      	ldr	r3, [r7, #12]
	}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	200008c0 	.word	0x200008c0
 8005498:	200008c4 	.word	0x200008c4
 800549c:	20000d9c 	.word	0x20000d9c

080054a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d05b      	beq.n	800556e <xTaskPriorityDisinherit+0xce>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054b6:	4b30      	ldr	r3, [pc, #192]	; (8005578 <xTaskPriorityDisinherit+0xd8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d00a      	beq.n	80054d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60fb      	str	r3, [r7, #12]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60bb      	str	r3, [r7, #8]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	1e5a      	subs	r2, r3, #1
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	429a      	cmp	r2, r3
 8005508:	d031      	beq.n	800556e <xTaskPriorityDisinherit+0xce>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550e:	2b00      	cmp	r3, #0
 8005510:	d12d      	bne.n	800556e <xTaskPriorityDisinherit+0xce>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe f8e6 	bl	80036e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4619      	mov	r1, r3
 8005520:	204a      	movs	r0, #74	; 0x4a
 8005522:	f002 f81d 	bl	8007560 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <xTaskPriorityDisinherit+0xdc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d903      	bls.n	800554e <xTaskPriorityDisinherit+0xae>
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	4a0c      	ldr	r2, [pc, #48]	; (800557c <xTaskPriorityDisinherit+0xdc>)
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4a09      	ldr	r2, [pc, #36]	; (8005580 <xTaskPriorityDisinherit+0xe0>)
 800555c:	441a      	add	r2, r3
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	3304      	adds	r3, #4
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f7fe f862 	bl	800362e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800556a:	2301      	movs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800556e:	697b      	ldr	r3, [r7, #20]
	}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	200008c0 	.word	0x200008c0
 800557c:	20000d9c 	.word	0x20000d9c
 8005580:	200008c4 	.word	0x200008c4

08005584 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005592:	2301      	movs	r3, #1
 8005594:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d073      	beq.n	8005684 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	60fb      	str	r3, [r7, #12]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d902      	bls.n	80055ca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	e002      	b.n	80055d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d054      	beq.n	8005684 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d14f      	bne.n	8005684 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80055e4:	4b29      	ldr	r3, [pc, #164]	; (800568c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10a      	bne.n	8005604 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60bb      	str	r3, [r7, #8]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4619      	mov	r1, r3
 8005608:	204a      	movs	r0, #74	; 0x4a
 800560a:	f001 ffa9 	bl	8007560 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	db04      	blt.n	800562c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	6959      	ldr	r1, [r3, #20]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800563c:	4413      	add	r3, r2
 800563e:	4299      	cmp	r1, r3
 8005640:	d120      	bne.n	8005684 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe f84e 	bl	80036e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4618      	mov	r0, r3
 8005650:	f002 fd06 	bl	8008060 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d903      	bls.n	8005668 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	4a0b      	ldr	r2, [pc, #44]	; (8005694 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4a06      	ldr	r2, [pc, #24]	; (8005690 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005676:	441a      	add	r2, r3
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f7fd ffd5 	bl	800362e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005684:	bf00      	nop
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	200008c0 	.word	0x200008c0
 8005690:	200008c4 	.word	0x200008c4
 8005694:	20000d9c 	.word	0x20000d9c

08005698 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <pvTaskIncrementMutexHeldCount+0x24>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <pvTaskIncrementMutexHeldCount+0x24>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056aa:	3201      	adds	r2, #1
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80056ae:	4b03      	ldr	r3, [pc, #12]	; (80056bc <pvTaskIncrementMutexHeldCount+0x24>)
 80056b0:	681b      	ldr	r3, [r3, #0]
	}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	200008c0 	.word	0x200008c0

080056c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056ca:	4b2a      	ldr	r3, [pc, #168]	; (8005774 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056d0:	4b29      	ldr	r3, [pc, #164]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe f806 	bl	80036e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d110      	bne.n	8005706 <prvAddCurrentTaskToDelayedList+0x46>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80056ea:	4b23      	ldr	r3, [pc, #140]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	211b      	movs	r1, #27
 80056f0:	4618      	mov	r0, r3
 80056f2:	f002 fcf7 	bl	80080e4 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	481f      	ldr	r0, [pc, #124]	; (800577c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005700:	f7fd ff95 	bl	800362e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005704:	e032      	b.n	800576c <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800570e:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	429a      	cmp	r2, r3
 800571c:	d20f      	bcs.n	800573e <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800571e:	4b16      	ldr	r3, [pc, #88]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2104      	movs	r1, #4
 8005724:	4618      	mov	r0, r3
 8005726:	f002 fcdd 	bl	80080e4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <prvAddCurrentTaskToDelayedList+0xc0>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f7fd ff9d 	bl	8003676 <vListInsert>
}
 800573c:	e016      	b.n	800576c <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2104      	movs	r1, #4
 8005744:	4618      	mov	r0, r3
 8005746:	f002 fccd 	bl	80080e4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800574a:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <prvAddCurrentTaskToDelayedList+0xc4>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7fd ff8d 	bl	8003676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <prvAddCurrentTaskToDelayedList+0xc8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	429a      	cmp	r2, r3
 8005764:	d202      	bcs.n	800576c <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 8005766:	4a08      	ldr	r2, [pc, #32]	; (8005788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000d98 	.word	0x20000d98
 8005778:	200008c0 	.word	0x200008c0
 800577c:	20000d80 	.word	0x20000d80
 8005780:	20000d50 	.word	0x20000d50
 8005784:	20000d4c 	.word	0x20000d4c
 8005788:	20000db4 	.word	0x20000db4

0800578c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005796:	f000 fb07 	bl	8005da8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800579a:	4b1c      	ldr	r3, [pc, #112]	; (800580c <xTimerCreateTimerTask+0x80>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d021      	beq.n	80057e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057aa:	1d3a      	adds	r2, r7, #4
 80057ac:	f107 0108 	add.w	r1, r7, #8
 80057b0:	f107 030c 	add.w	r3, r7, #12
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fd fef3 	bl	80035a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	9202      	str	r2, [sp, #8]
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	2302      	movs	r3, #2
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	2300      	movs	r3, #0
 80057ca:	460a      	mov	r2, r1
 80057cc:	4910      	ldr	r1, [pc, #64]	; (8005810 <xTimerCreateTimerTask+0x84>)
 80057ce:	4811      	ldr	r0, [pc, #68]	; (8005814 <xTimerCreateTimerTask+0x88>)
 80057d0:	f7fe ff48 	bl	8004664 <xTaskCreateStatic>
 80057d4:	4603      	mov	r3, r0
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <xTimerCreateTimerTask+0x8c>)
 80057d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <xTimerCreateTimerTask+0x8c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057e2:	2301      	movs	r3, #1
 80057e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	613b      	str	r3, [r7, #16]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005802:	697b      	ldr	r3, [r7, #20]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000df0 	.word	0x20000df0
 8005810:	0800b244 	.word	0x0800b244
 8005814:	08005951 	.word	0x08005951
 8005818:	20000df4 	.word	0x20000df4

0800581c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800582a:	2300      	movs	r3, #0
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	623b      	str	r3, [r7, #32]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800584a:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <xTimerGenericCommand+0x98>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d02a      	beq.n	80058a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b05      	cmp	r3, #5
 8005862:	dc18      	bgt.n	8005896 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005864:	f7ff fd90 	bl	8005388 <xTaskGetSchedulerState>
 8005868:	4603      	mov	r3, r0
 800586a:	2b02      	cmp	r3, #2
 800586c:	d109      	bne.n	8005882 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <xTimerGenericCommand+0x98>)
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	f107 0110 	add.w	r1, r7, #16
 8005876:	2300      	movs	r3, #0
 8005878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587a:	f7fe f8a3 	bl	80039c4 <xQueueGenericSend>
 800587e:	6278      	str	r0, [r7, #36]	; 0x24
 8005880:	e012      	b.n	80058a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <xTimerGenericCommand+0x98>)
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	f107 0110 	add.w	r1, r7, #16
 800588a:	2300      	movs	r3, #0
 800588c:	2200      	movs	r2, #0
 800588e:	f7fe f899 	bl	80039c4 <xQueueGenericSend>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24
 8005894:	e008      	b.n	80058a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <xTimerGenericCommand+0x98>)
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	f107 0110 	add.w	r1, r7, #16
 800589e:	2300      	movs	r3, #0
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	f7fe f9b5 	bl	8003c10 <xQueueGenericSendFromISR>
 80058a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3728      	adds	r7, #40	; 0x28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000df0 	.word	0x20000df0

080058b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af02      	add	r7, sp, #8
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c2:	4b22      	ldr	r3, [pc, #136]	; (800594c <prvProcessExpiredTimer+0x94>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fd ff09 	bl	80036e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d022      	beq.n	800592a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	18d1      	adds	r1, r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	6978      	ldr	r0, [r7, #20]
 80058f2:	f000 f8d1 	bl	8005a98 <prvInsertTimerInActiveList>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01f      	beq.n	800593c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058fc:	2300      	movs	r3, #0
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	2300      	movs	r3, #0
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	2100      	movs	r1, #0
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f7ff ff88 	bl	800581c <xTimerGenericCommand>
 800590c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d113      	bne.n	800593c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	60fb      	str	r3, [r7, #12]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005930:	f023 0301 	bic.w	r3, r3, #1
 8005934:	b2da      	uxtb	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	6978      	ldr	r0, [r7, #20]
 8005942:	4798      	blx	r3
}
 8005944:	bf00      	nop
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000de8 	.word	0x20000de8

08005950 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005958:	f107 0308 	add.w	r3, r7, #8
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f857 	bl	8005a10 <prvGetNextExpireTime>
 8005962:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4619      	mov	r1, r3
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f803 	bl	8005974 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800596e:	f000 f8d5 	bl	8005b1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005972:	e7f1      	b.n	8005958 <prvTimerTask+0x8>

08005974 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800597e:	f7ff f8ad 	bl	8004adc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005982:	f107 0308 	add.w	r3, r7, #8
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f866 	bl	8005a58 <prvSampleTimeNow>
 800598c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d130      	bne.n	80059f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <prvProcessTimerOrBlockTask+0x3c>
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d806      	bhi.n	80059b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059a2:	f7ff f8a9 	bl	8004af8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff ff85 	bl	80058b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059ae:	e024      	b.n	80059fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <prvProcessTimerOrBlockTask+0x90>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <prvProcessTimerOrBlockTask+0x50>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <prvProcessTimerOrBlockTask+0x52>
 80059c4:	2300      	movs	r3, #0
 80059c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059c8:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <prvProcessTimerOrBlockTask+0x94>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	4619      	mov	r1, r3
 80059d6:	f7fe fe11 	bl	80045fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059da:	f7ff f88d 	bl	8004af8 <xTaskResumeAll>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059e4:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <prvProcessTimerOrBlockTask+0x98>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	f3bf 8f6f 	isb	sy
}
 80059f4:	e001      	b.n	80059fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059f6:	f7ff f87f 	bl	8004af8 <xTaskResumeAll>
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000dec 	.word	0x20000dec
 8005a08:	20000df0 	.word	0x20000df0
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a18:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <prvGetNextExpireTime+0x44>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <prvGetNextExpireTime+0x16>
 8005a22:	2201      	movs	r2, #1
 8005a24:	e000      	b.n	8005a28 <prvGetNextExpireTime+0x18>
 8005a26:	2200      	movs	r2, #0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a34:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <prvGetNextExpireTime+0x44>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e001      	b.n	8005a44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a44:	68fb      	ldr	r3, [r7, #12]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000de8 	.word	0x20000de8

08005a58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a60:	f7ff f8ec 	bl	8004c3c <xTaskGetTickCount>
 8005a64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <prvSampleTimeNow+0x3c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d205      	bcs.n	8005a7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a70:	f000 f936 	bl	8005ce0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e002      	b.n	8005a82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a82:	4a04      	ldr	r2, [pc, #16]	; (8005a94 <prvSampleTimeNow+0x3c>)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a88:	68fb      	ldr	r3, [r7, #12]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000df8 	.word	0x20000df8

08005a98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d812      	bhi.n	8005ae4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d302      	bcc.n	8005ad2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005acc:	2301      	movs	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e01b      	b.n	8005b0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <prvInsertTimerInActiveList+0x7c>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f7fd fdca 	bl	8003676 <vListInsert>
 8005ae2:	e012      	b.n	8005b0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d206      	bcs.n	8005afa <prvInsertTimerInActiveList+0x62>
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d302      	bcc.n	8005afa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e007      	b.n	8005b0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005afa:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <prvInsertTimerInActiveList+0x80>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f7fd fdb6 	bl	8003676 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b0a:	697b      	ldr	r3, [r7, #20]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20000dec 	.word	0x20000dec
 8005b18:	20000de8 	.word	0x20000de8

08005b1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08e      	sub	sp, #56	; 0x38
 8005b20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b22:	e0ca      	b.n	8005cba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	da18      	bge.n	8005b5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b2a:	1d3b      	adds	r3, r7, #4
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	61fb      	str	r3, [r7, #28]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b52:	6850      	ldr	r0, [r2, #4]
 8005b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b56:	6892      	ldr	r2, [r2, #8]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f2c0 80aa 	blt.w	8005cb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	3304      	adds	r3, #4
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fd fdb7 	bl	80036e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff6b 	bl	8005a58 <prvSampleTimeNow>
 8005b82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	f200 8097 	bhi.w	8005cba <prvProcessReceivedCommands+0x19e>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <prvProcessReceivedCommands+0x78>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005bbd 	.word	0x08005bbd
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bbd 	.word	0x08005bbd
 8005ba0:	08005c31 	.word	0x08005c31
 8005ba4:	08005c45 	.word	0x08005c45
 8005ba8:	08005c8f 	.word	0x08005c8f
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005bbd 	.word	0x08005bbd
 8005bb4:	08005c31 	.word	0x08005c31
 8005bb8:	08005c45 	.word	0x08005c45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	18d1      	adds	r1, r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bdc:	f7ff ff5c 	bl	8005a98 <prvInsertTimerInActiveList>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d069      	beq.n	8005cba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d05e      	beq.n	8005cba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	441a      	add	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0e:	f7ff fe05 	bl	800581c <xTimerGenericCommand>
 8005c12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d14f      	bne.n	8005cba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	61bb      	str	r3, [r7, #24]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c42:	e03a      	b.n	8005cba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	617b      	str	r3, [r7, #20]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	18d1      	adds	r1, r2, r3
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c88:	f7ff ff06 	bl	8005a98 <prvInsertTimerInActiveList>
					break;
 8005c8c:	e015      	b.n	8005cba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d103      	bne.n	8005ca4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9e:	f000 fbe7 	bl	8006470 <vPortFree>
 8005ca2:	e00a      	b.n	8005cba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cb6:	e000      	b.n	8005cba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005cb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cba:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <prvProcessReceivedCommands+0x1c0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	1d39      	adds	r1, r7, #4
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe f8f4 	bl	8003eb0 <xQueueReceive>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f47f af2a 	bne.w	8005b24 <prvProcessReceivedCommands+0x8>
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	3730      	adds	r7, #48	; 0x30
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000df0 	.word	0x20000df0

08005ce0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ce6:	e048      	b.n	8005d7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ce8:	4b2d      	ldr	r3, [pc, #180]	; (8005da0 <prvSwitchTimerLists+0xc0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf2:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <prvSwitchTimerLists+0xc0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd fcf1 	bl	80036e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d02e      	beq.n	8005d7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d90e      	bls.n	8005d4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d3a:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <prvSwitchTimerLists+0xc0>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f7fd fc96 	bl	8003676 <vListInsert>
 8005d4a:	e016      	b.n	8005d7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2300      	movs	r3, #0
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	2100      	movs	r1, #0
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff fd60 	bl	800581c <xTimerGenericCommand>
 8005d5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	603b      	str	r3, [r7, #0]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <prvSwitchTimerLists+0xc0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1b1      	bne.n	8005ce8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <prvSwitchTimerLists+0xc0>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <prvSwitchTimerLists+0xc4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <prvSwitchTimerLists+0xc0>)
 8005d90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d92:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <prvSwitchTimerLists+0xc4>)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20000de8 	.word	0x20000de8
 8005da4:	20000dec 	.word	0x20000dec

08005da8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005dae:	f000 f969 	bl	8006084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <prvCheckForValidListAndQueue+0x60>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d120      	bne.n	8005dfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dba:	4814      	ldr	r0, [pc, #80]	; (8005e0c <prvCheckForValidListAndQueue+0x64>)
 8005dbc:	f7fd fc0a 	bl	80035d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dc0:	4813      	ldr	r0, [pc, #76]	; (8005e10 <prvCheckForValidListAndQueue+0x68>)
 8005dc2:	f7fd fc07 	bl	80035d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <prvCheckForValidListAndQueue+0x6c>)
 8005dc8:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <prvCheckForValidListAndQueue+0x64>)
 8005dca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <prvCheckForValidListAndQueue+0x70>)
 8005dce:	4a10      	ldr	r2, [pc, #64]	; (8005e10 <prvCheckForValidListAndQueue+0x68>)
 8005dd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <prvCheckForValidListAndQueue+0x74>)
 8005dd8:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <prvCheckForValidListAndQueue+0x78>)
 8005dda:	2110      	movs	r1, #16
 8005ddc:	200a      	movs	r0, #10
 8005dde:	f7fd fd15 	bl	800380c <xQueueGenericCreateStatic>
 8005de2:	4603      	mov	r3, r0
 8005de4:	4a08      	ldr	r2, [pc, #32]	; (8005e08 <prvCheckForValidListAndQueue+0x60>)
 8005de6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <prvCheckForValidListAndQueue+0x60>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <prvCheckForValidListAndQueue+0x60>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	490b      	ldr	r1, [pc, #44]	; (8005e24 <prvCheckForValidListAndQueue+0x7c>)
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fbce 	bl	8004598 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dfc:	f000 f972 	bl	80060e4 <vPortExitCritical>
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000df0 	.word	0x20000df0
 8005e0c:	20000dc0 	.word	0x20000dc0
 8005e10:	20000dd4 	.word	0x20000dd4
 8005e14:	20000de8 	.word	0x20000de8
 8005e18:	20000dec 	.word	0x20000dec
 8005e1c:	20000e9c 	.word	0x20000e9c
 8005e20:	20000dfc 	.word	0x20000dfc
 8005e24:	0800b24c 	.word	0x0800b24c

08005e28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3b04      	subs	r3, #4
 8005e38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3b04      	subs	r3, #4
 8005e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f023 0201 	bic.w	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3b04      	subs	r3, #4
 8005e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e58:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <pxPortInitialiseStack+0x64>)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3b14      	subs	r3, #20
 8005e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3b04      	subs	r3, #4
 8005e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f06f 0202 	mvn.w	r2, #2
 8005e76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3b20      	subs	r3, #32
 8005e7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	08005e91 	.word	0x08005e91

08005e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <prvTaskExitError+0x54>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	d00a      	beq.n	8005eba <prvTaskExitError+0x2a>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <prvTaskExitError+0x28>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	60bb      	str	r3, [r7, #8]
}
 8005ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ece:	bf00      	nop
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0fc      	beq.n	8005ed0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	2000000c 	.word	0x2000000c
	...

08005ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	4770      	bx	lr
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst2>:
 8005f10:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f18:	4808      	ldr	r0, [pc, #32]	; (8005f3c <prvPortStartFirstTask+0x24>)
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f380 8808 	msr	MSP, r0
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8814 	msr	CONTROL, r0
 8005f2a:	b662      	cpsie	i
 8005f2c:	b661      	cpsie	f
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	df00      	svc	0
 8005f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f3a:	bf00      	nop
 8005f3c:	e000ed08 	.word	0xe000ed08

08005f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f46:	4b46      	ldr	r3, [pc, #280]	; (8006060 <xPortStartScheduler+0x120>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a46      	ldr	r2, [pc, #280]	; (8006064 <xPortStartScheduler+0x124>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10a      	bne.n	8005f66 <xPortStartScheduler+0x26>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f66:	4b3e      	ldr	r3, [pc, #248]	; (8006060 <xPortStartScheduler+0x120>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a3f      	ldr	r2, [pc, #252]	; (8006068 <xPortStartScheduler+0x128>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10a      	bne.n	8005f86 <xPortStartScheduler+0x46>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f86:	4b39      	ldr	r3, [pc, #228]	; (800606c <xPortStartScheduler+0x12c>)
 8005f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	22ff      	movs	r2, #255	; 0xff
 8005f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b31      	ldr	r3, [pc, #196]	; (8006070 <xPortStartScheduler+0x130>)
 8005fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fae:	4b31      	ldr	r3, [pc, #196]	; (8006074 <xPortStartScheduler+0x134>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fb4:	e009      	b.n	8005fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <xPortStartScheduler+0x134>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <xPortStartScheduler+0x134>)
 8005fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b80      	cmp	r3, #128	; 0x80
 8005fd4:	d0ef      	beq.n	8005fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fd6:	4b27      	ldr	r3, [pc, #156]	; (8006074 <xPortStartScheduler+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1c3 0307 	rsb	r3, r3, #7
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d00a      	beq.n	8005ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60bb      	str	r3, [r7, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <xPortStartScheduler+0x134>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <xPortStartScheduler+0x134>)
 8006000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006002:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <xPortStartScheduler+0x134>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <xPortStartScheduler+0x134>)
 800600c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <xPortStartScheduler+0x138>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <xPortStartScheduler+0x138>)
 800601c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <xPortStartScheduler+0x138>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a14      	ldr	r2, [pc, #80]	; (8006078 <xPortStartScheduler+0x138>)
 8006028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800602c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800602e:	f000 f8e5 	bl	80061fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <xPortStartScheduler+0x13c>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006038:	f000 f904 	bl	8006244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <xPortStartScheduler+0x140>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <xPortStartScheduler+0x140>)
 8006042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006048:	f7ff ff66 	bl	8005f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800604c:	f7fe fede 	bl	8004e0c <vTaskSwitchContext>
	prvTaskExitError();
 8006050:	f7ff ff1e 	bl	8005e90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000ed00 	.word	0xe000ed00
 8006064:	410fc271 	.word	0x410fc271
 8006068:	410fc270 	.word	0x410fc270
 800606c:	e000e400 	.word	0xe000e400
 8006070:	20000eec 	.word	0x20000eec
 8006074:	20000ef0 	.word	0x20000ef0
 8006078:	e000ed20 	.word	0xe000ed20
 800607c:	2000000c 	.word	0x2000000c
 8006080:	e000ef34 	.word	0xe000ef34

08006084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <vPortEnterCritical+0x58>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <vPortEnterCritical+0x58>)
 80060a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <vPortEnterCritical+0x58>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10f      	bne.n	80060d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <vPortEnterCritical+0x5c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	603b      	str	r3, [r7, #0]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <vPortEnterCritical+0x4a>
	}
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	2000000c 	.word	0x2000000c
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060ea:	4b12      	ldr	r3, [pc, #72]	; (8006134 <vPortExitCritical+0x50>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <vPortExitCritical+0x24>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	607b      	str	r3, [r7, #4]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <vPortExitCritical+0x50>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3b01      	subs	r3, #1
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <vPortExitCritical+0x50>)
 8006110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <vPortExitCritical+0x50>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d105      	bne.n	8006126 <vPortExitCritical+0x42>
 800611a:	2300      	movs	r3, #0
 800611c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f383 8811 	msr	BASEPRI, r3
}
 8006124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	2000000c 	.word	0x2000000c
	...

08006140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006140:	f3ef 8009 	mrs	r0, PSP
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <pxCurrentTCBConst>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f01e 0f10 	tst.w	lr, #16
 8006150:	bf08      	it	eq
 8006152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	6010      	str	r0, [r2, #0]
 800615c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006164:	f380 8811 	msr	BASEPRI, r0
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f7fe fe4c 	bl	8004e0c <vTaskSwitchContext>
 8006174:	f04f 0000 	mov.w	r0, #0
 8006178:	f380 8811 	msr	BASEPRI, r0
 800617c:	bc09      	pop	{r0, r3}
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006186:	f01e 0f10 	tst.w	lr, #16
 800618a:	bf08      	it	eq
 800618c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006190:	f380 8809 	msr	PSP, r0
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst>:
 80061a0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80061c2:	f001 fe33 	bl	8007e2c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061c6:	f7fe fd5b 	bl	8004c80 <xTaskIncrementTick>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d006      	beq.n	80061de <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80061d0:	f001 fe8a 	bl	8007ee8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061d4:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <xPortSysTickHandler+0x50>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	e001      	b.n	80061e2 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 80061de:	f001 fe67 	bl	8007eb0 <SEGGER_SYSVIEW_RecordExitISR>
 80061e2:	2300      	movs	r3, #0
 80061e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f383 8811 	msr	BASEPRI, r3
}
 80061ec:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <vPortSetupTimerInterrupt+0x34>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <vPortSetupTimerInterrupt+0x38>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <vPortSetupTimerInterrupt+0x3c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	4a0a      	ldr	r2, [pc, #40]	; (800623c <vPortSetupTimerInterrupt+0x40>)
 8006214:	fba2 2303 	umull	r2, r3, r2, r3
 8006218:	09db      	lsrs	r3, r3, #7
 800621a:	4a09      	ldr	r2, [pc, #36]	; (8006240 <vPortSetupTimerInterrupt+0x44>)
 800621c:	3b01      	subs	r3, #1
 800621e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <vPortSetupTimerInterrupt+0x34>)
 8006222:	2207      	movs	r2, #7
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	e000e010 	.word	0xe000e010
 8006234:	e000e018 	.word	0xe000e018
 8006238:	20000000 	.word	0x20000000
 800623c:	0a7c5ac5 	.word	0x0a7c5ac5
 8006240:	e000e014 	.word	0xe000e014

08006244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006254 <vPortEnableVFP+0x10>
 8006248:	6801      	ldr	r1, [r0, #0]
 800624a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800624e:	6001      	str	r1, [r0, #0]
 8006250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006252:	bf00      	nop
 8006254:	e000ed88 	.word	0xe000ed88

08006258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800625e:	f3ef 8305 	mrs	r3, IPSR
 8006262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b0f      	cmp	r3, #15
 8006268:	d914      	bls.n	8006294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800626a:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <vPortValidateInterruptPriority+0x70>)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <vPortValidateInterruptPriority+0x74>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	7afa      	ldrb	r2, [r7, #11]
 800627a:	429a      	cmp	r2, r3
 800627c:	d20a      	bcs.n	8006294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	607b      	str	r3, [r7, #4]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006294:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <vPortValidateInterruptPriority+0x78>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <vPortValidateInterruptPriority+0x7c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d90a      	bls.n	80062ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	603b      	str	r3, [r7, #0]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <vPortValidateInterruptPriority+0x60>
	}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	e000e3f0 	.word	0xe000e3f0
 80062cc:	20000eec 	.word	0x20000eec
 80062d0:	e000ed0c 	.word	0xe000ed0c
 80062d4:	20000ef0 	.word	0x20000ef0

080062d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	; 0x28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062e4:	f7fe fbfa 	bl	8004adc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062e8:	4b5b      	ldr	r3, [pc, #364]	; (8006458 <pvPortMalloc+0x180>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062f0:	f000 f920 	bl	8006534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062f4:	4b59      	ldr	r3, [pc, #356]	; (800645c <pvPortMalloc+0x184>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 8093 	bne.w	8006428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01d      	beq.n	8006344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006308:	2208      	movs	r2, #8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4413      	add	r3, r2
 800630e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	2b00      	cmp	r3, #0
 8006318:	d014      	beq.n	8006344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f023 0307 	bic.w	r3, r3, #7
 8006320:	3308      	adds	r3, #8
 8006322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <pvPortMalloc+0x6c>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	617b      	str	r3, [r7, #20]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d06e      	beq.n	8006428 <pvPortMalloc+0x150>
 800634a:	4b45      	ldr	r3, [pc, #276]	; (8006460 <pvPortMalloc+0x188>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d869      	bhi.n	8006428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006354:	4b43      	ldr	r3, [pc, #268]	; (8006464 <pvPortMalloc+0x18c>)
 8006356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006358:	4b42      	ldr	r3, [pc, #264]	; (8006464 <pvPortMalloc+0x18c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800635e:	e004      	b.n	800636a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d903      	bls.n	800637c <pvPortMalloc+0xa4>
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f1      	bne.n	8006360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800637c:	4b36      	ldr	r3, [pc, #216]	; (8006458 <pvPortMalloc+0x180>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	429a      	cmp	r2, r3
 8006384:	d050      	beq.n	8006428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2208      	movs	r2, #8
 800638c:	4413      	add	r3, r2
 800638e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	1ad2      	subs	r2, r2, r3
 80063a0:	2308      	movs	r3, #8
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d91f      	bls.n	80063e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <pvPortMalloc+0xf8>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	613b      	str	r3, [r7, #16]
}
 80063cc:	bf00      	nop
 80063ce:	e7fe      	b.n	80063ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	1ad2      	subs	r2, r2, r3
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063e2:	69b8      	ldr	r0, [r7, #24]
 80063e4:	f000 f908 	bl	80065f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063e8:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <pvPortMalloc+0x188>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a1b      	ldr	r2, [pc, #108]	; (8006460 <pvPortMalloc+0x188>)
 80063f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <pvPortMalloc+0x188>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <pvPortMalloc+0x190>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d203      	bcs.n	800640a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006402:	4b17      	ldr	r3, [pc, #92]	; (8006460 <pvPortMalloc+0x188>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a18      	ldr	r2, [pc, #96]	; (8006468 <pvPortMalloc+0x190>)
 8006408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	4b13      	ldr	r3, [pc, #76]	; (800645c <pvPortMalloc+0x184>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	431a      	orrs	r2, r3
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800641e:	4b13      	ldr	r3, [pc, #76]	; (800646c <pvPortMalloc+0x194>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	4a11      	ldr	r2, [pc, #68]	; (800646c <pvPortMalloc+0x194>)
 8006426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006428:	f7fe fb66 	bl	8004af8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <pvPortMalloc+0x174>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	60fb      	str	r3, [r7, #12]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <pvPortMalloc+0x172>
	return pvReturn;
 800644c:	69fb      	ldr	r3, [r7, #28]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3728      	adds	r7, #40	; 0x28
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20004afc 	.word	0x20004afc
 800645c:	20004b10 	.word	0x20004b10
 8006460:	20004b00 	.word	0x20004b00
 8006464:	20004af4 	.word	0x20004af4
 8006468:	20004b04 	.word	0x20004b04
 800646c:	20004b08 	.word	0x20004b08

08006470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d04d      	beq.n	800651e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006482:	2308      	movs	r3, #8
 8006484:	425b      	negs	r3, r3
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4413      	add	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	4b24      	ldr	r3, [pc, #144]	; (8006528 <vPortFree+0xb8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <vPortFree+0x44>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <vPortFree+0x62>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60bb      	str	r3, [r7, #8]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	4b14      	ldr	r3, [pc, #80]	; (8006528 <vPortFree+0xb8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01e      	beq.n	800651e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d11a      	bne.n	800651e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <vPortFree+0xb8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	43db      	mvns	r3, r3
 80064f2:	401a      	ands	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064f8:	f7fe faf0 	bl	8004adc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <vPortFree+0xbc>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4413      	add	r3, r2
 8006506:	4a09      	ldr	r2, [pc, #36]	; (800652c <vPortFree+0xbc>)
 8006508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800650a:	6938      	ldr	r0, [r7, #16]
 800650c:	f000 f874 	bl	80065f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <vPortFree+0xc0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	4a06      	ldr	r2, [pc, #24]	; (8006530 <vPortFree+0xc0>)
 8006518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800651a:	f7fe faed 	bl	8004af8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20004b10 	.word	0x20004b10
 800652c:	20004b00 	.word	0x20004b00
 8006530:	20004b0c 	.word	0x20004b0c

08006534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800653a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800653e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006540:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <prvHeapInit+0xac>)
 8006542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00c      	beq.n	8006568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3307      	adds	r3, #7
 8006552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0307 	bic.w	r3, r3, #7
 800655a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <prvHeapInit+0xac>)
 8006564:	4413      	add	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800656c:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <prvHeapInit+0xb0>)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <prvHeapInit+0xb0>)
 8006574:	2200      	movs	r2, #0
 8006576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4413      	add	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006580:	2208      	movs	r2, #8
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <prvHeapInit+0xb4>)
 8006594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <prvHeapInit+0xb4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <prvHeapInit+0xb4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	1ad2      	subs	r2, r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065b4:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <prvHeapInit+0xb4>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <prvHeapInit+0xb8>)
 80065c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <prvHeapInit+0xbc>)
 80065ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <prvHeapInit+0xc0>)
 80065ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000ef4 	.word	0x20000ef4
 80065e4:	20004af4 	.word	0x20004af4
 80065e8:	20004afc 	.word	0x20004afc
 80065ec:	20004b04 	.word	0x20004b04
 80065f0:	20004b00 	.word	0x20004b00
 80065f4:	20004b10 	.word	0x20004b10

080065f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006600:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <prvInsertBlockIntoFreeList+0xac>)
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e002      	b.n	800660c <prvInsertBlockIntoFreeList+0x14>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d8f7      	bhi.n	8006606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4413      	add	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d108      	bne.n	800663a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	441a      	add	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	441a      	add	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d118      	bne.n	8006680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d00d      	beq.n	8006676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e008      	b.n	8006688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	e003      	b.n	8006688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d002      	beq.n	8006696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20004af4 	.word	0x20004af4
 80066a8:	20004afc 	.word	0x20004afc

080066ac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80066b0:	4803      	ldr	r0, [pc, #12]	; (80066c0 <_cbSendSystemDesc+0x14>)
 80066b2:	f001 fb65 	bl	8007d80 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80066b6:	4803      	ldr	r0, [pc, #12]	; (80066c4 <_cbSendSystemDesc+0x18>)
 80066b8:	f001 fb62 	bl	8007d80 <SEGGER_SYSVIEW_SendSysDesc>
}
 80066bc:	bf00      	nop
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	0800b254 	.word	0x0800b254
 80066c4:	0800b288 	.word	0x0800b288

080066c8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <SEGGER_SYSVIEW_Conf+0x24>)
 80066d6:	4a06      	ldr	r2, [pc, #24]	; (80066f0 <SEGGER_SYSVIEW_Conf+0x28>)
 80066d8:	f000 fed0 	bl	800747c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80066dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80066e0:	f000 ff10 	bl	8007504 <SEGGER_SYSVIEW_SetRAMBase>
}
 80066e4:	bf00      	nop
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000000 	.word	0x20000000
 80066ec:	080066ad 	.word	0x080066ad
 80066f0:	0800b31c 	.word	0x0800b31c

080066f4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80066f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	e048      	b.n	8006792 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8006700:	4929      	ldr	r1, [pc, #164]	; (80067a8 <_cbSendTaskList+0xb4>)
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe fdcd 	bl	80052b0 <uxTaskGetStackHighWaterMark>
 8006716:	4601      	mov	r1, r0
 8006718:	4823      	ldr	r0, [pc, #140]	; (80067a8 <_cbSendTaskList+0xb4>)
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4403      	add	r3, r0
 8006726:	3310      	adds	r3, #16
 8006728:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800672a:	491f      	ldr	r1, [pc, #124]	; (80067a8 <_cbSendTaskList+0xb4>)
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	491b      	ldr	r1, [pc, #108]	; (80067a8 <_cbSendTaskList+0xb4>)
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3304      	adds	r3, #4
 800674a:	6819      	ldr	r1, [r3, #0]
 800674c:	4c16      	ldr	r4, [pc, #88]	; (80067a8 <_cbSendTaskList+0xb4>)
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4423      	add	r3, r4
 800675a:	3308      	adds	r3, #8
 800675c:	681c      	ldr	r4, [r3, #0]
 800675e:	4d12      	ldr	r5, [pc, #72]	; (80067a8 <_cbSendTaskList+0xb4>)
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	442b      	add	r3, r5
 800676c:	330c      	adds	r3, #12
 800676e:	681d      	ldr	r5, [r3, #0]
 8006770:	4e0d      	ldr	r6, [pc, #52]	; (80067a8 <_cbSendTaskList+0xb4>)
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4433      	add	r3, r6
 800677e:	3310      	adds	r3, #16
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	462b      	mov	r3, r5
 8006786:	4622      	mov	r2, r4
 8006788:	f000 f8bc 	bl	8006904 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3301      	adds	r3, #1
 8006790:	607b      	str	r3, [r7, #4]
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <_cbSendTaskList+0xb8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d3b1      	bcc.n	8006700 <_cbSendTaskList+0xc>
  }
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20004b14 	.word	0x20004b14
 80067ac:	20004bb4 	.word	0x20004bb4

080067b0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80067b0:	b5b0      	push	{r4, r5, r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80067b6:	f7fe fa51 	bl	8004c5c <xTaskGetTickCountFromISR>
 80067ba:	4603      	mov	r3, r0
 80067bc:	461a      	mov	r2, r3
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= 1000;
 80067d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	f04f 0400 	mov.w	r4, #0
 80067de:	f04f 0500 	mov.w	r5, #0
 80067e2:	015d      	lsls	r5, r3, #5
 80067e4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80067e8:	0154      	lsls	r4, r2, #5
 80067ea:	4622      	mov	r2, r4
 80067ec:	462b      	mov	r3, r5
 80067ee:	1a12      	subs	r2, r2, r0
 80067f0:	eb63 0301 	sbc.w	r3, r3, r1
 80067f4:	f04f 0400 	mov.w	r4, #0
 80067f8:	f04f 0500 	mov.w	r5, #0
 80067fc:	009d      	lsls	r5, r3, #2
 80067fe:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8006802:	0094      	lsls	r4, r2, #2
 8006804:	4622      	mov	r2, r4
 8006806:	462b      	mov	r3, r5
 8006808:	1812      	adds	r2, r2, r0
 800680a:	eb41 0303 	adc.w	r3, r1, r3
 800680e:	f04f 0000 	mov.w	r0, #0
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	00d9      	lsls	r1, r3, #3
 8006818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800681c:	00d0      	lsls	r0, r2, #3
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8006826:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800682a:	4610      	mov	r0, r2
 800682c:	4619      	mov	r1, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bdb0      	pop	{r4, r5, r7, pc}

08006834 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006842:	2205      	movs	r2, #5
 8006844:	492b      	ldr	r1, [pc, #172]	; (80068f4 <SYSVIEW_AddTask+0xc0>)
 8006846:	68b8      	ldr	r0, [r7, #8]
 8006848:	f001 fe30 	bl	80084ac <memcmp>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d04b      	beq.n	80068ea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006852:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <SYSVIEW_AddTask+0xc4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b07      	cmp	r3, #7
 8006858:	d903      	bls.n	8006862 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800685a:	4828      	ldr	r0, [pc, #160]	; (80068fc <SYSVIEW_AddTask+0xc8>)
 800685c:	f001 fd8e 	bl	800837c <SEGGER_SYSVIEW_Warn>
    return;
 8006860:	e044      	b.n	80068ec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006862:	4b25      	ldr	r3, [pc, #148]	; (80068f8 <SYSVIEW_AddTask+0xc4>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4926      	ldr	r1, [pc, #152]	; (8006900 <SYSVIEW_AddTask+0xcc>)
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006876:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <SYSVIEW_AddTask+0xc4>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4921      	ldr	r1, [pc, #132]	; (8006900 <SYSVIEW_AddTask+0xcc>)
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3304      	adds	r3, #4
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800688c:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <SYSVIEW_AddTask+0xc4>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	491b      	ldr	r1, [pc, #108]	; (8006900 <SYSVIEW_AddTask+0xcc>)
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3308      	adds	r3, #8
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <SYSVIEW_AddTask+0xc4>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4916      	ldr	r1, [pc, #88]	; (8006900 <SYSVIEW_AddTask+0xcc>)
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	330c      	adds	r3, #12
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80068b8:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <SYSVIEW_AddTask+0xc4>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4910      	ldr	r1, [pc, #64]	; (8006900 <SYSVIEW_AddTask+0xcc>)
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	3310      	adds	r3, #16
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80068ce:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <SYSVIEW_AddTask+0xc4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <SYSVIEW_AddTask+0xc4>)
 80068d6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f80e 	bl	8006904 <SYSVIEW_SendTaskInfo>
 80068e8:	e000      	b.n	80068ec <SYSVIEW_AddTask+0xb8>
    return;
 80068ea:	bf00      	nop

}
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	0800b298 	.word	0x0800b298
 80068f8:	20004bb4 	.word	0x20004bb4
 80068fc:	0800b2a0 	.word	0x0800b2a0
 8006900:	20004b14 	.word	0x20004b14

08006904 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006912:	f107 0314 	add.w	r3, r7, #20
 8006916:	2214      	movs	r2, #20
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f001 fde2 	bl	80084e4 <memset>
  TaskInfo.TaskID     = TaskID;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006934:	f107 0314 	add.w	r3, r7, #20
 8006938:	4618      	mov	r0, r3
 800693a:	f001 f929 	bl	8007b90 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800693e:	bf00      	nop
 8006940:	3728      	adds	r7, #40	; 0x28
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800694e:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <_DoInit+0xa0>)
 8006950:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8006952:	22a8      	movs	r2, #168	; 0xa8
 8006954:	2100      	movs	r1, #0
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f001 fdc4 	bl	80084e4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2203      	movs	r2, #3
 8006960:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2203      	movs	r2, #3
 8006966:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	4a20      	ldr	r2, [pc, #128]	; (80069ec <_DoInit+0xa4>)
 800696c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <_DoInit+0xa8>)
 8006972:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800697a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2200      	movs	r2, #0
 8006980:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2200      	movs	r2, #0
 8006986:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	4a16      	ldr	r2, [pc, #88]	; (80069ec <_DoInit+0xa4>)
 8006992:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <_DoInit+0xac>)
 8006998:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2210      	movs	r2, #16
 800699e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2200      	movs	r2, #0
 80069aa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80069b2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	e00c      	b.n	80069d6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f1c3 030f 	rsb	r3, r3, #15
 80069c2:	4a0d      	ldr	r2, [pc, #52]	; (80069f8 <_DoInit+0xb0>)
 80069c4:	5cd1      	ldrb	r1, [r2, r3]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4413      	add	r3, r2
 80069cc:	460a      	mov	r2, r1
 80069ce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3301      	adds	r3, #1
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b0f      	cmp	r3, #15
 80069da:	d9ef      	bls.n	80069bc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80069dc:	f3bf 8f5f 	dmb	sy
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	2000561c 	.word	0x2000561c
 80069ec:	0800b2f0 	.word	0x0800b2f0
 80069f0:	20004bb8 	.word	0x20004bb8
 80069f4:	20004fb8 	.word	0x20004fb8
 80069f8:	0800b324 	.word	0x0800b324

080069fc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d905      	bls.n	8006a2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	e007      	b.n	8006a3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	69b9      	ldr	r1, [r7, #24]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1acb      	subs	r3, r1, r3
 8006a36:	4413      	add	r3, r2
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bf28      	it	cs
 8006a4a:	4613      	movcs	r3, r2
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8006a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4293      	cmp	r3, r2
 8006a54:	bf28      	it	cs
 8006a56:	4613      	movcs	r3, r2
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8006a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f001 fd2d 	bl	80084c8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	4413      	add	r3, r2
 8006a74:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	4413      	add	r3, r2
 8006a7c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	4413      	add	r3, r2
 8006a8c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d101      	bne.n	8006a9c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006a9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1b2      	bne.n	8006a12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3728      	adds	r7, #40	; 0x28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b088      	sub	sp, #32
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d911      	bls.n	8006afe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	6938      	ldr	r0, [r7, #16]
 8006aea:	f001 fced 	bl	80084c8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006aee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	441a      	add	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8006afc:	e01f      	b.n	8006b3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	6938      	ldr	r0, [r7, #16]
 8006b12:	f001 fcd9 	bl	80084c8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	4413      	add	r3, r2
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6938      	ldr	r0, [r7, #16]
 8006b30:	f001 fcca 	bl	80084c8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006b34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	60da      	str	r2, [r3, #12]
}
 8006b3e:	bf00      	nop
 8006b40:	3720      	adds	r7, #32
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d808      	bhi.n	8006b74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	1ad2      	subs	r2, r2, r3
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	e004      	b.n	8006b7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006b7e:	697b      	ldr	r3, [r7, #20]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08c      	sub	sp, #48	; 0x30
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006b98:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <SEGGER_RTT_ReadNoLock+0x108>)
 8006b9a:	623b      	str	r3, [r7, #32]
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <SEGGER_RTT_ReadNoLock+0x1e>
 8006ba6:	f7ff fecf 	bl	8006948 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4613      	mov	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3360      	adds	r3, #96	; 0x60
 8006bb6:	4a37      	ldr	r2, [pc, #220]	; (8006c94 <SEGGER_RTT_ReadNoLock+0x108>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d92b      	bls.n	8006c30 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4293      	cmp	r3, r2
 8006be8:	bf28      	it	cs
 8006bea:	4613      	movcs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	4413      	add	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	6939      	ldr	r1, [r7, #16]
 8006bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bfe:	f001 fc63 	bl	80084c8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4413      	add	r3, r2
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4413      	add	r3, r2
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	4413      	add	r3, r2
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d101      	bne.n	8006c30 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	bf28      	it	cs
 8006c40:	4613      	movcs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d019      	beq.n	8006c7e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	4413      	add	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	6939      	ldr	r1, [r7, #16]
 8006c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c5a:	f001 fc35 	bl	80084c8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4413      	add	r3, r2
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3730      	adds	r7, #48	; 0x30
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	2000561c 	.word	0x2000561c

08006c98 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	4613      	mov	r3, r2
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	4413      	add	r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <SEGGER_RTT_WriteNoLock+0x9c>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d029      	beq.n	8006d16 <SEGGER_RTT_WriteNoLock+0x7e>
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d82e      	bhi.n	8006d24 <SEGGER_RTT_WriteNoLock+0x8c>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <SEGGER_RTT_WriteNoLock+0x38>
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d013      	beq.n	8006cf6 <SEGGER_RTT_WriteNoLock+0x5e>
 8006cce:	e029      	b.n	8006d24 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006cd0:	6978      	ldr	r0, [r7, #20]
 8006cd2:	f7ff ff38 	bl	8006b46 <_GetAvailWriteSpace>
 8006cd6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d202      	bcs.n	8006ce6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006ce4:	e021      	b.n	8006d2a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	6978      	ldr	r0, [r7, #20]
 8006cf0:	f7ff fee1 	bl	8006ab6 <_WriteNoCheck>
    break;
 8006cf4:	e019      	b.n	8006d2a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006cf6:	6978      	ldr	r0, [r7, #20]
 8006cf8:	f7ff ff25 	bl	8006b46 <_GetAvailWriteSpace>
 8006cfc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4293      	cmp	r3, r2
 8006d04:	bf28      	it	cs
 8006d06:	4613      	movcs	r3, r2
 8006d08:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	6978      	ldr	r0, [r7, #20]
 8006d10:	f7ff fed1 	bl	8006ab6 <_WriteNoCheck>
    break;
 8006d14:	e009      	b.n	8006d2a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	69b9      	ldr	r1, [r7, #24]
 8006d1a:	6978      	ldr	r0, [r7, #20]
 8006d1c:	f7ff fe6e 	bl	80069fc <_WriteBlocking>
 8006d20:	61f8      	str	r0, [r7, #28]
    break;
 8006d22:	e002      	b.n	8006d2a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
    break;
 8006d28:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	2000561c 	.word	0x2000561c

08006d38 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006d44:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <SEGGER_RTT_Write+0x48>)
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <SEGGER_RTT_Write+0x1e>
 8006d52:	f7ff fdf9 	bl	8006948 <_DoInit>
  SEGGER_RTT_LOCK();
 8006d56:	f3ef 8311 	mrs	r3, BASEPRI
 8006d5a:	f04f 0120 	mov.w	r1, #32
 8006d5e:	f381 8811 	msr	BASEPRI, r1
 8006d62:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff ff95 	bl	8006c98 <SEGGER_RTT_WriteNoLock>
 8006d6e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006d76:	697b      	ldr	r3, [r7, #20]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	2000561c 	.word	0x2000561c

08006d84 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006d92:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006da0:	f7ff fdd2 	bl	8006948 <_DoInit>
  SEGGER_RTT_LOCK();
 8006da4:	f3ef 8311 	mrs	r3, BASEPRI
 8006da8:	f04f 0120 	mov.w	r1, #32
 8006dac:	f381 8811 	msr	BASEPRI, r1
 8006db0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006db2:	4b35      	ldr	r3, [pc, #212]	; (8006e88 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006db4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006dba:	6939      	ldr	r1, [r7, #16]
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	4413      	add	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	440b      	add	r3, r1
 8006dca:	3304      	adds	r3, #4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	dbeb      	blt.n	8006dba <SEGGER_RTT_AllocUpBuffer+0x36>
 8006de2:	e000      	b.n	8006de6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006de4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	da3f      	bge.n	8006e70 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006df0:	6939      	ldr	r1, [r7, #16]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	440b      	add	r3, r1
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006e04:	6939      	ldr	r1, [r7, #16]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	440b      	add	r3, r1
 8006e14:	3304      	adds	r3, #4
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006e1a:	6939      	ldr	r1, [r7, #16]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	4413      	add	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	440b      	add	r3, r1
 8006e28:	3320      	adds	r3, #32
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006e2e:	6939      	ldr	r1, [r7, #16]
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	4613      	mov	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3328      	adds	r3, #40	; 0x28
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006e42:	6939      	ldr	r1, [r7, #16]
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	4613      	mov	r3, r2
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	4413      	add	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	440b      	add	r3, r1
 8006e50:	3324      	adds	r3, #36	; 0x24
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006e56:	6939      	ldr	r1, [r7, #16]
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4413      	add	r3, r2
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	440b      	add	r3, r1
 8006e64:	332c      	adds	r3, #44	; 0x2c
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006e6a:	f3bf 8f5f 	dmb	sy
 8006e6e:	e002      	b.n	8006e76 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006e7c:	69fb      	ldr	r3, [r7, #28]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	2000561c 	.word	0x2000561c

08006e8c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	; 0x28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006e9a:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006ea8:	f7ff fd4e 	bl	8006948 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006eac:	4b1c      	ldr	r3, [pc, #112]	; (8006f20 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006eae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d82c      	bhi.n	8006f10 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eba:	f04f 0120 	mov.w	r1, #32
 8006ebe:	f381 8811 	msr	BASEPRI, r1
 8006ec2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	4413      	add	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	3360      	adds	r3, #96	; 0x60
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00e      	beq.n	8006efa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006f00:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	e002      	b.n	8006f16 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3728      	adds	r7, #40	; 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	2000561c 	.word	0x2000561c

08006f24 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00f      	beq.n	8006f5a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8006f3a:	e002      	b.n	8006f42 <_EncodeStr+0x1e>
      Len++;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4413      	add	r3, r2
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f6      	bne.n	8006f3c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d901      	bls.n	8006f5a <_EncodeStr+0x36>
      Len = Limit;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2bfe      	cmp	r3, #254	; 0xfe
 8006f5e:	d806      	bhi.n	8006f6e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	60fa      	str	r2, [r7, #12]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	701a      	strb	r2, [r3, #0]
 8006f6c:	e011      	b.n	8006f92 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	60fa      	str	r2, [r7, #12]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	60fa      	str	r2, [r7, #12]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	0a19      	lsrs	r1, r3, #8
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	60fa      	str	r2, [r7, #12]
 8006f8e:	b2ca      	uxtb	r2, r1
 8006f90:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006f96:	e00a      	b.n	8006fae <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	1c53      	adds	r3, r2, #1
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1c59      	adds	r1, r3, #1
 8006fa2:	60f9      	str	r1, [r7, #12]
 8006fa4:	7812      	ldrb	r2, [r2, #0]
 8006fa6:	701a      	strb	r2, [r3, #0]
    n++;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3301      	adds	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d3f0      	bcc.n	8006f98 <_EncodeStr+0x74>
  }
  return pPayload;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3307      	adds	r3, #7
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006fe2:	4b35      	ldr	r3, [pc, #212]	; (80070b8 <_HandleIncomingPacket+0xdc>)
 8006fe4:	7e1b      	ldrb	r3, [r3, #24]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	1cfb      	adds	r3, r7, #3
 8006fea:	2201      	movs	r2, #1
 8006fec:	4619      	mov	r1, r3
 8006fee:	f7ff fdcd 	bl	8006b8c <SEGGER_RTT_ReadNoLock>
 8006ff2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d052      	beq.n	80070a0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	2b80      	cmp	r3, #128	; 0x80
 8006ffe:	d031      	beq.n	8007064 <_HandleIncomingPacket+0x88>
 8007000:	2b80      	cmp	r3, #128	; 0x80
 8007002:	dc40      	bgt.n	8007086 <_HandleIncomingPacket+0xaa>
 8007004:	2b07      	cmp	r3, #7
 8007006:	dc15      	bgt.n	8007034 <_HandleIncomingPacket+0x58>
 8007008:	2b00      	cmp	r3, #0
 800700a:	dd3c      	ble.n	8007086 <_HandleIncomingPacket+0xaa>
 800700c:	3b01      	subs	r3, #1
 800700e:	2b06      	cmp	r3, #6
 8007010:	d839      	bhi.n	8007086 <_HandleIncomingPacket+0xaa>
 8007012:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <_HandleIncomingPacket+0x3c>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	0800703b 	.word	0x0800703b
 800701c:	08007041 	.word	0x08007041
 8007020:	08007047 	.word	0x08007047
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007053 	.word	0x08007053
 800702c:	08007059 	.word	0x08007059
 8007030:	0800705f 	.word	0x0800705f
 8007034:	2b7f      	cmp	r3, #127	; 0x7f
 8007036:	d035      	beq.n	80070a4 <_HandleIncomingPacket+0xc8>
 8007038:	e025      	b.n	8007086 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800703a:	f000 fc2f 	bl	800789c <SEGGER_SYSVIEW_Start>
      break;
 800703e:	e036      	b.n	80070ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007040:	f000 fce6 	bl	8007a10 <SEGGER_SYSVIEW_Stop>
      break;
 8007044:	e033      	b.n	80070ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007046:	f000 febf 	bl	8007dc8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800704a:	e030      	b.n	80070ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800704c:	f000 fe84 	bl	8007d58 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007050:	e02d      	b.n	80070ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007052:	f000 fd03 	bl	8007a5c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007056:	e02a      	b.n	80070ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007058:	f001 f952 	bl	8008300 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800705c:	e027      	b.n	80070ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800705e:	f001 f931 	bl	80082c4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007062:	e024      	b.n	80070ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007064:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <_HandleIncomingPacket+0xdc>)
 8007066:	7e1b      	ldrb	r3, [r3, #24]
 8007068:	4618      	mov	r0, r3
 800706a:	1cfb      	adds	r3, r7, #3
 800706c:	2201      	movs	r2, #1
 800706e:	4619      	mov	r1, r3
 8007070:	f7ff fd8c 	bl	8006b8c <SEGGER_RTT_ReadNoLock>
 8007074:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d015      	beq.n	80070a8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f8a0 	bl	80081c4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007084:	e010      	b.n	80070a8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	b25b      	sxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	da0e      	bge.n	80070ac <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <_HandleIncomingPacket+0xdc>)
 8007090:	7e1b      	ldrb	r3, [r3, #24]
 8007092:	4618      	mov	r0, r3
 8007094:	1cfb      	adds	r3, r7, #3
 8007096:	2201      	movs	r2, #1
 8007098:	4619      	mov	r1, r3
 800709a:	f7ff fd77 	bl	8006b8c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800709e:	e005      	b.n	80070ac <_HandleIncomingPacket+0xd0>
    }
  }
 80070a0:	bf00      	nop
 80070a2:	e004      	b.n	80070ae <_HandleIncomingPacket+0xd2>
      break;
 80070a4:	bf00      	nop
 80070a6:	e002      	b.n	80070ae <_HandleIncomingPacket+0xd2>
      break;
 80070a8:	bf00      	nop
 80070aa:	e000      	b.n	80070ae <_HandleIncomingPacket+0xd2>
      break;
 80070ac:	bf00      	nop
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	200053d0 	.word	0x200053d0

080070bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08c      	sub	sp, #48	; 0x30
 80070c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80070c2:	2301      	movs	r3, #1
 80070c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80070c6:	1d3b      	adds	r3, r7, #4
 80070c8:	3301      	adds	r3, #1
 80070ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070d0:	4b31      	ldr	r3, [pc, #196]	; (8007198 <_TrySendOverflowPacket+0xdc>)
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d6:	e00b      	b.n	80070f0 <_TrySendOverflowPacket+0x34>
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	1c59      	adds	r1, r3, #1
 80070e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80070e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	09db      	lsrs	r3, r3, #7
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	2b7f      	cmp	r3, #127	; 0x7f
 80070f4:	d8f0      	bhi.n	80070d8 <_TrySendOverflowPacket+0x1c>
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007106:	4b25      	ldr	r3, [pc, #148]	; (800719c <_TrySendOverflowPacket+0xe0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800710c:	4b22      	ldr	r3, [pc, #136]	; (8007198 <_TrySendOverflowPacket+0xdc>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	623b      	str	r3, [r7, #32]
 800711e:	e00b      	b.n	8007138 <_TrySendOverflowPacket+0x7c>
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	b2da      	uxtb	r2, r3
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	1c59      	adds	r1, r3, #1
 8007128:	6279      	str	r1, [r7, #36]	; 0x24
 800712a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	09db      	lsrs	r3, r3, #7
 8007136:	623b      	str	r3, [r7, #32]
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	2b7f      	cmp	r3, #127	; 0x7f
 800713c:	d8f0      	bhi.n	8007120 <_TrySendOverflowPacket+0x64>
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	627a      	str	r2, [r7, #36]	; 0x24
 8007144:	6a3a      	ldr	r2, [r7, #32]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <_TrySendOverflowPacket+0xdc>)
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	4618      	mov	r0, r3
 8007154:	1d3b      	adds	r3, r7, #4
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	461a      	mov	r2, r3
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	4619      	mov	r1, r3
 8007160:	f7f9 f83e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007164:	4603      	mov	r3, r0
 8007166:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800716e:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <_TrySendOverflowPacket+0xdc>)
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007174:	4b08      	ldr	r3, [pc, #32]	; (8007198 <_TrySendOverflowPacket+0xdc>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	3b01      	subs	r3, #1
 800717a:	b2da      	uxtb	r2, r3
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <_TrySendOverflowPacket+0xdc>)
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	e004      	b.n	800718c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007182:	4b05      	ldr	r3, [pc, #20]	; (8007198 <_TrySendOverflowPacket+0xdc>)
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	3301      	adds	r3, #1
 8007188:	4a03      	ldr	r2, [pc, #12]	; (8007198 <_TrySendOverflowPacket+0xdc>)
 800718a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800718c:	693b      	ldr	r3, [r7, #16]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3730      	adds	r7, #48	; 0x30
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	200053d0 	.word	0x200053d0
 800719c:	e0001004 	.word	0xe0001004

080071a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80071ac:	4b9a      	ldr	r3, [pc, #616]	; (8007418 <_SendPacket+0x278>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d010      	beq.n	80071d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80071b4:	4b98      	ldr	r3, [pc, #608]	; (8007418 <_SendPacket+0x278>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8129 	beq.w	8007410 <_SendPacket+0x270>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80071be:	4b96      	ldr	r3, [pc, #600]	; (8007418 <_SendPacket+0x278>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d109      	bne.n	80071da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80071c6:	f7ff ff79 	bl	80070bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80071ca:	4b93      	ldr	r3, [pc, #588]	; (8007418 <_SendPacket+0x278>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	f040 8120 	bne.w	8007414 <_SendPacket+0x274>
      goto SendDone;
    }
  }
Send:
 80071d4:	e001      	b.n	80071da <_SendPacket+0x3a>
    goto Send;
 80071d6:	bf00      	nop
 80071d8:	e000      	b.n	80071dc <_SendPacket+0x3c>
Send:
 80071da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b1f      	cmp	r3, #31
 80071e0:	d809      	bhi.n	80071f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80071e2:	4b8d      	ldr	r3, [pc, #564]	; (8007418 <_SendPacket+0x278>)
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f040 8115 	bne.w	8007420 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b17      	cmp	r3, #23
 80071fa:	d807      	bhi.n	800720c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3b01      	subs	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e0c4      	b.n	8007396 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	2b7f      	cmp	r3, #127	; 0x7f
 8007218:	d912      	bls.n	8007240 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	09da      	lsrs	r2, r3, #7
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3b01      	subs	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	3a01      	subs	r2, #1
 8007232:	60fa      	str	r2, [r7, #12]
 8007234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e006      	b.n	800724e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3b01      	subs	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b7e      	cmp	r3, #126	; 0x7e
 8007252:	d807      	bhi.n	8007264 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3b01      	subs	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	b2da      	uxtb	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	e098      	b.n	8007396 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800726a:	d212      	bcs.n	8007292 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	09da      	lsrs	r2, r3, #7
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3b01      	subs	r3, #1
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	3a01      	subs	r2, #1
 8007284:	60fa      	str	r2, [r7, #12]
 8007286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800728a:	b2da      	uxtb	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	e081      	b.n	8007396 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007298:	d21d      	bcs.n	80072d6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0b9a      	lsrs	r2, r3, #14
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	09db      	lsrs	r3, r3, #7
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	3a01      	subs	r2, #1
 80072b4:	60fa      	str	r2, [r7, #12]
 80072b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	3a01      	subs	r2, #1
 80072c8:	60fa      	str	r2, [r7, #12]
 80072ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e05f      	b.n	8007396 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072dc:	d228      	bcs.n	8007330 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	0d5a      	lsrs	r2, r3, #21
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	0b9b      	lsrs	r3, r3, #14
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	3a01      	subs	r2, #1
 80072f8:	60fa      	str	r2, [r7, #12]
 80072fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	09db      	lsrs	r3, r3, #7
 8007308:	b2db      	uxtb	r3, r3
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	3a01      	subs	r2, #1
 800730e:	60fa      	str	r2, [r7, #12]
 8007310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007314:	b2da      	uxtb	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	3a01      	subs	r2, #1
 8007322:	60fa      	str	r2, [r7, #12]
 8007324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007328:	b2da      	uxtb	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e032      	b.n	8007396 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	0f1a      	lsrs	r2, r3, #28
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3b01      	subs	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	0d5b      	lsrs	r3, r3, #21
 8007344:	b2db      	uxtb	r3, r3
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	3a01      	subs	r2, #1
 800734a:	60fa      	str	r2, [r7, #12]
 800734c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007350:	b2da      	uxtb	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	0b9b      	lsrs	r3, r3, #14
 800735a:	b2db      	uxtb	r3, r3
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	3a01      	subs	r2, #1
 8007360:	60fa      	str	r2, [r7, #12]
 8007362:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007366:	b2da      	uxtb	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	09db      	lsrs	r3, r3, #7
 8007370:	b2db      	uxtb	r3, r3
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	3a01      	subs	r2, #1
 8007376:	60fa      	str	r2, [r7, #12]
 8007378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800737c:	b2da      	uxtb	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	3a01      	subs	r2, #1
 800738a:	60fa      	str	r2, [r7, #12]
 800738c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007390:	b2da      	uxtb	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007396:	4b21      	ldr	r3, [pc, #132]	; (800741c <_SendPacket+0x27c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800739c:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <_SendPacket+0x278>)
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	623b      	str	r3, [r7, #32]
 80073ae:	e00b      	b.n	80073c8 <_SendPacket+0x228>
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	1c59      	adds	r1, r3, #1
 80073b8:	6279      	str	r1, [r7, #36]	; 0x24
 80073ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	09db      	lsrs	r3, r3, #7
 80073c6:	623b      	str	r3, [r7, #32]
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	2b7f      	cmp	r3, #127	; 0x7f
 80073cc:	d8f0      	bhi.n	80073b0 <_SendPacket+0x210>
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	627a      	str	r2, [r7, #36]	; 0x24
 80073d4:	6a3a      	ldr	r2, [r7, #32]
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80073de:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <_SendPacket+0x278>)
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	4618      	mov	r0, r3
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	f7f8 fef7 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80073f2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80073fa:	4a07      	ldr	r2, [pc, #28]	; (8007418 <_SendPacket+0x278>)
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	60d3      	str	r3, [r2, #12]
 8007400:	e00f      	b.n	8007422 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <_SendPacket+0x278>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	3301      	adds	r3, #1
 8007408:	b2da      	uxtb	r2, r3
 800740a:	4b03      	ldr	r3, [pc, #12]	; (8007418 <_SendPacket+0x278>)
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e008      	b.n	8007422 <_SendPacket+0x282>
    goto SendDone;
 8007410:	bf00      	nop
 8007412:	e006      	b.n	8007422 <_SendPacket+0x282>
      goto SendDone;
 8007414:	bf00      	nop
 8007416:	e004      	b.n	8007422 <_SendPacket+0x282>
 8007418:	200053d0 	.word	0x200053d0
 800741c:	e0001004 	.word	0xe0001004
      goto SendDone;
 8007420:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007422:	4b14      	ldr	r3, [pc, #80]	; (8007474 <_SendPacket+0x2d4>)
 8007424:	7e1b      	ldrb	r3, [r3, #24]
 8007426:	4619      	mov	r1, r3
 8007428:	4a13      	ldr	r2, [pc, #76]	; (8007478 <_SendPacket+0x2d8>)
 800742a:	460b      	mov	r3, r1
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	440b      	add	r3, r1
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	4413      	add	r3, r2
 8007434:	336c      	adds	r3, #108	; 0x6c
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4b0e      	ldr	r3, [pc, #56]	; (8007474 <_SendPacket+0x2d4>)
 800743a:	7e1b      	ldrb	r3, [r3, #24]
 800743c:	4618      	mov	r0, r3
 800743e:	490e      	ldr	r1, [pc, #56]	; (8007478 <_SendPacket+0x2d8>)
 8007440:	4603      	mov	r3, r0
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	4403      	add	r3, r0
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	440b      	add	r3, r1
 800744a:	3370      	adds	r3, #112	; 0x70
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	429a      	cmp	r2, r3
 8007450:	d00b      	beq.n	800746a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <_SendPacket+0x2d4>)
 8007454:	789b      	ldrb	r3, [r3, #2]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d107      	bne.n	800746a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800745a:	4b06      	ldr	r3, [pc, #24]	; (8007474 <_SendPacket+0x2d4>)
 800745c:	2201      	movs	r2, #1
 800745e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007460:	f7ff fdbc 	bl	8006fdc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007464:	4b03      	ldr	r3, [pc, #12]	; (8007474 <_SendPacket+0x2d4>)
 8007466:	2200      	movs	r2, #0
 8007468:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800746a:	bf00      	nop
 800746c:	3728      	adds	r7, #40	; 0x28
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	200053d0 	.word	0x200053d0
 8007478:	2000561c 	.word	0x2000561c

0800747c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af02      	add	r7, sp, #8
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800748a:	2300      	movs	r3, #0
 800748c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007490:	4917      	ldr	r1, [pc, #92]	; (80074f0 <SEGGER_SYSVIEW_Init+0x74>)
 8007492:	4818      	ldr	r0, [pc, #96]	; (80074f4 <SEGGER_SYSVIEW_Init+0x78>)
 8007494:	f7ff fc76 	bl	8006d84 <SEGGER_RTT_AllocUpBuffer>
 8007498:	4603      	mov	r3, r0
 800749a:	b2da      	uxtb	r2, r3
 800749c:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800749e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80074a0:	4b15      	ldr	r3, [pc, #84]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074a2:	785a      	ldrb	r2, [r3, #1]
 80074a4:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80074a8:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074aa:	7e1b      	ldrb	r3, [r3, #24]
 80074ac:	4618      	mov	r0, r3
 80074ae:	2300      	movs	r3, #0
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	2308      	movs	r3, #8
 80074b4:	4a11      	ldr	r2, [pc, #68]	; (80074fc <SEGGER_SYSVIEW_Init+0x80>)
 80074b6:	490f      	ldr	r1, [pc, #60]	; (80074f4 <SEGGER_SYSVIEW_Init+0x78>)
 80074b8:	f7ff fce8 	bl	8006e8c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80074bc:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074be:	2200      	movs	r2, #0
 80074c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <SEGGER_SYSVIEW_Init+0x84>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a0c      	ldr	r2, [pc, #48]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80074ca:	4a0b      	ldr	r2, [pc, #44]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80074d0:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80074d6:	4a08      	ldr	r2, [pc, #32]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80074dc:	4a06      	ldr	r2, [pc, #24]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80074e2:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80074e8:	bf00      	nop
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20004fc8 	.word	0x20004fc8
 80074f4:	0800b2fc 	.word	0x0800b2fc
 80074f8:	200053d0 	.word	0x200053d0
 80074fc:	200053c8 	.word	0x200053c8
 8007500:	e0001004 	.word	0xe0001004

08007504 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800750c:	4a04      	ldr	r2, [pc, #16]	; (8007520 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6113      	str	r3, [r2, #16]
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	200053d0 	.word	0x200053d0

08007524 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800752c:	f3ef 8311 	mrs	r3, BASEPRI
 8007530:	f04f 0120 	mov.w	r1, #32
 8007534:	f381 8811 	msr	BASEPRI, r1
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	4808      	ldr	r0, [pc, #32]	; (800755c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800753c:	f7ff fd42 	bl	8006fc4 <_PreparePacket>
 8007540:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	68b8      	ldr	r0, [r7, #8]
 8007548:	f7ff fe2a 	bl	80071a0 <_SendPacket>
  RECORD_END();
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f383 8811 	msr	BASEPRI, r3
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20005400 	.word	0x20005400

08007560 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800756a:	f3ef 8311 	mrs	r3, BASEPRI
 800756e:	f04f 0120 	mov.w	r1, #32
 8007572:	f381 8811 	msr	BASEPRI, r1
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	4816      	ldr	r0, [pc, #88]	; (80075d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800757a:	f7ff fd23 	bl	8006fc4 <_PreparePacket>
 800757e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	e00b      	b.n	80075a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	1c59      	adds	r1, r3, #1
 8007596:	61f9      	str	r1, [r7, #28]
 8007598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	09db      	lsrs	r3, r3, #7
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b7f      	cmp	r3, #127	; 0x7f
 80075aa:	d8f0      	bhi.n	800758e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	61fa      	str	r2, [r7, #28]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	6938      	ldr	r0, [r7, #16]
 80075c2:	f7ff fded 	bl	80071a0 <_SendPacket>
  RECORD_END();
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f383 8811 	msr	BASEPRI, r3
}
 80075cc:	bf00      	nop
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20005400 	.word	0x20005400

080075d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08c      	sub	sp, #48	; 0x30
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80075e4:	f3ef 8311 	mrs	r3, BASEPRI
 80075e8:	f04f 0120 	mov.w	r1, #32
 80075ec:	f381 8811 	msr	BASEPRI, r1
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	4825      	ldr	r0, [pc, #148]	; (8007688 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80075f4:	f7ff fce6 	bl	8006fc4 <_PreparePacket>
 80075f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	62bb      	str	r3, [r7, #40]	; 0x28
 8007606:	e00b      	b.n	8007620 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	b2da      	uxtb	r2, r3
 800760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760e:	1c59      	adds	r1, r3, #1
 8007610:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	09db      	lsrs	r3, r3, #7
 800761e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	2b7f      	cmp	r3, #127	; 0x7f
 8007624:	d8f0      	bhi.n	8007608 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800762c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	623b      	str	r3, [r7, #32]
 800763e:	e00b      	b.n	8007658 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	1c59      	adds	r1, r3, #1
 8007648:	6279      	str	r1, [r7, #36]	; 0x24
 800764a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	09db      	lsrs	r3, r3, #7
 8007656:	623b      	str	r3, [r7, #32]
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	2b7f      	cmp	r3, #127	; 0x7f
 800765c:	d8f0      	bhi.n	8007640 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	627a      	str	r2, [r7, #36]	; 0x24
 8007664:	6a3a      	ldr	r2, [r7, #32]
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	69b8      	ldr	r0, [r7, #24]
 8007674:	f7ff fd94 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f383 8811 	msr	BASEPRI, r3
}
 800767e:	bf00      	nop
 8007680:	3730      	adds	r7, #48	; 0x30
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20005400 	.word	0x20005400

0800768c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800768c:	b580      	push	{r7, lr}
 800768e:	b08e      	sub	sp, #56	; 0x38
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800769a:	f3ef 8311 	mrs	r3, BASEPRI
 800769e:	f04f 0120 	mov.w	r1, #32
 80076a2:	f381 8811 	msr	BASEPRI, r1
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	4832      	ldr	r0, [pc, #200]	; (8007774 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80076aa:	f7ff fc8b 	bl	8006fc4 <_PreparePacket>
 80076ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	637b      	str	r3, [r7, #52]	; 0x34
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	633b      	str	r3, [r7, #48]	; 0x30
 80076bc:	e00b      	b.n	80076d6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c4:	1c59      	adds	r1, r3, #1
 80076c6:	6379      	str	r1, [r7, #52]	; 0x34
 80076c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	09db      	lsrs	r3, r3, #7
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	2b7f      	cmp	r3, #127	; 0x7f
 80076da:	d8f0      	bhi.n	80076be <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	637a      	str	r2, [r7, #52]	; 0x34
 80076e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f4:	e00b      	b.n	800770e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	1c59      	adds	r1, r3, #1
 80076fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	09db      	lsrs	r3, r3, #7
 800770c:	62bb      	str	r3, [r7, #40]	; 0x28
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	2b7f      	cmp	r3, #127	; 0x7f
 8007712:	d8f0      	bhi.n	80076f6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	62fa      	str	r2, [r7, #44]	; 0x2c
 800771a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	623b      	str	r3, [r7, #32]
 800772c:	e00b      	b.n	8007746 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	b2da      	uxtb	r2, r3
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	1c59      	adds	r1, r3, #1
 8007736:	6279      	str	r1, [r7, #36]	; 0x24
 8007738:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	09db      	lsrs	r3, r3, #7
 8007744:	623b      	str	r3, [r7, #32]
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	2b7f      	cmp	r3, #127	; 0x7f
 800774a:	d8f0      	bhi.n	800772e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	627a      	str	r2, [r7, #36]	; 0x24
 8007752:	6a3a      	ldr	r2, [r7, #32]
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	6979      	ldr	r1, [r7, #20]
 8007760:	69b8      	ldr	r0, [r7, #24]
 8007762:	f7ff fd1d 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f383 8811 	msr	BASEPRI, r3
}
 800776c:	bf00      	nop
 800776e:	3738      	adds	r7, #56	; 0x38
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20005400 	.word	0x20005400

08007778 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b090      	sub	sp, #64	; 0x40
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007786:	f3ef 8311 	mrs	r3, BASEPRI
 800778a:	f04f 0120 	mov.w	r1, #32
 800778e:	f381 8811 	msr	BASEPRI, r1
 8007792:	61fb      	str	r3, [r7, #28]
 8007794:	4840      	ldr	r0, [pc, #256]	; (8007898 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007796:	f7ff fc15 	bl	8006fc4 <_PreparePacket>
 800779a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80077a8:	e00b      	b.n	80077c2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b0:	1c59      	adds	r1, r3, #1
 80077b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80077b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	09db      	lsrs	r3, r3, #7
 80077c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	2b7f      	cmp	r3, #127	; 0x7f
 80077c6:	d8f0      	bhi.n	80077aa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80077c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80077ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	637b      	str	r3, [r7, #52]	; 0x34
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	633b      	str	r3, [r7, #48]	; 0x30
 80077e0:	e00b      	b.n	80077fa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e8:	1c59      	adds	r1, r3, #1
 80077ea:	6379      	str	r1, [r7, #52]	; 0x34
 80077ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	09db      	lsrs	r3, r3, #7
 80077f8:	633b      	str	r3, [r7, #48]	; 0x30
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	2b7f      	cmp	r3, #127	; 0x7f
 80077fe:	d8f0      	bhi.n	80077e2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	637a      	str	r2, [r7, #52]	; 0x34
 8007806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
 8007818:	e00b      	b.n	8007832 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	b2da      	uxtb	r2, r3
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	1c59      	adds	r1, r3, #1
 8007822:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007824:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	09db      	lsrs	r3, r3, #7
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	2b7f      	cmp	r3, #127	; 0x7f
 8007836:	d8f0      	bhi.n	800781a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800783e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007846:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784e:	623b      	str	r3, [r7, #32]
 8007850:	e00b      	b.n	800786a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	b2da      	uxtb	r2, r3
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	1c59      	adds	r1, r3, #1
 800785a:	6279      	str	r1, [r7, #36]	; 0x24
 800785c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	09db      	lsrs	r3, r3, #7
 8007868:	623b      	str	r3, [r7, #32]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	2b7f      	cmp	r3, #127	; 0x7f
 800786e:	d8f0      	bhi.n	8007852 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	627a      	str	r2, [r7, #36]	; 0x24
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	6979      	ldr	r1, [r7, #20]
 8007884:	69b8      	ldr	r0, [r7, #24]
 8007886:	f7ff fc8b 	bl	80071a0 <_SendPacket>
  RECORD_END();
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	f383 8811 	msr	BASEPRI, r3
}
 8007890:	bf00      	nop
 8007892:	3740      	adds	r7, #64	; 0x40
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20005400 	.word	0x20005400

0800789c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800789c:	b580      	push	{r7, lr}
 800789e:	b08c      	sub	sp, #48	; 0x30
 80078a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80078a2:	4b58      	ldr	r3, [pc, #352]	; (8007a04 <SEGGER_SYSVIEW_Start+0x168>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80078a8:	f3ef 8311 	mrs	r3, BASEPRI
 80078ac:	f04f 0120 	mov.w	r1, #32
 80078b0:	f381 8811 	msr	BASEPRI, r1
 80078b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80078b6:	4b53      	ldr	r3, [pc, #332]	; (8007a04 <SEGGER_SYSVIEW_Start+0x168>)
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	220a      	movs	r2, #10
 80078bc:	4952      	ldr	r1, [pc, #328]	; (8007a08 <SEGGER_SYSVIEW_Start+0x16c>)
 80078be:	4618      	mov	r0, r3
 80078c0:	f7f8 fc8e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80078ca:	200a      	movs	r0, #10
 80078cc:	f7ff fe2a 	bl	8007524 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80078d0:	f3ef 8311 	mrs	r3, BASEPRI
 80078d4:	f04f 0120 	mov.w	r1, #32
 80078d8:	f381 8811 	msr	BASEPRI, r1
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	484b      	ldr	r0, [pc, #300]	; (8007a0c <SEGGER_SYSVIEW_Start+0x170>)
 80078e0:	f7ff fb70 	bl	8006fc4 <_PreparePacket>
 80078e4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ee:	4b45      	ldr	r3, [pc, #276]	; (8007a04 <SEGGER_SYSVIEW_Start+0x168>)
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f4:	e00b      	b.n	800790e <SEGGER_SYSVIEW_Start+0x72>
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	1c59      	adds	r1, r3, #1
 80078fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	09db      	lsrs	r3, r3, #7
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	2b7f      	cmp	r3, #127	; 0x7f
 8007912:	d8f0      	bhi.n	80078f6 <SEGGER_SYSVIEW_Start+0x5a>
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800791a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007922:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
 8007928:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <SEGGER_SYSVIEW_Start+0x168>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	623b      	str	r3, [r7, #32]
 800792e:	e00b      	b.n	8007948 <SEGGER_SYSVIEW_Start+0xac>
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	6279      	str	r1, [r7, #36]	; 0x24
 800793a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	09db      	lsrs	r3, r3, #7
 8007946:	623b      	str	r3, [r7, #32]
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	2b7f      	cmp	r3, #127	; 0x7f
 800794c:	d8f0      	bhi.n	8007930 <SEGGER_SYSVIEW_Start+0x94>
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	627a      	str	r2, [r7, #36]	; 0x24
 8007954:	6a3a      	ldr	r2, [r7, #32]
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	4b28      	ldr	r3, [pc, #160]	; (8007a04 <SEGGER_SYSVIEW_Start+0x168>)
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	61bb      	str	r3, [r7, #24]
 8007968:	e00b      	b.n	8007982 <SEGGER_SYSVIEW_Start+0xe6>
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	b2da      	uxtb	r2, r3
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	1c59      	adds	r1, r3, #1
 8007972:	61f9      	str	r1, [r7, #28]
 8007974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	09db      	lsrs	r3, r3, #7
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b7f      	cmp	r3, #127	; 0x7f
 8007986:	d8f0      	bhi.n	800796a <SEGGER_SYSVIEW_Start+0xce>
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	61fa      	str	r2, [r7, #28]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	e00b      	b.n	80079ba <SEGGER_SYSVIEW_Start+0x11e>
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	1c59      	adds	r1, r3, #1
 80079aa:	6179      	str	r1, [r7, #20]
 80079ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079b0:	b2d2      	uxtb	r2, r2
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	09db      	lsrs	r3, r3, #7
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b7f      	cmp	r3, #127	; 0x7f
 80079be:	d8f0      	bhi.n	80079a2 <SEGGER_SYSVIEW_Start+0x106>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	617a      	str	r2, [r7, #20]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80079d0:	2218      	movs	r2, #24
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff fbe3 	bl	80071a0 <_SendPacket>
      RECORD_END();
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80079e0:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <SEGGER_SYSVIEW_Start+0x168>)
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80079e8:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <SEGGER_SYSVIEW_Start+0x168>)
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80079ee:	f000 f9eb 	bl	8007dc8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80079f2:	f000 f9b1 	bl	8007d58 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80079f6:	f000 fc83 	bl	8008300 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80079fa:	bf00      	nop
 80079fc:	3730      	adds	r7, #48	; 0x30
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200053d0 	.word	0x200053d0
 8007a08:	0800b338 	.word	0x0800b338
 8007a0c:	20005400 	.word	0x20005400

08007a10 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007a16:	f3ef 8311 	mrs	r3, BASEPRI
 8007a1a:	f04f 0120 	mov.w	r1, #32
 8007a1e:	f381 8811 	msr	BASEPRI, r1
 8007a22:	607b      	str	r3, [r7, #4]
 8007a24:	480b      	ldr	r0, [pc, #44]	; (8007a54 <SEGGER_SYSVIEW_Stop+0x44>)
 8007a26:	f7ff facd 	bl	8006fc4 <_PreparePacket>
 8007a2a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <SEGGER_SYSVIEW_Stop+0x48>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007a34:	220b      	movs	r2, #11
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6838      	ldr	r0, [r7, #0]
 8007a3a:	f7ff fbb1 	bl	80071a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007a3e:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <SEGGER_SYSVIEW_Stop+0x48>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f383 8811 	msr	BASEPRI, r3
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20005400 	.word	0x20005400
 8007a58:	200053d0 	.word	0x200053d0

08007a5c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08c      	sub	sp, #48	; 0x30
 8007a60:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a62:	f3ef 8311 	mrs	r3, BASEPRI
 8007a66:	f04f 0120 	mov.w	r1, #32
 8007a6a:	f381 8811 	msr	BASEPRI, r1
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	4845      	ldr	r0, [pc, #276]	; (8007b88 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007a72:	f7ff faa7 	bl	8006fc4 <_PreparePacket>
 8007a76:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a80:	4b42      	ldr	r3, [pc, #264]	; (8007b8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a86:	e00b      	b.n	8007aa0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	1c59      	adds	r1, r3, #1
 8007a90:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9c:	09db      	lsrs	r3, r3, #7
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa4:	d8f0      	bhi.n	8007a88 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aba:	4b34      	ldr	r3, [pc, #208]	; (8007b8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	623b      	str	r3, [r7, #32]
 8007ac0:	e00b      	b.n	8007ada <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	1c59      	adds	r1, r3, #1
 8007aca:	6279      	str	r1, [r7, #36]	; 0x24
 8007acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	09db      	lsrs	r3, r3, #7
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ade:	d8f0      	bhi.n	8007ac2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ae6:	6a3a      	ldr	r2, [r7, #32]
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	61fb      	str	r3, [r7, #28]
 8007af4:	4b25      	ldr	r3, [pc, #148]	; (8007b8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	e00b      	b.n	8007b14 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	1c59      	adds	r1, r3, #1
 8007b04:	61f9      	str	r1, [r7, #28]
 8007b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	09db      	lsrs	r3, r3, #7
 8007b12:	61bb      	str	r3, [r7, #24]
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b7f      	cmp	r3, #127	; 0x7f
 8007b18:	d8f0      	bhi.n	8007afc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	61fa      	str	r2, [r7, #28]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	e00b      	b.n	8007b4c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	1c59      	adds	r1, r3, #1
 8007b3c:	6179      	str	r1, [r7, #20]
 8007b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	09db      	lsrs	r3, r3, #7
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b50:	d8f0      	bhi.n	8007b34 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	617a      	str	r2, [r7, #20]
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007b62:	2218      	movs	r2, #24
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	68b8      	ldr	r0, [r7, #8]
 8007b68:	f7ff fb1a 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007b72:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007b7a:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	4798      	blx	r3
  }
}
 8007b80:	bf00      	nop
 8007b82:	3730      	adds	r7, #48	; 0x30
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20005400 	.word	0x20005400
 8007b8c:	200053d0 	.word	0x200053d0

08007b90 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b092      	sub	sp, #72	; 0x48
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007b98:	f3ef 8311 	mrs	r3, BASEPRI
 8007b9c:	f04f 0120 	mov.w	r1, #32
 8007ba0:	f381 8811 	msr	BASEPRI, r1
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	486a      	ldr	r0, [pc, #424]	; (8007d50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007ba8:	f7ff fa0c 	bl	8006fc4 <_PreparePacket>
 8007bac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4b66      	ldr	r3, [pc, #408]	; (8007d54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc2:	e00b      	b.n	8007bdc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bca:	1c59      	adds	r1, r3, #1
 8007bcc:	6479      	str	r1, [r7, #68]	; 0x44
 8007bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd8:	09db      	lsrs	r3, r3, #7
 8007bda:	643b      	str	r3, [r7, #64]	; 0x40
 8007bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bde:	2b7f      	cmp	r3, #127	; 0x7f
 8007be0:	d8f0      	bhi.n	8007bc4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	647a      	str	r2, [r7, #68]	; 0x44
 8007be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bfc:	e00b      	b.n	8007c16 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c04:	1c59      	adds	r1, r3, #1
 8007c06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	701a      	strb	r2, [r3, #0]
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	09db      	lsrs	r3, r3, #7
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	2b7f      	cmp	r3, #127	; 0x7f
 8007c1a:	d8f0      	bhi.n	8007bfe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c24:	b2d2      	uxtb	r2, r2
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	2220      	movs	r2, #32
 8007c32:	4619      	mov	r1, r3
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff f975 	bl	8006f24 <_EncodeStr>
 8007c3a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007c3c:	2209      	movs	r2, #9
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	6938      	ldr	r0, [r7, #16]
 8007c42:	f7ff faad 	bl	80071a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b40      	ldr	r3, [pc, #256]	; (8007d54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	633b      	str	r3, [r7, #48]	; 0x30
 8007c5a:	e00b      	b.n	8007c74 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c62:	1c59      	adds	r1, r3, #1
 8007c64:	6379      	str	r1, [r7, #52]	; 0x34
 8007c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	09db      	lsrs	r3, r3, #7
 8007c72:	633b      	str	r3, [r7, #48]	; 0x30
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	2b7f      	cmp	r3, #127	; 0x7f
 8007c78:	d8f0      	bhi.n	8007c5c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	637a      	str	r2, [r7, #52]	; 0x34
 8007c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c94:	e00b      	b.n	8007cae <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	1c59      	adds	r1, r3, #1
 8007c9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ca4:	b2d2      	uxtb	r2, r2
 8007ca6:	701a      	strb	r2, [r3, #0]
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	09db      	lsrs	r3, r3, #7
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8007cb2:	d8f0      	bhi.n	8007c96 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cbc:	b2d2      	uxtb	r2, r2
 8007cbe:	701a      	strb	r2, [r3, #0]
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	623b      	str	r3, [r7, #32]
 8007cce:	e00b      	b.n	8007ce8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	1c59      	adds	r1, r3, #1
 8007cd8:	6279      	str	r1, [r7, #36]	; 0x24
 8007cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	09db      	lsrs	r3, r3, #7
 8007ce6:	623b      	str	r3, [r7, #32]
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	2b7f      	cmp	r3, #127	; 0x7f
 8007cec:	d8f0      	bhi.n	8007cd0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	627a      	str	r2, [r7, #36]	; 0x24
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	2300      	movs	r3, #0
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	e00b      	b.n	8007d20 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	1c59      	adds	r1, r3, #1
 8007d10:	61f9      	str	r1, [r7, #28]
 8007d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	09db      	lsrs	r3, r3, #7
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	2b7f      	cmp	r3, #127	; 0x7f
 8007d24:	d8f0      	bhi.n	8007d08 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	61fa      	str	r2, [r7, #28]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007d36:	2215      	movs	r2, #21
 8007d38:	68f9      	ldr	r1, [r7, #12]
 8007d3a:	6938      	ldr	r0, [r7, #16]
 8007d3c:	f7ff fa30 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f383 8811 	msr	BASEPRI, r3
}
 8007d46:	bf00      	nop
 8007d48:	3748      	adds	r7, #72	; 0x48
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20005400 	.word	0x20005400
 8007d54:	200053d0 	.word	0x200053d0

08007d58 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007d5c:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d008      	beq.n	8007d76 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007d6e:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	4798      	blx	r3
  }
}
 8007d76:	bf00      	nop
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200053d0 	.word	0x200053d0

08007d80 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d88:	f3ef 8311 	mrs	r3, BASEPRI
 8007d8c:	f04f 0120 	mov.w	r1, #32
 8007d90:	f381 8811 	msr	BASEPRI, r1
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	480b      	ldr	r0, [pc, #44]	; (8007dc4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007d98:	f7ff f914 	bl	8006fc4 <_PreparePacket>
 8007d9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d9e:	2280      	movs	r2, #128	; 0x80
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	6938      	ldr	r0, [r7, #16]
 8007da4:	f7ff f8be 	bl	8006f24 <_EncodeStr>
 8007da8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007daa:	220e      	movs	r2, #14
 8007dac:	68f9      	ldr	r1, [r7, #12]
 8007dae:	6938      	ldr	r0, [r7, #16]
 8007db0:	f7ff f9f6 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f383 8811 	msr	BASEPRI, r3
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20005400 	.word	0x20005400

08007dc8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007dc8:	b590      	push	{r4, r7, lr}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007dce:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01a      	beq.n	8007e0c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007dd6:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d015      	beq.n	8007e0c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007de0:	4b10      	ldr	r3, [pc, #64]	; (8007e24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4798      	blx	r3
 8007de8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007dec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	000a      	movs	r2, r1
 8007dfc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007dfe:	4613      	mov	r3, r2
 8007e00:	461a      	mov	r2, r3
 8007e02:	4621      	mov	r1, r4
 8007e04:	200d      	movs	r0, #13
 8007e06:	f7ff fbe7 	bl	80075d8 <SEGGER_SYSVIEW_RecordU32x2>
 8007e0a:	e006      	b.n	8007e1a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007e0c:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4619      	mov	r1, r3
 8007e12:	200c      	movs	r0, #12
 8007e14:	f7ff fba4 	bl	8007560 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd90      	pop	{r4, r7, pc}
 8007e22:	bf00      	nop
 8007e24:	200053d0 	.word	0x200053d0
 8007e28:	e0001004 	.word	0xe0001004

08007e2c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007e32:	f3ef 8311 	mrs	r3, BASEPRI
 8007e36:	f04f 0120 	mov.w	r1, #32
 8007e3a:	f381 8811 	msr	BASEPRI, r1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	4819      	ldr	r0, [pc, #100]	; (8007ea8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007e42:	f7ff f8bf 	bl	8006fc4 <_PreparePacket>
 8007e46:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007e4c:	4b17      	ldr	r3, [pc, #92]	; (8007eac <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e54:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	e00b      	b.n	8007e78 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1c59      	adds	r1, r3, #1
 8007e68:	6179      	str	r1, [r7, #20]
 8007e6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	09db      	lsrs	r3, r3, #7
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e7c:	d8f0      	bhi.n	8007e60 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	617a      	str	r2, [r7, #20]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007e8e:	2202      	movs	r2, #2
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	68b8      	ldr	r0, [r7, #8]
 8007e94:	f7ff f984 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f383 8811 	msr	BASEPRI, r3
}
 8007e9e:	bf00      	nop
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20005400 	.word	0x20005400
 8007eac:	e000ed04 	.word	0xe000ed04

08007eb0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8007eba:	f04f 0120 	mov.w	r1, #32
 8007ebe:	f381 8811 	msr	BASEPRI, r1
 8007ec2:	607b      	str	r3, [r7, #4]
 8007ec4:	4807      	ldr	r0, [pc, #28]	; (8007ee4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007ec6:	f7ff f87d 	bl	8006fc4 <_PreparePacket>
 8007eca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007ecc:	2203      	movs	r2, #3
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6838      	ldr	r0, [r7, #0]
 8007ed2:	f7ff f965 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f383 8811 	msr	BASEPRI, r3
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20005400 	.word	0x20005400

08007ee8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007eee:	f3ef 8311 	mrs	r3, BASEPRI
 8007ef2:	f04f 0120 	mov.w	r1, #32
 8007ef6:	f381 8811 	msr	BASEPRI, r1
 8007efa:	607b      	str	r3, [r7, #4]
 8007efc:	4807      	ldr	r0, [pc, #28]	; (8007f1c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007efe:	f7ff f861 	bl	8006fc4 <_PreparePacket>
 8007f02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007f04:	2212      	movs	r2, #18
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6838      	ldr	r0, [r7, #0]
 8007f0a:	f7ff f949 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f383 8811 	msr	BASEPRI, r3
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20005400 	.word	0x20005400

08007f20 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007f26:	f3ef 8311 	mrs	r3, BASEPRI
 8007f2a:	f04f 0120 	mov.w	r1, #32
 8007f2e:	f381 8811 	msr	BASEPRI, r1
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	4807      	ldr	r0, [pc, #28]	; (8007f54 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007f36:	f7ff f845 	bl	8006fc4 <_PreparePacket>
 8007f3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007f3c:	2211      	movs	r2, #17
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6838      	ldr	r0, [r7, #0]
 8007f42:	f7ff f92d 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f383 8811 	msr	BASEPRI, r3
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20005400 	.word	0x20005400

08007f58 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007f60:	f3ef 8311 	mrs	r3, BASEPRI
 8007f64:	f04f 0120 	mov.w	r1, #32
 8007f68:	f381 8811 	msr	BASEPRI, r1
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	4819      	ldr	r0, [pc, #100]	; (8007fd4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007f70:	f7ff f828 	bl	8006fc4 <_PreparePacket>
 8007f74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007f7a:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	e00b      	b.n	8007fa6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	1c59      	adds	r1, r3, #1
 8007f96:	61f9      	str	r1, [r7, #28]
 8007f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	701a      	strb	r2, [r3, #0]
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	09db      	lsrs	r3, r3, #7
 8007fa4:	61bb      	str	r3, [r7, #24]
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8007faa:	d8f0      	bhi.n	8007f8e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	61fa      	str	r2, [r7, #28]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	6938      	ldr	r0, [r7, #16]
 8007fc2:	f7ff f8ed 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f383 8811 	msr	BASEPRI, r3
}
 8007fcc:	bf00      	nop
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20005400 	.word	0x20005400
 8007fd8:	200053d0 	.word	0x200053d0

08007fdc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8007fe8:	f04f 0120 	mov.w	r1, #32
 8007fec:	f381 8811 	msr	BASEPRI, r1
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	4819      	ldr	r0, [pc, #100]	; (8008058 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007ff4:	f7fe ffe6 	bl	8006fc4 <_PreparePacket>
 8007ff8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007ffe:	4b17      	ldr	r3, [pc, #92]	; (800805c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	61fb      	str	r3, [r7, #28]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	e00b      	b.n	800802a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	b2da      	uxtb	r2, r3
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	1c59      	adds	r1, r3, #1
 800801a:	61f9      	str	r1, [r7, #28]
 800801c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	09db      	lsrs	r3, r3, #7
 8008028:	61bb      	str	r3, [r7, #24]
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2b7f      	cmp	r3, #127	; 0x7f
 800802e:	d8f0      	bhi.n	8008012 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	61fa      	str	r2, [r7, #28]
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008040:	2204      	movs	r2, #4
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	6938      	ldr	r0, [r7, #16]
 8008046:	f7ff f8ab 	bl	80071a0 <_SendPacket>
  RECORD_END();
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f383 8811 	msr	BASEPRI, r3
}
 8008050:	bf00      	nop
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20005400 	.word	0x20005400
 800805c:	200053d0 	.word	0x200053d0

08008060 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008068:	f3ef 8311 	mrs	r3, BASEPRI
 800806c:	f04f 0120 	mov.w	r1, #32
 8008070:	f381 8811 	msr	BASEPRI, r1
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	4819      	ldr	r0, [pc, #100]	; (80080dc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008078:	f7fe ffa4 	bl	8006fc4 <_PreparePacket>
 800807c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008082:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	61fb      	str	r3, [r7, #28]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	e00b      	b.n	80080ae <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	b2da      	uxtb	r2, r3
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	1c59      	adds	r1, r3, #1
 800809e:	61f9      	str	r1, [r7, #28]
 80080a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080a4:	b2d2      	uxtb	r2, r2
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	09db      	lsrs	r3, r3, #7
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	2b7f      	cmp	r3, #127	; 0x7f
 80080b2:	d8f0      	bhi.n	8008096 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	61fa      	str	r2, [r7, #28]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80080c4:	2206      	movs	r2, #6
 80080c6:	68f9      	ldr	r1, [r7, #12]
 80080c8:	6938      	ldr	r0, [r7, #16]
 80080ca:	f7ff f869 	bl	80071a0 <_SendPacket>
  RECORD_END();
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f383 8811 	msr	BASEPRI, r3
}
 80080d4:	bf00      	nop
 80080d6:	3720      	adds	r7, #32
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	20005400 	.word	0x20005400
 80080e0:	200053d0 	.word	0x200053d0

080080e4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08a      	sub	sp, #40	; 0x28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80080ee:	f3ef 8311 	mrs	r3, BASEPRI
 80080f2:	f04f 0120 	mov.w	r1, #32
 80080f6:	f381 8811 	msr	BASEPRI, r1
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	4827      	ldr	r0, [pc, #156]	; (800819c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80080fe:	f7fe ff61 	bl	8006fc4 <_PreparePacket>
 8008102:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008108:	4b25      	ldr	r3, [pc, #148]	; (80081a0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	623b      	str	r3, [r7, #32]
 800811a:	e00b      	b.n	8008134 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	b2da      	uxtb	r2, r3
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	1c59      	adds	r1, r3, #1
 8008124:	6279      	str	r1, [r7, #36]	; 0x24
 8008126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	09db      	lsrs	r3, r3, #7
 8008132:	623b      	str	r3, [r7, #32]
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	2b7f      	cmp	r3, #127	; 0x7f
 8008138:	d8f0      	bhi.n	800811c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	627a      	str	r2, [r7, #36]	; 0x24
 8008140:	6a3a      	ldr	r2, [r7, #32]
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	61fb      	str	r3, [r7, #28]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	61bb      	str	r3, [r7, #24]
 8008152:	e00b      	b.n	800816c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	1c59      	adds	r1, r3, #1
 800815c:	61f9      	str	r1, [r7, #28]
 800815e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	09db      	lsrs	r3, r3, #7
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b7f      	cmp	r3, #127	; 0x7f
 8008170:	d8f0      	bhi.n	8008154 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	61fa      	str	r2, [r7, #28]
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8008182:	2207      	movs	r2, #7
 8008184:	68f9      	ldr	r1, [r7, #12]
 8008186:	6938      	ldr	r0, [r7, #16]
 8008188:	f7ff f80a 	bl	80071a0 <_SendPacket>
  RECORD_END();
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f383 8811 	msr	BASEPRI, r3
}
 8008192:	bf00      	nop
 8008194:	3728      	adds	r7, #40	; 0x28
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20005400 	.word	0x20005400
 80081a0:	200053d0 	.word	0x200053d0

080081a4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80081ac:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	1ad3      	subs	r3, r2, r3
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	200053d0 	.word	0x200053d0

080081c4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08c      	sub	sp, #48	; 0x30
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80081ce:	4b3b      	ldr	r3, [pc, #236]	; (80082bc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d06d      	beq.n	80082b2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80081d6:	4b39      	ldr	r3, [pc, #228]	; (80082bc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80081dc:	2300      	movs	r3, #0
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
 80081e0:	e008      	b.n	80081f4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d007      	beq.n	80081fe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	3301      	adds	r3, #1
 80081f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d3f2      	bcc.n	80081e2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80081fc:	e000      	b.n	8008200 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80081fe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d055      	beq.n	80082b2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008206:	f3ef 8311 	mrs	r3, BASEPRI
 800820a:	f04f 0120 	mov.w	r1, #32
 800820e:	f381 8811 	msr	BASEPRI, r1
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	482a      	ldr	r0, [pc, #168]	; (80082c0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008216:	f7fe fed5 	bl	8006fc4 <_PreparePacket>
 800821a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	623b      	str	r3, [r7, #32]
 8008228:	e00b      	b.n	8008242 <SEGGER_SYSVIEW_SendModule+0x7e>
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	b2da      	uxtb	r2, r3
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	1c59      	adds	r1, r3, #1
 8008232:	6279      	str	r1, [r7, #36]	; 0x24
 8008234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	09db      	lsrs	r3, r3, #7
 8008240:	623b      	str	r3, [r7, #32]
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	2b7f      	cmp	r3, #127	; 0x7f
 8008246:	d8f0      	bhi.n	800822a <SEGGER_SYSVIEW_SendModule+0x66>
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	627a      	str	r2, [r7, #36]	; 0x24
 800824e:	6a3a      	ldr	r2, [r7, #32]
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	e00b      	b.n	800827c <SEGGER_SYSVIEW_SendModule+0xb8>
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	b2da      	uxtb	r2, r3
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	1c59      	adds	r1, r3, #1
 800826c:	61f9      	str	r1, [r7, #28]
 800826e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	09db      	lsrs	r3, r3, #7
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b7f      	cmp	r3, #127	; 0x7f
 8008280:	d8f0      	bhi.n	8008264 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	61fa      	str	r2, [r7, #28]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	b2d2      	uxtb	r2, r2
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2280      	movs	r2, #128	; 0x80
 8008298:	4619      	mov	r1, r3
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7fe fe42 	bl	8006f24 <_EncodeStr>
 80082a0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80082a2:	2216      	movs	r2, #22
 80082a4:	68f9      	ldr	r1, [r7, #12]
 80082a6:	6938      	ldr	r0, [r7, #16]
 80082a8:	f7fe ff7a 	bl	80071a0 <_SendPacket>
      RECORD_END();
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80082b2:	bf00      	nop
 80082b4:	3730      	adds	r7, #48	; 0x30
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	200053f8 	.word	0x200053f8
 80082c0:	20005400 	.word	0x20005400

080082c4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80082ca:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00f      	beq.n	80082f2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80082d2:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f2      	bne.n	80082d8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80082f2:	bf00      	nop
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	200053f8 	.word	0x200053f8

08008300 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008306:	f3ef 8311 	mrs	r3, BASEPRI
 800830a:	f04f 0120 	mov.w	r1, #32
 800830e:	f381 8811 	msr	BASEPRI, r1
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	4817      	ldr	r0, [pc, #92]	; (8008374 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008316:	f7fe fe55 	bl	8006fc4 <_PreparePacket>
 800831a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	4b14      	ldr	r3, [pc, #80]	; (8008378 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	e00b      	b.n	8008344 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	1c59      	adds	r1, r3, #1
 8008334:	6179      	str	r1, [r7, #20]
 8008336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	09db      	lsrs	r3, r3, #7
 8008342:	613b      	str	r3, [r7, #16]
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	2b7f      	cmp	r3, #127	; 0x7f
 8008348:	d8f0      	bhi.n	800832c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	1c5a      	adds	r2, r3, #1
 800834e:	617a      	str	r2, [r7, #20]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800835a:	221b      	movs	r2, #27
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	68b8      	ldr	r0, [r7, #8]
 8008360:	f7fe ff1e 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f383 8811 	msr	BASEPRI, r3
}
 800836a:	bf00      	nop
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20005400 	.word	0x20005400
 8008378:	200053fc 	.word	0x200053fc

0800837c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	; 0x28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008384:	f3ef 8311 	mrs	r3, BASEPRI
 8008388:	f04f 0120 	mov.w	r1, #32
 800838c:	f381 8811 	msr	BASEPRI, r1
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	4827      	ldr	r0, [pc, #156]	; (8008430 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008394:	f7fe fe16 	bl	8006fc4 <_PreparePacket>
 8008398:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800839a:	2280      	movs	r2, #128	; 0x80
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	6938      	ldr	r0, [r7, #16]
 80083a0:	f7fe fdc0 	bl	8006f24 <_EncodeStr>
 80083a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
 80083aa:	2301      	movs	r3, #1
 80083ac:	623b      	str	r3, [r7, #32]
 80083ae:	e00b      	b.n	80083c8 <SEGGER_SYSVIEW_Warn+0x4c>
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	1c59      	adds	r1, r3, #1
 80083b8:	6279      	str	r1, [r7, #36]	; 0x24
 80083ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	701a      	strb	r2, [r3, #0]
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	09db      	lsrs	r3, r3, #7
 80083c6:	623b      	str	r3, [r7, #32]
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	2b7f      	cmp	r3, #127	; 0x7f
 80083cc:	d8f0      	bhi.n	80083b0 <SEGGER_SYSVIEW_Warn+0x34>
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	627a      	str	r2, [r7, #36]	; 0x24
 80083d4:	6a3a      	ldr	r2, [r7, #32]
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	2300      	movs	r3, #0
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e00b      	b.n	8008400 <SEGGER_SYSVIEW_Warn+0x84>
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	1c59      	adds	r1, r3, #1
 80083f0:	61f9      	str	r1, [r7, #28]
 80083f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	09db      	lsrs	r3, r3, #7
 80083fe:	61bb      	str	r3, [r7, #24]
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	2b7f      	cmp	r3, #127	; 0x7f
 8008404:	d8f0      	bhi.n	80083e8 <SEGGER_SYSVIEW_Warn+0x6c>
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	61fa      	str	r2, [r7, #28]
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	701a      	strb	r2, [r3, #0]
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008416:	221a      	movs	r2, #26
 8008418:	68f9      	ldr	r1, [r7, #12]
 800841a:	6938      	ldr	r0, [r7, #16]
 800841c:	f7fe fec0 	bl	80071a0 <_SendPacket>
  RECORD_END();
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f383 8811 	msr	BASEPRI, r3
}
 8008426:	bf00      	nop
 8008428:	3728      	adds	r7, #40	; 0x28
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20005400 	.word	0x20005400

08008434 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	2000      	movs	r0, #0
 8008448:	f7fe fc76 	bl	8006d38 <SEGGER_RTT_Write>
  return len;
 800844c:	683b      	ldr	r3, [r7, #0]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <__errno>:
 8008458:	4b01      	ldr	r3, [pc, #4]	; (8008460 <__errno+0x8>)
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000010 	.word	0x20000010

08008464 <__libc_init_array>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	4d0d      	ldr	r5, [pc, #52]	; (800849c <__libc_init_array+0x38>)
 8008468:	4c0d      	ldr	r4, [pc, #52]	; (80084a0 <__libc_init_array+0x3c>)
 800846a:	1b64      	subs	r4, r4, r5
 800846c:	10a4      	asrs	r4, r4, #2
 800846e:	2600      	movs	r6, #0
 8008470:	42a6      	cmp	r6, r4
 8008472:	d109      	bne.n	8008488 <__libc_init_array+0x24>
 8008474:	4d0b      	ldr	r5, [pc, #44]	; (80084a4 <__libc_init_array+0x40>)
 8008476:	4c0c      	ldr	r4, [pc, #48]	; (80084a8 <__libc_init_array+0x44>)
 8008478:	f002 feb0 	bl	800b1dc <_init>
 800847c:	1b64      	subs	r4, r4, r5
 800847e:	10a4      	asrs	r4, r4, #2
 8008480:	2600      	movs	r6, #0
 8008482:	42a6      	cmp	r6, r4
 8008484:	d105      	bne.n	8008492 <__libc_init_array+0x2e>
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	f855 3b04 	ldr.w	r3, [r5], #4
 800848c:	4798      	blx	r3
 800848e:	3601      	adds	r6, #1
 8008490:	e7ee      	b.n	8008470 <__libc_init_array+0xc>
 8008492:	f855 3b04 	ldr.w	r3, [r5], #4
 8008496:	4798      	blx	r3
 8008498:	3601      	adds	r6, #1
 800849a:	e7f2      	b.n	8008482 <__libc_init_array+0x1e>
 800849c:	0800b72c 	.word	0x0800b72c
 80084a0:	0800b72c 	.word	0x0800b72c
 80084a4:	0800b72c 	.word	0x0800b72c
 80084a8:	0800b730 	.word	0x0800b730

080084ac <memcmp>:
 80084ac:	b530      	push	{r4, r5, lr}
 80084ae:	3901      	subs	r1, #1
 80084b0:	2400      	movs	r4, #0
 80084b2:	42a2      	cmp	r2, r4
 80084b4:	d101      	bne.n	80084ba <memcmp+0xe>
 80084b6:	2000      	movs	r0, #0
 80084b8:	e005      	b.n	80084c6 <memcmp+0x1a>
 80084ba:	5d03      	ldrb	r3, [r0, r4]
 80084bc:	3401      	adds	r4, #1
 80084be:	5d0d      	ldrb	r5, [r1, r4]
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	d0f6      	beq.n	80084b2 <memcmp+0x6>
 80084c4:	1b58      	subs	r0, r3, r5
 80084c6:	bd30      	pop	{r4, r5, pc}

080084c8 <memcpy>:
 80084c8:	440a      	add	r2, r1
 80084ca:	4291      	cmp	r1, r2
 80084cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80084d0:	d100      	bne.n	80084d4 <memcpy+0xc>
 80084d2:	4770      	bx	lr
 80084d4:	b510      	push	{r4, lr}
 80084d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084de:	4291      	cmp	r1, r2
 80084e0:	d1f9      	bne.n	80084d6 <memcpy+0xe>
 80084e2:	bd10      	pop	{r4, pc}

080084e4 <memset>:
 80084e4:	4402      	add	r2, r0
 80084e6:	4603      	mov	r3, r0
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d100      	bne.n	80084ee <memset+0xa>
 80084ec:	4770      	bx	lr
 80084ee:	f803 1b01 	strb.w	r1, [r3], #1
 80084f2:	e7f9      	b.n	80084e8 <memset+0x4>

080084f4 <__cvt>:
 80084f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	ec55 4b10 	vmov	r4, r5, d0
 80084fc:	2d00      	cmp	r5, #0
 80084fe:	460e      	mov	r6, r1
 8008500:	4619      	mov	r1, r3
 8008502:	462b      	mov	r3, r5
 8008504:	bfbb      	ittet	lt
 8008506:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800850a:	461d      	movlt	r5, r3
 800850c:	2300      	movge	r3, #0
 800850e:	232d      	movlt	r3, #45	; 0x2d
 8008510:	700b      	strb	r3, [r1, #0]
 8008512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008514:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008518:	4691      	mov	r9, r2
 800851a:	f023 0820 	bic.w	r8, r3, #32
 800851e:	bfbc      	itt	lt
 8008520:	4622      	movlt	r2, r4
 8008522:	4614      	movlt	r4, r2
 8008524:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008528:	d005      	beq.n	8008536 <__cvt+0x42>
 800852a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800852e:	d100      	bne.n	8008532 <__cvt+0x3e>
 8008530:	3601      	adds	r6, #1
 8008532:	2102      	movs	r1, #2
 8008534:	e000      	b.n	8008538 <__cvt+0x44>
 8008536:	2103      	movs	r1, #3
 8008538:	ab03      	add	r3, sp, #12
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	ab02      	add	r3, sp, #8
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	ec45 4b10 	vmov	d0, r4, r5
 8008544:	4653      	mov	r3, sl
 8008546:	4632      	mov	r2, r6
 8008548:	f000 fcea 	bl	8008f20 <_dtoa_r>
 800854c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008550:	4607      	mov	r7, r0
 8008552:	d102      	bne.n	800855a <__cvt+0x66>
 8008554:	f019 0f01 	tst.w	r9, #1
 8008558:	d022      	beq.n	80085a0 <__cvt+0xac>
 800855a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800855e:	eb07 0906 	add.w	r9, r7, r6
 8008562:	d110      	bne.n	8008586 <__cvt+0x92>
 8008564:	783b      	ldrb	r3, [r7, #0]
 8008566:	2b30      	cmp	r3, #48	; 0x30
 8008568:	d10a      	bne.n	8008580 <__cvt+0x8c>
 800856a:	2200      	movs	r2, #0
 800856c:	2300      	movs	r3, #0
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f8 fb01 	bl	8000b78 <__aeabi_dcmpeq>
 8008576:	b918      	cbnz	r0, 8008580 <__cvt+0x8c>
 8008578:	f1c6 0601 	rsb	r6, r6, #1
 800857c:	f8ca 6000 	str.w	r6, [sl]
 8008580:	f8da 3000 	ldr.w	r3, [sl]
 8008584:	4499      	add	r9, r3
 8008586:	2200      	movs	r2, #0
 8008588:	2300      	movs	r3, #0
 800858a:	4620      	mov	r0, r4
 800858c:	4629      	mov	r1, r5
 800858e:	f7f8 faf3 	bl	8000b78 <__aeabi_dcmpeq>
 8008592:	b108      	cbz	r0, 8008598 <__cvt+0xa4>
 8008594:	f8cd 900c 	str.w	r9, [sp, #12]
 8008598:	2230      	movs	r2, #48	; 0x30
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	454b      	cmp	r3, r9
 800859e:	d307      	bcc.n	80085b0 <__cvt+0xbc>
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085a4:	1bdb      	subs	r3, r3, r7
 80085a6:	4638      	mov	r0, r7
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	b004      	add	sp, #16
 80085ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b0:	1c59      	adds	r1, r3, #1
 80085b2:	9103      	str	r1, [sp, #12]
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	e7f0      	b.n	800859a <__cvt+0xa6>

080085b8 <__exponent>:
 80085b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ba:	4603      	mov	r3, r0
 80085bc:	2900      	cmp	r1, #0
 80085be:	bfb8      	it	lt
 80085c0:	4249      	neglt	r1, r1
 80085c2:	f803 2b02 	strb.w	r2, [r3], #2
 80085c6:	bfb4      	ite	lt
 80085c8:	222d      	movlt	r2, #45	; 0x2d
 80085ca:	222b      	movge	r2, #43	; 0x2b
 80085cc:	2909      	cmp	r1, #9
 80085ce:	7042      	strb	r2, [r0, #1]
 80085d0:	dd2a      	ble.n	8008628 <__exponent+0x70>
 80085d2:	f10d 0407 	add.w	r4, sp, #7
 80085d6:	46a4      	mov	ip, r4
 80085d8:	270a      	movs	r7, #10
 80085da:	46a6      	mov	lr, r4
 80085dc:	460a      	mov	r2, r1
 80085de:	fb91 f6f7 	sdiv	r6, r1, r7
 80085e2:	fb07 1516 	mls	r5, r7, r6, r1
 80085e6:	3530      	adds	r5, #48	; 0x30
 80085e8:	2a63      	cmp	r2, #99	; 0x63
 80085ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80085ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085f2:	4631      	mov	r1, r6
 80085f4:	dcf1      	bgt.n	80085da <__exponent+0x22>
 80085f6:	3130      	adds	r1, #48	; 0x30
 80085f8:	f1ae 0502 	sub.w	r5, lr, #2
 80085fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008600:	1c44      	adds	r4, r0, #1
 8008602:	4629      	mov	r1, r5
 8008604:	4561      	cmp	r1, ip
 8008606:	d30a      	bcc.n	800861e <__exponent+0x66>
 8008608:	f10d 0209 	add.w	r2, sp, #9
 800860c:	eba2 020e 	sub.w	r2, r2, lr
 8008610:	4565      	cmp	r5, ip
 8008612:	bf88      	it	hi
 8008614:	2200      	movhi	r2, #0
 8008616:	4413      	add	r3, r2
 8008618:	1a18      	subs	r0, r3, r0
 800861a:	b003      	add	sp, #12
 800861c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800861e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008622:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008626:	e7ed      	b.n	8008604 <__exponent+0x4c>
 8008628:	2330      	movs	r3, #48	; 0x30
 800862a:	3130      	adds	r1, #48	; 0x30
 800862c:	7083      	strb	r3, [r0, #2]
 800862e:	70c1      	strb	r1, [r0, #3]
 8008630:	1d03      	adds	r3, r0, #4
 8008632:	e7f1      	b.n	8008618 <__exponent+0x60>

08008634 <_printf_float>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	ed2d 8b02 	vpush	{d8}
 800863c:	b08d      	sub	sp, #52	; 0x34
 800863e:	460c      	mov	r4, r1
 8008640:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008644:	4616      	mov	r6, r2
 8008646:	461f      	mov	r7, r3
 8008648:	4605      	mov	r5, r0
 800864a:	f001 fa55 	bl	8009af8 <_localeconv_r>
 800864e:	f8d0 a000 	ldr.w	sl, [r0]
 8008652:	4650      	mov	r0, sl
 8008654:	f7f7 fe0e 	bl	8000274 <strlen>
 8008658:	2300      	movs	r3, #0
 800865a:	930a      	str	r3, [sp, #40]	; 0x28
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	9305      	str	r3, [sp, #20]
 8008660:	f8d8 3000 	ldr.w	r3, [r8]
 8008664:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008668:	3307      	adds	r3, #7
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	f103 0208 	add.w	r2, r3, #8
 8008672:	f8c8 2000 	str.w	r2, [r8]
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800867e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008682:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008686:	9307      	str	r3, [sp, #28]
 8008688:	f8cd 8018 	str.w	r8, [sp, #24]
 800868c:	ee08 0a10 	vmov	s16, r0
 8008690:	4b9f      	ldr	r3, [pc, #636]	; (8008910 <_printf_float+0x2dc>)
 8008692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008696:	f04f 32ff 	mov.w	r2, #4294967295
 800869a:	f7f8 fa9f 	bl	8000bdc <__aeabi_dcmpun>
 800869e:	bb88      	cbnz	r0, 8008704 <_printf_float+0xd0>
 80086a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086a4:	4b9a      	ldr	r3, [pc, #616]	; (8008910 <_printf_float+0x2dc>)
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295
 80086aa:	f7f8 fa79 	bl	8000ba0 <__aeabi_dcmple>
 80086ae:	bb48      	cbnz	r0, 8008704 <_printf_float+0xd0>
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	4640      	mov	r0, r8
 80086b6:	4649      	mov	r1, r9
 80086b8:	f7f8 fa68 	bl	8000b8c <__aeabi_dcmplt>
 80086bc:	b110      	cbz	r0, 80086c4 <_printf_float+0x90>
 80086be:	232d      	movs	r3, #45	; 0x2d
 80086c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c4:	4b93      	ldr	r3, [pc, #588]	; (8008914 <_printf_float+0x2e0>)
 80086c6:	4894      	ldr	r0, [pc, #592]	; (8008918 <_printf_float+0x2e4>)
 80086c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086cc:	bf94      	ite	ls
 80086ce:	4698      	movls	r8, r3
 80086d0:	4680      	movhi	r8, r0
 80086d2:	2303      	movs	r3, #3
 80086d4:	6123      	str	r3, [r4, #16]
 80086d6:	9b05      	ldr	r3, [sp, #20]
 80086d8:	f023 0204 	bic.w	r2, r3, #4
 80086dc:	6022      	str	r2, [r4, #0]
 80086de:	f04f 0900 	mov.w	r9, #0
 80086e2:	9700      	str	r7, [sp, #0]
 80086e4:	4633      	mov	r3, r6
 80086e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f9d8 	bl	8008aa0 <_printf_common>
 80086f0:	3001      	adds	r0, #1
 80086f2:	f040 8090 	bne.w	8008816 <_printf_float+0x1e2>
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295
 80086fa:	b00d      	add	sp, #52	; 0x34
 80086fc:	ecbd 8b02 	vpop	{d8}
 8008700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008704:	4642      	mov	r2, r8
 8008706:	464b      	mov	r3, r9
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f8 fa66 	bl	8000bdc <__aeabi_dcmpun>
 8008710:	b140      	cbz	r0, 8008724 <_printf_float+0xf0>
 8008712:	464b      	mov	r3, r9
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfbc      	itt	lt
 8008718:	232d      	movlt	r3, #45	; 0x2d
 800871a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800871e:	487f      	ldr	r0, [pc, #508]	; (800891c <_printf_float+0x2e8>)
 8008720:	4b7f      	ldr	r3, [pc, #508]	; (8008920 <_printf_float+0x2ec>)
 8008722:	e7d1      	b.n	80086c8 <_printf_float+0x94>
 8008724:	6863      	ldr	r3, [r4, #4]
 8008726:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800872a:	9206      	str	r2, [sp, #24]
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	d13f      	bne.n	80087b0 <_printf_float+0x17c>
 8008730:	2306      	movs	r3, #6
 8008732:	6063      	str	r3, [r4, #4]
 8008734:	9b05      	ldr	r3, [sp, #20]
 8008736:	6861      	ldr	r1, [r4, #4]
 8008738:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800873c:	2300      	movs	r3, #0
 800873e:	9303      	str	r3, [sp, #12]
 8008740:	ab0a      	add	r3, sp, #40	; 0x28
 8008742:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008746:	ab09      	add	r3, sp, #36	; 0x24
 8008748:	ec49 8b10 	vmov	d0, r8, r9
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	6022      	str	r2, [r4, #0]
 8008750:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008754:	4628      	mov	r0, r5
 8008756:	f7ff fecd 	bl	80084f4 <__cvt>
 800875a:	9b06      	ldr	r3, [sp, #24]
 800875c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800875e:	2b47      	cmp	r3, #71	; 0x47
 8008760:	4680      	mov	r8, r0
 8008762:	d108      	bne.n	8008776 <_printf_float+0x142>
 8008764:	1cc8      	adds	r0, r1, #3
 8008766:	db02      	blt.n	800876e <_printf_float+0x13a>
 8008768:	6863      	ldr	r3, [r4, #4]
 800876a:	4299      	cmp	r1, r3
 800876c:	dd41      	ble.n	80087f2 <_printf_float+0x1be>
 800876e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008772:	fa5f fb8b 	uxtb.w	fp, fp
 8008776:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800877a:	d820      	bhi.n	80087be <_printf_float+0x18a>
 800877c:	3901      	subs	r1, #1
 800877e:	465a      	mov	r2, fp
 8008780:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008784:	9109      	str	r1, [sp, #36]	; 0x24
 8008786:	f7ff ff17 	bl	80085b8 <__exponent>
 800878a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800878c:	1813      	adds	r3, r2, r0
 800878e:	2a01      	cmp	r2, #1
 8008790:	4681      	mov	r9, r0
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	dc02      	bgt.n	800879c <_printf_float+0x168>
 8008796:	6822      	ldr	r2, [r4, #0]
 8008798:	07d2      	lsls	r2, r2, #31
 800879a:	d501      	bpl.n	80087a0 <_printf_float+0x16c>
 800879c:	3301      	adds	r3, #1
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d09c      	beq.n	80086e2 <_printf_float+0xae>
 80087a8:	232d      	movs	r3, #45	; 0x2d
 80087aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ae:	e798      	b.n	80086e2 <_printf_float+0xae>
 80087b0:	9a06      	ldr	r2, [sp, #24]
 80087b2:	2a47      	cmp	r2, #71	; 0x47
 80087b4:	d1be      	bne.n	8008734 <_printf_float+0x100>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1bc      	bne.n	8008734 <_printf_float+0x100>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e7b9      	b.n	8008732 <_printf_float+0xfe>
 80087be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087c2:	d118      	bne.n	80087f6 <_printf_float+0x1c2>
 80087c4:	2900      	cmp	r1, #0
 80087c6:	6863      	ldr	r3, [r4, #4]
 80087c8:	dd0b      	ble.n	80087e2 <_printf_float+0x1ae>
 80087ca:	6121      	str	r1, [r4, #16]
 80087cc:	b913      	cbnz	r3, 80087d4 <_printf_float+0x1a0>
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	07d0      	lsls	r0, r2, #31
 80087d2:	d502      	bpl.n	80087da <_printf_float+0x1a6>
 80087d4:	3301      	adds	r3, #1
 80087d6:	440b      	add	r3, r1
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	65a1      	str	r1, [r4, #88]	; 0x58
 80087dc:	f04f 0900 	mov.w	r9, #0
 80087e0:	e7de      	b.n	80087a0 <_printf_float+0x16c>
 80087e2:	b913      	cbnz	r3, 80087ea <_printf_float+0x1b6>
 80087e4:	6822      	ldr	r2, [r4, #0]
 80087e6:	07d2      	lsls	r2, r2, #31
 80087e8:	d501      	bpl.n	80087ee <_printf_float+0x1ba>
 80087ea:	3302      	adds	r3, #2
 80087ec:	e7f4      	b.n	80087d8 <_printf_float+0x1a4>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e7f2      	b.n	80087d8 <_printf_float+0x1a4>
 80087f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f8:	4299      	cmp	r1, r3
 80087fa:	db05      	blt.n	8008808 <_printf_float+0x1d4>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	6121      	str	r1, [r4, #16]
 8008800:	07d8      	lsls	r0, r3, #31
 8008802:	d5ea      	bpl.n	80087da <_printf_float+0x1a6>
 8008804:	1c4b      	adds	r3, r1, #1
 8008806:	e7e7      	b.n	80087d8 <_printf_float+0x1a4>
 8008808:	2900      	cmp	r1, #0
 800880a:	bfd4      	ite	le
 800880c:	f1c1 0202 	rsble	r2, r1, #2
 8008810:	2201      	movgt	r2, #1
 8008812:	4413      	add	r3, r2
 8008814:	e7e0      	b.n	80087d8 <_printf_float+0x1a4>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	055a      	lsls	r2, r3, #21
 800881a:	d407      	bmi.n	800882c <_printf_float+0x1f8>
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	4642      	mov	r2, r8
 8008820:	4631      	mov	r1, r6
 8008822:	4628      	mov	r0, r5
 8008824:	47b8      	blx	r7
 8008826:	3001      	adds	r0, #1
 8008828:	d12c      	bne.n	8008884 <_printf_float+0x250>
 800882a:	e764      	b.n	80086f6 <_printf_float+0xc2>
 800882c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008830:	f240 80e0 	bls.w	80089f4 <_printf_float+0x3c0>
 8008834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008838:	2200      	movs	r2, #0
 800883a:	2300      	movs	r3, #0
 800883c:	f7f8 f99c 	bl	8000b78 <__aeabi_dcmpeq>
 8008840:	2800      	cmp	r0, #0
 8008842:	d034      	beq.n	80088ae <_printf_float+0x27a>
 8008844:	4a37      	ldr	r2, [pc, #220]	; (8008924 <_printf_float+0x2f0>)
 8008846:	2301      	movs	r3, #1
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f af51 	beq.w	80086f6 <_printf_float+0xc2>
 8008854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008858:	429a      	cmp	r2, r3
 800885a:	db02      	blt.n	8008862 <_printf_float+0x22e>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	07d8      	lsls	r0, r3, #31
 8008860:	d510      	bpl.n	8008884 <_printf_float+0x250>
 8008862:	ee18 3a10 	vmov	r3, s16
 8008866:	4652      	mov	r2, sl
 8008868:	4631      	mov	r1, r6
 800886a:	4628      	mov	r0, r5
 800886c:	47b8      	blx	r7
 800886e:	3001      	adds	r0, #1
 8008870:	f43f af41 	beq.w	80086f6 <_printf_float+0xc2>
 8008874:	f04f 0800 	mov.w	r8, #0
 8008878:	f104 091a 	add.w	r9, r4, #26
 800887c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800887e:	3b01      	subs	r3, #1
 8008880:	4543      	cmp	r3, r8
 8008882:	dc09      	bgt.n	8008898 <_printf_float+0x264>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	079b      	lsls	r3, r3, #30
 8008888:	f100 8105 	bmi.w	8008a96 <_printf_float+0x462>
 800888c:	68e0      	ldr	r0, [r4, #12]
 800888e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008890:	4298      	cmp	r0, r3
 8008892:	bfb8      	it	lt
 8008894:	4618      	movlt	r0, r3
 8008896:	e730      	b.n	80086fa <_printf_float+0xc6>
 8008898:	2301      	movs	r3, #1
 800889a:	464a      	mov	r2, r9
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	f43f af27 	beq.w	80086f6 <_printf_float+0xc2>
 80088a8:	f108 0801 	add.w	r8, r8, #1
 80088ac:	e7e6      	b.n	800887c <_printf_float+0x248>
 80088ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dc39      	bgt.n	8008928 <_printf_float+0x2f4>
 80088b4:	4a1b      	ldr	r2, [pc, #108]	; (8008924 <_printf_float+0x2f0>)
 80088b6:	2301      	movs	r3, #1
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f af19 	beq.w	80086f6 <_printf_float+0xc2>
 80088c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088c8:	4313      	orrs	r3, r2
 80088ca:	d102      	bne.n	80088d2 <_printf_float+0x29e>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	07d9      	lsls	r1, r3, #31
 80088d0:	d5d8      	bpl.n	8008884 <_printf_float+0x250>
 80088d2:	ee18 3a10 	vmov	r3, s16
 80088d6:	4652      	mov	r2, sl
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	47b8      	blx	r7
 80088de:	3001      	adds	r0, #1
 80088e0:	f43f af09 	beq.w	80086f6 <_printf_float+0xc2>
 80088e4:	f04f 0900 	mov.w	r9, #0
 80088e8:	f104 0a1a 	add.w	sl, r4, #26
 80088ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ee:	425b      	negs	r3, r3
 80088f0:	454b      	cmp	r3, r9
 80088f2:	dc01      	bgt.n	80088f8 <_printf_float+0x2c4>
 80088f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f6:	e792      	b.n	800881e <_printf_float+0x1ea>
 80088f8:	2301      	movs	r3, #1
 80088fa:	4652      	mov	r2, sl
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f aef7 	beq.w	80086f6 <_printf_float+0xc2>
 8008908:	f109 0901 	add.w	r9, r9, #1
 800890c:	e7ee      	b.n	80088ec <_printf_float+0x2b8>
 800890e:	bf00      	nop
 8008910:	7fefffff 	.word	0x7fefffff
 8008914:	0800b348 	.word	0x0800b348
 8008918:	0800b34c 	.word	0x0800b34c
 800891c:	0800b354 	.word	0x0800b354
 8008920:	0800b350 	.word	0x0800b350
 8008924:	0800b358 	.word	0x0800b358
 8008928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800892a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800892c:	429a      	cmp	r2, r3
 800892e:	bfa8      	it	ge
 8008930:	461a      	movge	r2, r3
 8008932:	2a00      	cmp	r2, #0
 8008934:	4691      	mov	r9, r2
 8008936:	dc37      	bgt.n	80089a8 <_printf_float+0x374>
 8008938:	f04f 0b00 	mov.w	fp, #0
 800893c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008940:	f104 021a 	add.w	r2, r4, #26
 8008944:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008946:	9305      	str	r3, [sp, #20]
 8008948:	eba3 0309 	sub.w	r3, r3, r9
 800894c:	455b      	cmp	r3, fp
 800894e:	dc33      	bgt.n	80089b8 <_printf_float+0x384>
 8008950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008954:	429a      	cmp	r2, r3
 8008956:	db3b      	blt.n	80089d0 <_printf_float+0x39c>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	07da      	lsls	r2, r3, #31
 800895c:	d438      	bmi.n	80089d0 <_printf_float+0x39c>
 800895e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008960:	9b05      	ldr	r3, [sp, #20]
 8008962:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	eba2 0901 	sub.w	r9, r2, r1
 800896a:	4599      	cmp	r9, r3
 800896c:	bfa8      	it	ge
 800896e:	4699      	movge	r9, r3
 8008970:	f1b9 0f00 	cmp.w	r9, #0
 8008974:	dc35      	bgt.n	80089e2 <_printf_float+0x3ae>
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800897e:	f104 0a1a 	add.w	sl, r4, #26
 8008982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	eba3 0309 	sub.w	r3, r3, r9
 800898c:	4543      	cmp	r3, r8
 800898e:	f77f af79 	ble.w	8008884 <_printf_float+0x250>
 8008992:	2301      	movs	r3, #1
 8008994:	4652      	mov	r2, sl
 8008996:	4631      	mov	r1, r6
 8008998:	4628      	mov	r0, r5
 800899a:	47b8      	blx	r7
 800899c:	3001      	adds	r0, #1
 800899e:	f43f aeaa 	beq.w	80086f6 <_printf_float+0xc2>
 80089a2:	f108 0801 	add.w	r8, r8, #1
 80089a6:	e7ec      	b.n	8008982 <_printf_float+0x34e>
 80089a8:	4613      	mov	r3, r2
 80089aa:	4631      	mov	r1, r6
 80089ac:	4642      	mov	r2, r8
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b8      	blx	r7
 80089b2:	3001      	adds	r0, #1
 80089b4:	d1c0      	bne.n	8008938 <_printf_float+0x304>
 80089b6:	e69e      	b.n	80086f6 <_printf_float+0xc2>
 80089b8:	2301      	movs	r3, #1
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	9205      	str	r2, [sp, #20]
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f ae97 	beq.w	80086f6 <_printf_float+0xc2>
 80089c8:	9a05      	ldr	r2, [sp, #20]
 80089ca:	f10b 0b01 	add.w	fp, fp, #1
 80089ce:	e7b9      	b.n	8008944 <_printf_float+0x310>
 80089d0:	ee18 3a10 	vmov	r3, s16
 80089d4:	4652      	mov	r2, sl
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	d1be      	bne.n	800895e <_printf_float+0x32a>
 80089e0:	e689      	b.n	80086f6 <_printf_float+0xc2>
 80089e2:	9a05      	ldr	r2, [sp, #20]
 80089e4:	464b      	mov	r3, r9
 80089e6:	4442      	add	r2, r8
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	d1c1      	bne.n	8008976 <_printf_float+0x342>
 80089f2:	e680      	b.n	80086f6 <_printf_float+0xc2>
 80089f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089f6:	2a01      	cmp	r2, #1
 80089f8:	dc01      	bgt.n	80089fe <_printf_float+0x3ca>
 80089fa:	07db      	lsls	r3, r3, #31
 80089fc:	d538      	bpl.n	8008a70 <_printf_float+0x43c>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4642      	mov	r2, r8
 8008a02:	4631      	mov	r1, r6
 8008a04:	4628      	mov	r0, r5
 8008a06:	47b8      	blx	r7
 8008a08:	3001      	adds	r0, #1
 8008a0a:	f43f ae74 	beq.w	80086f6 <_printf_float+0xc2>
 8008a0e:	ee18 3a10 	vmov	r3, s16
 8008a12:	4652      	mov	r2, sl
 8008a14:	4631      	mov	r1, r6
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b8      	blx	r7
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	f43f ae6b 	beq.w	80086f6 <_printf_float+0xc2>
 8008a20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a24:	2200      	movs	r2, #0
 8008a26:	2300      	movs	r3, #0
 8008a28:	f7f8 f8a6 	bl	8000b78 <__aeabi_dcmpeq>
 8008a2c:	b9d8      	cbnz	r0, 8008a66 <_printf_float+0x432>
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a30:	f108 0201 	add.w	r2, r8, #1
 8008a34:	3b01      	subs	r3, #1
 8008a36:	4631      	mov	r1, r6
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b8      	blx	r7
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d10e      	bne.n	8008a5e <_printf_float+0x42a>
 8008a40:	e659      	b.n	80086f6 <_printf_float+0xc2>
 8008a42:	2301      	movs	r3, #1
 8008a44:	4652      	mov	r2, sl
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b8      	blx	r7
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f43f ae52 	beq.w	80086f6 <_printf_float+0xc2>
 8008a52:	f108 0801 	add.w	r8, r8, #1
 8008a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	4543      	cmp	r3, r8
 8008a5c:	dcf1      	bgt.n	8008a42 <_printf_float+0x40e>
 8008a5e:	464b      	mov	r3, r9
 8008a60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a64:	e6dc      	b.n	8008820 <_printf_float+0x1ec>
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	f104 0a1a 	add.w	sl, r4, #26
 8008a6e:	e7f2      	b.n	8008a56 <_printf_float+0x422>
 8008a70:	2301      	movs	r3, #1
 8008a72:	4642      	mov	r2, r8
 8008a74:	e7df      	b.n	8008a36 <_printf_float+0x402>
 8008a76:	2301      	movs	r3, #1
 8008a78:	464a      	mov	r2, r9
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	f43f ae38 	beq.w	80086f6 <_printf_float+0xc2>
 8008a86:	f108 0801 	add.w	r8, r8, #1
 8008a8a:	68e3      	ldr	r3, [r4, #12]
 8008a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a8e:	1a5b      	subs	r3, r3, r1
 8008a90:	4543      	cmp	r3, r8
 8008a92:	dcf0      	bgt.n	8008a76 <_printf_float+0x442>
 8008a94:	e6fa      	b.n	800888c <_printf_float+0x258>
 8008a96:	f04f 0800 	mov.w	r8, #0
 8008a9a:	f104 0919 	add.w	r9, r4, #25
 8008a9e:	e7f4      	b.n	8008a8a <_printf_float+0x456>

08008aa0 <_printf_common>:
 8008aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa4:	4616      	mov	r6, r2
 8008aa6:	4699      	mov	r9, r3
 8008aa8:	688a      	ldr	r2, [r1, #8]
 8008aaa:	690b      	ldr	r3, [r1, #16]
 8008aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	bfb8      	it	lt
 8008ab4:	4613      	movlt	r3, r2
 8008ab6:	6033      	str	r3, [r6, #0]
 8008ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008abc:	4607      	mov	r7, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	b10a      	cbz	r2, 8008ac6 <_printf_common+0x26>
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	6033      	str	r3, [r6, #0]
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	0699      	lsls	r1, r3, #26
 8008aca:	bf42      	ittt	mi
 8008acc:	6833      	ldrmi	r3, [r6, #0]
 8008ace:	3302      	addmi	r3, #2
 8008ad0:	6033      	strmi	r3, [r6, #0]
 8008ad2:	6825      	ldr	r5, [r4, #0]
 8008ad4:	f015 0506 	ands.w	r5, r5, #6
 8008ad8:	d106      	bne.n	8008ae8 <_printf_common+0x48>
 8008ada:	f104 0a19 	add.w	sl, r4, #25
 8008ade:	68e3      	ldr	r3, [r4, #12]
 8008ae0:	6832      	ldr	r2, [r6, #0]
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	42ab      	cmp	r3, r5
 8008ae6:	dc26      	bgt.n	8008b36 <_printf_common+0x96>
 8008ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008aec:	1e13      	subs	r3, r2, #0
 8008aee:	6822      	ldr	r2, [r4, #0]
 8008af0:	bf18      	it	ne
 8008af2:	2301      	movne	r3, #1
 8008af4:	0692      	lsls	r2, r2, #26
 8008af6:	d42b      	bmi.n	8008b50 <_printf_common+0xb0>
 8008af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008afc:	4649      	mov	r1, r9
 8008afe:	4638      	mov	r0, r7
 8008b00:	47c0      	blx	r8
 8008b02:	3001      	adds	r0, #1
 8008b04:	d01e      	beq.n	8008b44 <_printf_common+0xa4>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	68e5      	ldr	r5, [r4, #12]
 8008b0a:	6832      	ldr	r2, [r6, #0]
 8008b0c:	f003 0306 	and.w	r3, r3, #6
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	bf08      	it	eq
 8008b14:	1aad      	subeq	r5, r5, r2
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	6922      	ldr	r2, [r4, #16]
 8008b1a:	bf0c      	ite	eq
 8008b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b20:	2500      	movne	r5, #0
 8008b22:	4293      	cmp	r3, r2
 8008b24:	bfc4      	itt	gt
 8008b26:	1a9b      	subgt	r3, r3, r2
 8008b28:	18ed      	addgt	r5, r5, r3
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	341a      	adds	r4, #26
 8008b2e:	42b5      	cmp	r5, r6
 8008b30:	d11a      	bne.n	8008b68 <_printf_common+0xc8>
 8008b32:	2000      	movs	r0, #0
 8008b34:	e008      	b.n	8008b48 <_printf_common+0xa8>
 8008b36:	2301      	movs	r3, #1
 8008b38:	4652      	mov	r2, sl
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	47c0      	blx	r8
 8008b40:	3001      	adds	r0, #1
 8008b42:	d103      	bne.n	8008b4c <_printf_common+0xac>
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	e7c6      	b.n	8008ade <_printf_common+0x3e>
 8008b50:	18e1      	adds	r1, r4, r3
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	2030      	movs	r0, #48	; 0x30
 8008b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b5a:	4422      	add	r2, r4
 8008b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b64:	3302      	adds	r3, #2
 8008b66:	e7c7      	b.n	8008af8 <_printf_common+0x58>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	4638      	mov	r0, r7
 8008b70:	47c0      	blx	r8
 8008b72:	3001      	adds	r0, #1
 8008b74:	d0e6      	beq.n	8008b44 <_printf_common+0xa4>
 8008b76:	3601      	adds	r6, #1
 8008b78:	e7d9      	b.n	8008b2e <_printf_common+0x8e>
	...

08008b7c <_printf_i>:
 8008b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	460c      	mov	r4, r1
 8008b82:	4691      	mov	r9, r2
 8008b84:	7e27      	ldrb	r7, [r4, #24]
 8008b86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b88:	2f78      	cmp	r7, #120	; 0x78
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	469a      	mov	sl, r3
 8008b8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b92:	d807      	bhi.n	8008ba4 <_printf_i+0x28>
 8008b94:	2f62      	cmp	r7, #98	; 0x62
 8008b96:	d80a      	bhi.n	8008bae <_printf_i+0x32>
 8008b98:	2f00      	cmp	r7, #0
 8008b9a:	f000 80d8 	beq.w	8008d4e <_printf_i+0x1d2>
 8008b9e:	2f58      	cmp	r7, #88	; 0x58
 8008ba0:	f000 80a3 	beq.w	8008cea <_printf_i+0x16e>
 8008ba4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bac:	e03a      	b.n	8008c24 <_printf_i+0xa8>
 8008bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bb2:	2b15      	cmp	r3, #21
 8008bb4:	d8f6      	bhi.n	8008ba4 <_printf_i+0x28>
 8008bb6:	a001      	add	r0, pc, #4	; (adr r0, 8008bbc <_printf_i+0x40>)
 8008bb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008bbc:	08008c15 	.word	0x08008c15
 8008bc0:	08008c29 	.word	0x08008c29
 8008bc4:	08008ba5 	.word	0x08008ba5
 8008bc8:	08008ba5 	.word	0x08008ba5
 8008bcc:	08008ba5 	.word	0x08008ba5
 8008bd0:	08008ba5 	.word	0x08008ba5
 8008bd4:	08008c29 	.word	0x08008c29
 8008bd8:	08008ba5 	.word	0x08008ba5
 8008bdc:	08008ba5 	.word	0x08008ba5
 8008be0:	08008ba5 	.word	0x08008ba5
 8008be4:	08008ba5 	.word	0x08008ba5
 8008be8:	08008d35 	.word	0x08008d35
 8008bec:	08008c59 	.word	0x08008c59
 8008bf0:	08008d17 	.word	0x08008d17
 8008bf4:	08008ba5 	.word	0x08008ba5
 8008bf8:	08008ba5 	.word	0x08008ba5
 8008bfc:	08008d57 	.word	0x08008d57
 8008c00:	08008ba5 	.word	0x08008ba5
 8008c04:	08008c59 	.word	0x08008c59
 8008c08:	08008ba5 	.word	0x08008ba5
 8008c0c:	08008ba5 	.word	0x08008ba5
 8008c10:	08008d1f 	.word	0x08008d1f
 8008c14:	680b      	ldr	r3, [r1, #0]
 8008c16:	1d1a      	adds	r2, r3, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	600a      	str	r2, [r1, #0]
 8008c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0a3      	b.n	8008d70 <_printf_i+0x1f4>
 8008c28:	6825      	ldr	r5, [r4, #0]
 8008c2a:	6808      	ldr	r0, [r1, #0]
 8008c2c:	062e      	lsls	r6, r5, #24
 8008c2e:	f100 0304 	add.w	r3, r0, #4
 8008c32:	d50a      	bpl.n	8008c4a <_printf_i+0xce>
 8008c34:	6805      	ldr	r5, [r0, #0]
 8008c36:	600b      	str	r3, [r1, #0]
 8008c38:	2d00      	cmp	r5, #0
 8008c3a:	da03      	bge.n	8008c44 <_printf_i+0xc8>
 8008c3c:	232d      	movs	r3, #45	; 0x2d
 8008c3e:	426d      	negs	r5, r5
 8008c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c44:	485e      	ldr	r0, [pc, #376]	; (8008dc0 <_printf_i+0x244>)
 8008c46:	230a      	movs	r3, #10
 8008c48:	e019      	b.n	8008c7e <_printf_i+0x102>
 8008c4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c4e:	6805      	ldr	r5, [r0, #0]
 8008c50:	600b      	str	r3, [r1, #0]
 8008c52:	bf18      	it	ne
 8008c54:	b22d      	sxthne	r5, r5
 8008c56:	e7ef      	b.n	8008c38 <_printf_i+0xbc>
 8008c58:	680b      	ldr	r3, [r1, #0]
 8008c5a:	6825      	ldr	r5, [r4, #0]
 8008c5c:	1d18      	adds	r0, r3, #4
 8008c5e:	6008      	str	r0, [r1, #0]
 8008c60:	0628      	lsls	r0, r5, #24
 8008c62:	d501      	bpl.n	8008c68 <_printf_i+0xec>
 8008c64:	681d      	ldr	r5, [r3, #0]
 8008c66:	e002      	b.n	8008c6e <_printf_i+0xf2>
 8008c68:	0669      	lsls	r1, r5, #25
 8008c6a:	d5fb      	bpl.n	8008c64 <_printf_i+0xe8>
 8008c6c:	881d      	ldrh	r5, [r3, #0]
 8008c6e:	4854      	ldr	r0, [pc, #336]	; (8008dc0 <_printf_i+0x244>)
 8008c70:	2f6f      	cmp	r7, #111	; 0x6f
 8008c72:	bf0c      	ite	eq
 8008c74:	2308      	moveq	r3, #8
 8008c76:	230a      	movne	r3, #10
 8008c78:	2100      	movs	r1, #0
 8008c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c7e:	6866      	ldr	r6, [r4, #4]
 8008c80:	60a6      	str	r6, [r4, #8]
 8008c82:	2e00      	cmp	r6, #0
 8008c84:	bfa2      	ittt	ge
 8008c86:	6821      	ldrge	r1, [r4, #0]
 8008c88:	f021 0104 	bicge.w	r1, r1, #4
 8008c8c:	6021      	strge	r1, [r4, #0]
 8008c8e:	b90d      	cbnz	r5, 8008c94 <_printf_i+0x118>
 8008c90:	2e00      	cmp	r6, #0
 8008c92:	d04d      	beq.n	8008d30 <_printf_i+0x1b4>
 8008c94:	4616      	mov	r6, r2
 8008c96:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c9a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c9e:	5dc7      	ldrb	r7, [r0, r7]
 8008ca0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ca4:	462f      	mov	r7, r5
 8008ca6:	42bb      	cmp	r3, r7
 8008ca8:	460d      	mov	r5, r1
 8008caa:	d9f4      	bls.n	8008c96 <_printf_i+0x11a>
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d10b      	bne.n	8008cc8 <_printf_i+0x14c>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	07df      	lsls	r7, r3, #31
 8008cb4:	d508      	bpl.n	8008cc8 <_printf_i+0x14c>
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	6861      	ldr	r1, [r4, #4]
 8008cba:	4299      	cmp	r1, r3
 8008cbc:	bfde      	ittt	le
 8008cbe:	2330      	movle	r3, #48	; 0x30
 8008cc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cc8:	1b92      	subs	r2, r2, r6
 8008cca:	6122      	str	r2, [r4, #16]
 8008ccc:	f8cd a000 	str.w	sl, [sp]
 8008cd0:	464b      	mov	r3, r9
 8008cd2:	aa03      	add	r2, sp, #12
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	f7ff fee2 	bl	8008aa0 <_printf_common>
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d14c      	bne.n	8008d7a <_printf_i+0x1fe>
 8008ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce4:	b004      	add	sp, #16
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	4835      	ldr	r0, [pc, #212]	; (8008dc0 <_printf_i+0x244>)
 8008cec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	680e      	ldr	r6, [r1, #0]
 8008cf4:	061f      	lsls	r7, r3, #24
 8008cf6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008cfa:	600e      	str	r6, [r1, #0]
 8008cfc:	d514      	bpl.n	8008d28 <_printf_i+0x1ac>
 8008cfe:	07d9      	lsls	r1, r3, #31
 8008d00:	bf44      	itt	mi
 8008d02:	f043 0320 	orrmi.w	r3, r3, #32
 8008d06:	6023      	strmi	r3, [r4, #0]
 8008d08:	b91d      	cbnz	r5, 8008d12 <_printf_i+0x196>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	f023 0320 	bic.w	r3, r3, #32
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	2310      	movs	r3, #16
 8008d14:	e7b0      	b.n	8008c78 <_printf_i+0xfc>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f043 0320 	orr.w	r3, r3, #32
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	2378      	movs	r3, #120	; 0x78
 8008d20:	4828      	ldr	r0, [pc, #160]	; (8008dc4 <_printf_i+0x248>)
 8008d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d26:	e7e3      	b.n	8008cf0 <_printf_i+0x174>
 8008d28:	065e      	lsls	r6, r3, #25
 8008d2a:	bf48      	it	mi
 8008d2c:	b2ad      	uxthmi	r5, r5
 8008d2e:	e7e6      	b.n	8008cfe <_printf_i+0x182>
 8008d30:	4616      	mov	r6, r2
 8008d32:	e7bb      	b.n	8008cac <_printf_i+0x130>
 8008d34:	680b      	ldr	r3, [r1, #0]
 8008d36:	6826      	ldr	r6, [r4, #0]
 8008d38:	6960      	ldr	r0, [r4, #20]
 8008d3a:	1d1d      	adds	r5, r3, #4
 8008d3c:	600d      	str	r5, [r1, #0]
 8008d3e:	0635      	lsls	r5, r6, #24
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	d501      	bpl.n	8008d48 <_printf_i+0x1cc>
 8008d44:	6018      	str	r0, [r3, #0]
 8008d46:	e002      	b.n	8008d4e <_printf_i+0x1d2>
 8008d48:	0671      	lsls	r1, r6, #25
 8008d4a:	d5fb      	bpl.n	8008d44 <_printf_i+0x1c8>
 8008d4c:	8018      	strh	r0, [r3, #0]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	4616      	mov	r6, r2
 8008d54:	e7ba      	b.n	8008ccc <_printf_i+0x150>
 8008d56:	680b      	ldr	r3, [r1, #0]
 8008d58:	1d1a      	adds	r2, r3, #4
 8008d5a:	600a      	str	r2, [r1, #0]
 8008d5c:	681e      	ldr	r6, [r3, #0]
 8008d5e:	6862      	ldr	r2, [r4, #4]
 8008d60:	2100      	movs	r1, #0
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7f7 fa94 	bl	8000290 <memchr>
 8008d68:	b108      	cbz	r0, 8008d6e <_printf_i+0x1f2>
 8008d6a:	1b80      	subs	r0, r0, r6
 8008d6c:	6060      	str	r0, [r4, #4]
 8008d6e:	6863      	ldr	r3, [r4, #4]
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	2300      	movs	r3, #0
 8008d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d78:	e7a8      	b.n	8008ccc <_printf_i+0x150>
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	47d0      	blx	sl
 8008d84:	3001      	adds	r0, #1
 8008d86:	d0ab      	beq.n	8008ce0 <_printf_i+0x164>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	079b      	lsls	r3, r3, #30
 8008d8c:	d413      	bmi.n	8008db6 <_printf_i+0x23a>
 8008d8e:	68e0      	ldr	r0, [r4, #12]
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	4298      	cmp	r0, r3
 8008d94:	bfb8      	it	lt
 8008d96:	4618      	movlt	r0, r3
 8008d98:	e7a4      	b.n	8008ce4 <_printf_i+0x168>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4632      	mov	r2, r6
 8008d9e:	4649      	mov	r1, r9
 8008da0:	4640      	mov	r0, r8
 8008da2:	47d0      	blx	sl
 8008da4:	3001      	adds	r0, #1
 8008da6:	d09b      	beq.n	8008ce0 <_printf_i+0x164>
 8008da8:	3501      	adds	r5, #1
 8008daa:	68e3      	ldr	r3, [r4, #12]
 8008dac:	9903      	ldr	r1, [sp, #12]
 8008dae:	1a5b      	subs	r3, r3, r1
 8008db0:	42ab      	cmp	r3, r5
 8008db2:	dcf2      	bgt.n	8008d9a <_printf_i+0x21e>
 8008db4:	e7eb      	b.n	8008d8e <_printf_i+0x212>
 8008db6:	2500      	movs	r5, #0
 8008db8:	f104 0619 	add.w	r6, r4, #25
 8008dbc:	e7f5      	b.n	8008daa <_printf_i+0x22e>
 8008dbe:	bf00      	nop
 8008dc0:	0800b35a 	.word	0x0800b35a
 8008dc4:	0800b36b 	.word	0x0800b36b

08008dc8 <siprintf>:
 8008dc8:	b40e      	push	{r1, r2, r3}
 8008dca:	b500      	push	{lr}
 8008dcc:	b09c      	sub	sp, #112	; 0x70
 8008dce:	ab1d      	add	r3, sp, #116	; 0x74
 8008dd0:	9002      	str	r0, [sp, #8]
 8008dd2:	9006      	str	r0, [sp, #24]
 8008dd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dd8:	4809      	ldr	r0, [pc, #36]	; (8008e00 <siprintf+0x38>)
 8008dda:	9107      	str	r1, [sp, #28]
 8008ddc:	9104      	str	r1, [sp, #16]
 8008dde:	4909      	ldr	r1, [pc, #36]	; (8008e04 <siprintf+0x3c>)
 8008de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de4:	9105      	str	r1, [sp, #20]
 8008de6:	6800      	ldr	r0, [r0, #0]
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	a902      	add	r1, sp, #8
 8008dec:	f001 fb24 	bl	800a438 <_svfiprintf_r>
 8008df0:	9b02      	ldr	r3, [sp, #8]
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	b01c      	add	sp, #112	; 0x70
 8008df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dfc:	b003      	add	sp, #12
 8008dfe:	4770      	bx	lr
 8008e00:	20000010 	.word	0x20000010
 8008e04:	ffff0208 	.word	0xffff0208

08008e08 <quorem>:
 8008e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	6903      	ldr	r3, [r0, #16]
 8008e0e:	690c      	ldr	r4, [r1, #16]
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	4607      	mov	r7, r0
 8008e14:	f2c0 8081 	blt.w	8008f1a <quorem+0x112>
 8008e18:	3c01      	subs	r4, #1
 8008e1a:	f101 0814 	add.w	r8, r1, #20
 8008e1e:	f100 0514 	add.w	r5, r0, #20
 8008e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e30:	3301      	adds	r3, #1
 8008e32:	429a      	cmp	r2, r3
 8008e34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e40:	d331      	bcc.n	8008ea6 <quorem+0x9e>
 8008e42:	f04f 0e00 	mov.w	lr, #0
 8008e46:	4640      	mov	r0, r8
 8008e48:	46ac      	mov	ip, r5
 8008e4a:	46f2      	mov	sl, lr
 8008e4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e50:	b293      	uxth	r3, r2
 8008e52:	fb06 e303 	mla	r3, r6, r3, lr
 8008e56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	ebaa 0303 	sub.w	r3, sl, r3
 8008e60:	0c12      	lsrs	r2, r2, #16
 8008e62:	f8dc a000 	ldr.w	sl, [ip]
 8008e66:	fb06 e202 	mla	r2, r6, r2, lr
 8008e6a:	fa13 f38a 	uxtah	r3, r3, sl
 8008e6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e72:	fa1f fa82 	uxth.w	sl, r2
 8008e76:	f8dc 2000 	ldr.w	r2, [ip]
 8008e7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008e7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e88:	4581      	cmp	r9, r0
 8008e8a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e92:	d2db      	bcs.n	8008e4c <quorem+0x44>
 8008e94:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e98:	b92b      	cbnz	r3, 8008ea6 <quorem+0x9e>
 8008e9a:	9b01      	ldr	r3, [sp, #4]
 8008e9c:	3b04      	subs	r3, #4
 8008e9e:	429d      	cmp	r5, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	d32e      	bcc.n	8008f02 <quorem+0xfa>
 8008ea4:	613c      	str	r4, [r7, #16]
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f001 f8b0 	bl	800a00c <__mcmp>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	db24      	blt.n	8008efa <quorem+0xf2>
 8008eb0:	3601      	adds	r6, #1
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f04f 0c00 	mov.w	ip, #0
 8008eb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ebc:	f8d0 e000 	ldr.w	lr, [r0]
 8008ec0:	b293      	uxth	r3, r2
 8008ec2:	ebac 0303 	sub.w	r3, ip, r3
 8008ec6:	0c12      	lsrs	r2, r2, #16
 8008ec8:	fa13 f38e 	uxtah	r3, r3, lr
 8008ecc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eda:	45c1      	cmp	r9, r8
 8008edc:	f840 3b04 	str.w	r3, [r0], #4
 8008ee0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ee4:	d2e8      	bcs.n	8008eb8 <quorem+0xb0>
 8008ee6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eee:	b922      	cbnz	r2, 8008efa <quorem+0xf2>
 8008ef0:	3b04      	subs	r3, #4
 8008ef2:	429d      	cmp	r5, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	d30a      	bcc.n	8008f0e <quorem+0x106>
 8008ef8:	613c      	str	r4, [r7, #16]
 8008efa:	4630      	mov	r0, r6
 8008efc:	b003      	add	sp, #12
 8008efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f02:	6812      	ldr	r2, [r2, #0]
 8008f04:	3b04      	subs	r3, #4
 8008f06:	2a00      	cmp	r2, #0
 8008f08:	d1cc      	bne.n	8008ea4 <quorem+0x9c>
 8008f0a:	3c01      	subs	r4, #1
 8008f0c:	e7c7      	b.n	8008e9e <quorem+0x96>
 8008f0e:	6812      	ldr	r2, [r2, #0]
 8008f10:	3b04      	subs	r3, #4
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	d1f0      	bne.n	8008ef8 <quorem+0xf0>
 8008f16:	3c01      	subs	r4, #1
 8008f18:	e7eb      	b.n	8008ef2 <quorem+0xea>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e7ee      	b.n	8008efc <quorem+0xf4>
	...

08008f20 <_dtoa_r>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	ed2d 8b02 	vpush	{d8}
 8008f28:	ec57 6b10 	vmov	r6, r7, d0
 8008f2c:	b095      	sub	sp, #84	; 0x54
 8008f2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f34:	9105      	str	r1, [sp, #20]
 8008f36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f40:	b975      	cbnz	r5, 8008f60 <_dtoa_r+0x40>
 8008f42:	2010      	movs	r0, #16
 8008f44:	f000 fddc 	bl	8009b00 <malloc>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	6260      	str	r0, [r4, #36]	; 0x24
 8008f4c:	b920      	cbnz	r0, 8008f58 <_dtoa_r+0x38>
 8008f4e:	4bb2      	ldr	r3, [pc, #712]	; (8009218 <_dtoa_r+0x2f8>)
 8008f50:	21ea      	movs	r1, #234	; 0xea
 8008f52:	48b2      	ldr	r0, [pc, #712]	; (800921c <_dtoa_r+0x2fc>)
 8008f54:	f001 fb80 	bl	800a658 <__assert_func>
 8008f58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f5c:	6005      	str	r5, [r0, #0]
 8008f5e:	60c5      	str	r5, [r0, #12]
 8008f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f62:	6819      	ldr	r1, [r3, #0]
 8008f64:	b151      	cbz	r1, 8008f7c <_dtoa_r+0x5c>
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	604a      	str	r2, [r1, #4]
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4093      	lsls	r3, r2
 8008f6e:	608b      	str	r3, [r1, #8]
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fe0d 	bl	8009b90 <_Bfree>
 8008f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	1e3b      	subs	r3, r7, #0
 8008f7e:	bfb9      	ittee	lt
 8008f80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f84:	9303      	strlt	r3, [sp, #12]
 8008f86:	2300      	movge	r3, #0
 8008f88:	f8c8 3000 	strge.w	r3, [r8]
 8008f8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008f90:	4ba3      	ldr	r3, [pc, #652]	; (8009220 <_dtoa_r+0x300>)
 8008f92:	bfbc      	itt	lt
 8008f94:	2201      	movlt	r2, #1
 8008f96:	f8c8 2000 	strlt.w	r2, [r8]
 8008f9a:	ea33 0309 	bics.w	r3, r3, r9
 8008f9e:	d11b      	bne.n	8008fd8 <_dtoa_r+0xb8>
 8008fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fac:	4333      	orrs	r3, r6
 8008fae:	f000 857a 	beq.w	8009aa6 <_dtoa_r+0xb86>
 8008fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fb4:	b963      	cbnz	r3, 8008fd0 <_dtoa_r+0xb0>
 8008fb6:	4b9b      	ldr	r3, [pc, #620]	; (8009224 <_dtoa_r+0x304>)
 8008fb8:	e024      	b.n	8009004 <_dtoa_r+0xe4>
 8008fba:	4b9b      	ldr	r3, [pc, #620]	; (8009228 <_dtoa_r+0x308>)
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	9800      	ldr	r0, [sp, #0]
 8008fc6:	b015      	add	sp, #84	; 0x54
 8008fc8:	ecbd 8b02 	vpop	{d8}
 8008fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd0:	4b94      	ldr	r3, [pc, #592]	; (8009224 <_dtoa_r+0x304>)
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	3303      	adds	r3, #3
 8008fd6:	e7f3      	b.n	8008fc0 <_dtoa_r+0xa0>
 8008fd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	ec51 0b17 	vmov	r0, r1, d7
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008fe8:	f7f7 fdc6 	bl	8000b78 <__aeabi_dcmpeq>
 8008fec:	4680      	mov	r8, r0
 8008fee:	b158      	cbz	r0, 8009008 <_dtoa_r+0xe8>
 8008ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8551 	beq.w	8009aa0 <_dtoa_r+0xb80>
 8008ffe:	488b      	ldr	r0, [pc, #556]	; (800922c <_dtoa_r+0x30c>)
 8009000:	6018      	str	r0, [r3, #0]
 8009002:	1e43      	subs	r3, r0, #1
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	e7dd      	b.n	8008fc4 <_dtoa_r+0xa4>
 8009008:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800900c:	aa12      	add	r2, sp, #72	; 0x48
 800900e:	a913      	add	r1, sp, #76	; 0x4c
 8009010:	4620      	mov	r0, r4
 8009012:	f001 f89f 	bl	800a154 <__d2b>
 8009016:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800901a:	4683      	mov	fp, r0
 800901c:	2d00      	cmp	r5, #0
 800901e:	d07c      	beq.n	800911a <_dtoa_r+0x1fa>
 8009020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009022:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800902a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800902e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800903a:	4b7d      	ldr	r3, [pc, #500]	; (8009230 <_dtoa_r+0x310>)
 800903c:	2200      	movs	r2, #0
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	f7f7 f979 	bl	8000338 <__aeabi_dsub>
 8009046:	a36e      	add	r3, pc, #440	; (adr r3, 8009200 <_dtoa_r+0x2e0>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7f7 fb2c 	bl	80006a8 <__aeabi_dmul>
 8009050:	a36d      	add	r3, pc, #436	; (adr r3, 8009208 <_dtoa_r+0x2e8>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 f971 	bl	800033c <__adddf3>
 800905a:	4606      	mov	r6, r0
 800905c:	4628      	mov	r0, r5
 800905e:	460f      	mov	r7, r1
 8009060:	f7f7 fab8 	bl	80005d4 <__aeabi_i2d>
 8009064:	a36a      	add	r3, pc, #424	; (adr r3, 8009210 <_dtoa_r+0x2f0>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 fb1d 	bl	80006a8 <__aeabi_dmul>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4630      	mov	r0, r6
 8009074:	4639      	mov	r1, r7
 8009076:	f7f7 f961 	bl	800033c <__adddf3>
 800907a:	4606      	mov	r6, r0
 800907c:	460f      	mov	r7, r1
 800907e:	f7f7 fdc3 	bl	8000c08 <__aeabi_d2iz>
 8009082:	2200      	movs	r2, #0
 8009084:	4682      	mov	sl, r0
 8009086:	2300      	movs	r3, #0
 8009088:	4630      	mov	r0, r6
 800908a:	4639      	mov	r1, r7
 800908c:	f7f7 fd7e 	bl	8000b8c <__aeabi_dcmplt>
 8009090:	b148      	cbz	r0, 80090a6 <_dtoa_r+0x186>
 8009092:	4650      	mov	r0, sl
 8009094:	f7f7 fa9e 	bl	80005d4 <__aeabi_i2d>
 8009098:	4632      	mov	r2, r6
 800909a:	463b      	mov	r3, r7
 800909c:	f7f7 fd6c 	bl	8000b78 <__aeabi_dcmpeq>
 80090a0:	b908      	cbnz	r0, 80090a6 <_dtoa_r+0x186>
 80090a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090a6:	f1ba 0f16 	cmp.w	sl, #22
 80090aa:	d854      	bhi.n	8009156 <_dtoa_r+0x236>
 80090ac:	4b61      	ldr	r3, [pc, #388]	; (8009234 <_dtoa_r+0x314>)
 80090ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090ba:	f7f7 fd67 	bl	8000b8c <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d04b      	beq.n	800915a <_dtoa_r+0x23a>
 80090c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090c6:	2300      	movs	r3, #0
 80090c8:	930e      	str	r3, [sp, #56]	; 0x38
 80090ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090cc:	1b5d      	subs	r5, r3, r5
 80090ce:	1e6b      	subs	r3, r5, #1
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	bf43      	ittte	mi
 80090d4:	2300      	movmi	r3, #0
 80090d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80090da:	9304      	strmi	r3, [sp, #16]
 80090dc:	f04f 0800 	movpl.w	r8, #0
 80090e0:	f1ba 0f00 	cmp.w	sl, #0
 80090e4:	db3b      	blt.n	800915e <_dtoa_r+0x23e>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80090ec:	4453      	add	r3, sl
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	2300      	movs	r3, #0
 80090f2:	9306      	str	r3, [sp, #24]
 80090f4:	9b05      	ldr	r3, [sp, #20]
 80090f6:	2b09      	cmp	r3, #9
 80090f8:	d869      	bhi.n	80091ce <_dtoa_r+0x2ae>
 80090fa:	2b05      	cmp	r3, #5
 80090fc:	bfc4      	itt	gt
 80090fe:	3b04      	subgt	r3, #4
 8009100:	9305      	strgt	r3, [sp, #20]
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	f1a3 0302 	sub.w	r3, r3, #2
 8009108:	bfcc      	ite	gt
 800910a:	2500      	movgt	r5, #0
 800910c:	2501      	movle	r5, #1
 800910e:	2b03      	cmp	r3, #3
 8009110:	d869      	bhi.n	80091e6 <_dtoa_r+0x2c6>
 8009112:	e8df f003 	tbb	[pc, r3]
 8009116:	4e2c      	.short	0x4e2c
 8009118:	5a4c      	.short	0x5a4c
 800911a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800911e:	441d      	add	r5, r3
 8009120:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009124:	2b20      	cmp	r3, #32
 8009126:	bfc1      	itttt	gt
 8009128:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800912c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009130:	fa09 f303 	lslgt.w	r3, r9, r3
 8009134:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009138:	bfda      	itte	le
 800913a:	f1c3 0320 	rsble	r3, r3, #32
 800913e:	fa06 f003 	lslle.w	r0, r6, r3
 8009142:	4318      	orrgt	r0, r3
 8009144:	f7f7 fa36 	bl	80005b4 <__aeabi_ui2d>
 8009148:	2301      	movs	r3, #1
 800914a:	4606      	mov	r6, r0
 800914c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009150:	3d01      	subs	r5, #1
 8009152:	9310      	str	r3, [sp, #64]	; 0x40
 8009154:	e771      	b.n	800903a <_dtoa_r+0x11a>
 8009156:	2301      	movs	r3, #1
 8009158:	e7b6      	b.n	80090c8 <_dtoa_r+0x1a8>
 800915a:	900e      	str	r0, [sp, #56]	; 0x38
 800915c:	e7b5      	b.n	80090ca <_dtoa_r+0x1aa>
 800915e:	f1ca 0300 	rsb	r3, sl, #0
 8009162:	9306      	str	r3, [sp, #24]
 8009164:	2300      	movs	r3, #0
 8009166:	eba8 080a 	sub.w	r8, r8, sl
 800916a:	930d      	str	r3, [sp, #52]	; 0x34
 800916c:	e7c2      	b.n	80090f4 <_dtoa_r+0x1d4>
 800916e:	2300      	movs	r3, #0
 8009170:	9308      	str	r3, [sp, #32]
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	dc39      	bgt.n	80091ec <_dtoa_r+0x2cc>
 8009178:	f04f 0901 	mov.w	r9, #1
 800917c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009180:	464b      	mov	r3, r9
 8009182:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009186:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009188:	2200      	movs	r2, #0
 800918a:	6042      	str	r2, [r0, #4]
 800918c:	2204      	movs	r2, #4
 800918e:	f102 0614 	add.w	r6, r2, #20
 8009192:	429e      	cmp	r6, r3
 8009194:	6841      	ldr	r1, [r0, #4]
 8009196:	d92f      	bls.n	80091f8 <_dtoa_r+0x2d8>
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fcb9 	bl	8009b10 <_Balloc>
 800919e:	9000      	str	r0, [sp, #0]
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d14b      	bne.n	800923c <_dtoa_r+0x31c>
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <_dtoa_r+0x318>)
 80091a6:	4602      	mov	r2, r0
 80091a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091ac:	e6d1      	b.n	8008f52 <_dtoa_r+0x32>
 80091ae:	2301      	movs	r3, #1
 80091b0:	e7de      	b.n	8009170 <_dtoa_r+0x250>
 80091b2:	2300      	movs	r3, #0
 80091b4:	9308      	str	r3, [sp, #32]
 80091b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b8:	eb0a 0903 	add.w	r9, sl, r3
 80091bc:	f109 0301 	add.w	r3, r9, #1
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	bfb8      	it	lt
 80091c6:	2301      	movlt	r3, #1
 80091c8:	e7dd      	b.n	8009186 <_dtoa_r+0x266>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e7f2      	b.n	80091b4 <_dtoa_r+0x294>
 80091ce:	2501      	movs	r5, #1
 80091d0:	2300      	movs	r3, #0
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	9508      	str	r5, [sp, #32]
 80091d6:	f04f 39ff 	mov.w	r9, #4294967295
 80091da:	2200      	movs	r2, #0
 80091dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80091e0:	2312      	movs	r3, #18
 80091e2:	9209      	str	r2, [sp, #36]	; 0x24
 80091e4:	e7cf      	b.n	8009186 <_dtoa_r+0x266>
 80091e6:	2301      	movs	r3, #1
 80091e8:	9308      	str	r3, [sp, #32]
 80091ea:	e7f4      	b.n	80091d6 <_dtoa_r+0x2b6>
 80091ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80091f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80091f4:	464b      	mov	r3, r9
 80091f6:	e7c6      	b.n	8009186 <_dtoa_r+0x266>
 80091f8:	3101      	adds	r1, #1
 80091fa:	6041      	str	r1, [r0, #4]
 80091fc:	0052      	lsls	r2, r2, #1
 80091fe:	e7c6      	b.n	800918e <_dtoa_r+0x26e>
 8009200:	636f4361 	.word	0x636f4361
 8009204:	3fd287a7 	.word	0x3fd287a7
 8009208:	8b60c8b3 	.word	0x8b60c8b3
 800920c:	3fc68a28 	.word	0x3fc68a28
 8009210:	509f79fb 	.word	0x509f79fb
 8009214:	3fd34413 	.word	0x3fd34413
 8009218:	0800b389 	.word	0x0800b389
 800921c:	0800b3a0 	.word	0x0800b3a0
 8009220:	7ff00000 	.word	0x7ff00000
 8009224:	0800b385 	.word	0x0800b385
 8009228:	0800b37c 	.word	0x0800b37c
 800922c:	0800b359 	.word	0x0800b359
 8009230:	3ff80000 	.word	0x3ff80000
 8009234:	0800b498 	.word	0x0800b498
 8009238:	0800b3ff 	.word	0x0800b3ff
 800923c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800923e:	9a00      	ldr	r2, [sp, #0]
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	9b01      	ldr	r3, [sp, #4]
 8009244:	2b0e      	cmp	r3, #14
 8009246:	f200 80ad 	bhi.w	80093a4 <_dtoa_r+0x484>
 800924a:	2d00      	cmp	r5, #0
 800924c:	f000 80aa 	beq.w	80093a4 <_dtoa_r+0x484>
 8009250:	f1ba 0f00 	cmp.w	sl, #0
 8009254:	dd36      	ble.n	80092c4 <_dtoa_r+0x3a4>
 8009256:	4ac3      	ldr	r2, [pc, #780]	; (8009564 <_dtoa_r+0x644>)
 8009258:	f00a 030f 	and.w	r3, sl, #15
 800925c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009260:	ed93 7b00 	vldr	d7, [r3]
 8009264:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009268:	ea4f 172a 	mov.w	r7, sl, asr #4
 800926c:	eeb0 8a47 	vmov.f32	s16, s14
 8009270:	eef0 8a67 	vmov.f32	s17, s15
 8009274:	d016      	beq.n	80092a4 <_dtoa_r+0x384>
 8009276:	4bbc      	ldr	r3, [pc, #752]	; (8009568 <_dtoa_r+0x648>)
 8009278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800927c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009280:	f7f7 fb3c 	bl	80008fc <__aeabi_ddiv>
 8009284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009288:	f007 070f 	and.w	r7, r7, #15
 800928c:	2503      	movs	r5, #3
 800928e:	4eb6      	ldr	r6, [pc, #728]	; (8009568 <_dtoa_r+0x648>)
 8009290:	b957      	cbnz	r7, 80092a8 <_dtoa_r+0x388>
 8009292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009296:	ec53 2b18 	vmov	r2, r3, d8
 800929a:	f7f7 fb2f 	bl	80008fc <__aeabi_ddiv>
 800929e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a2:	e029      	b.n	80092f8 <_dtoa_r+0x3d8>
 80092a4:	2502      	movs	r5, #2
 80092a6:	e7f2      	b.n	800928e <_dtoa_r+0x36e>
 80092a8:	07f9      	lsls	r1, r7, #31
 80092aa:	d508      	bpl.n	80092be <_dtoa_r+0x39e>
 80092ac:	ec51 0b18 	vmov	r0, r1, d8
 80092b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092b4:	f7f7 f9f8 	bl	80006a8 <__aeabi_dmul>
 80092b8:	ec41 0b18 	vmov	d8, r0, r1
 80092bc:	3501      	adds	r5, #1
 80092be:	107f      	asrs	r7, r7, #1
 80092c0:	3608      	adds	r6, #8
 80092c2:	e7e5      	b.n	8009290 <_dtoa_r+0x370>
 80092c4:	f000 80a6 	beq.w	8009414 <_dtoa_r+0x4f4>
 80092c8:	f1ca 0600 	rsb	r6, sl, #0
 80092cc:	4ba5      	ldr	r3, [pc, #660]	; (8009564 <_dtoa_r+0x644>)
 80092ce:	4fa6      	ldr	r7, [pc, #664]	; (8009568 <_dtoa_r+0x648>)
 80092d0:	f006 020f 	and.w	r2, r6, #15
 80092d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092e0:	f7f7 f9e2 	bl	80006a8 <__aeabi_dmul>
 80092e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e8:	1136      	asrs	r6, r6, #4
 80092ea:	2300      	movs	r3, #0
 80092ec:	2502      	movs	r5, #2
 80092ee:	2e00      	cmp	r6, #0
 80092f0:	f040 8085 	bne.w	80093fe <_dtoa_r+0x4de>
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1d2      	bne.n	800929e <_dtoa_r+0x37e>
 80092f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 808c 	beq.w	8009418 <_dtoa_r+0x4f8>
 8009300:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009304:	4b99      	ldr	r3, [pc, #612]	; (800956c <_dtoa_r+0x64c>)
 8009306:	2200      	movs	r2, #0
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f7 fc3e 	bl	8000b8c <__aeabi_dcmplt>
 8009310:	2800      	cmp	r0, #0
 8009312:	f000 8081 	beq.w	8009418 <_dtoa_r+0x4f8>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d07d      	beq.n	8009418 <_dtoa_r+0x4f8>
 800931c:	f1b9 0f00 	cmp.w	r9, #0
 8009320:	dd3c      	ble.n	800939c <_dtoa_r+0x47c>
 8009322:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009326:	9307      	str	r3, [sp, #28]
 8009328:	2200      	movs	r2, #0
 800932a:	4b91      	ldr	r3, [pc, #580]	; (8009570 <_dtoa_r+0x650>)
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 f9ba 	bl	80006a8 <__aeabi_dmul>
 8009334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009338:	3501      	adds	r5, #1
 800933a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800933e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009342:	4628      	mov	r0, r5
 8009344:	f7f7 f946 	bl	80005d4 <__aeabi_i2d>
 8009348:	4632      	mov	r2, r6
 800934a:	463b      	mov	r3, r7
 800934c:	f7f7 f9ac 	bl	80006a8 <__aeabi_dmul>
 8009350:	4b88      	ldr	r3, [pc, #544]	; (8009574 <_dtoa_r+0x654>)
 8009352:	2200      	movs	r2, #0
 8009354:	f7f6 fff2 	bl	800033c <__adddf3>
 8009358:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800935c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009360:	9303      	str	r3, [sp, #12]
 8009362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009364:	2b00      	cmp	r3, #0
 8009366:	d15c      	bne.n	8009422 <_dtoa_r+0x502>
 8009368:	4b83      	ldr	r3, [pc, #524]	; (8009578 <_dtoa_r+0x658>)
 800936a:	2200      	movs	r2, #0
 800936c:	4630      	mov	r0, r6
 800936e:	4639      	mov	r1, r7
 8009370:	f7f6 ffe2 	bl	8000338 <__aeabi_dsub>
 8009374:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009378:	4606      	mov	r6, r0
 800937a:	460f      	mov	r7, r1
 800937c:	f7f7 fc24 	bl	8000bc8 <__aeabi_dcmpgt>
 8009380:	2800      	cmp	r0, #0
 8009382:	f040 8296 	bne.w	80098b2 <_dtoa_r+0x992>
 8009386:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800938a:	4630      	mov	r0, r6
 800938c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009390:	4639      	mov	r1, r7
 8009392:	f7f7 fbfb 	bl	8000b8c <__aeabi_dcmplt>
 8009396:	2800      	cmp	r0, #0
 8009398:	f040 8288 	bne.w	80098ac <_dtoa_r+0x98c>
 800939c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f2c0 8158 	blt.w	800965c <_dtoa_r+0x73c>
 80093ac:	f1ba 0f0e 	cmp.w	sl, #14
 80093b0:	f300 8154 	bgt.w	800965c <_dtoa_r+0x73c>
 80093b4:	4b6b      	ldr	r3, [pc, #428]	; (8009564 <_dtoa_r+0x644>)
 80093b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f280 80e3 	bge.w	800958c <_dtoa_r+0x66c>
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f300 80df 	bgt.w	800958c <_dtoa_r+0x66c>
 80093ce:	f040 826d 	bne.w	80098ac <_dtoa_r+0x98c>
 80093d2:	4b69      	ldr	r3, [pc, #420]	; (8009578 <_dtoa_r+0x658>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f7 f965 	bl	80006a8 <__aeabi_dmul>
 80093de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093e2:	f7f7 fbe7 	bl	8000bb4 <__aeabi_dcmpge>
 80093e6:	9e01      	ldr	r6, [sp, #4]
 80093e8:	4637      	mov	r7, r6
 80093ea:	2800      	cmp	r0, #0
 80093ec:	f040 8243 	bne.w	8009876 <_dtoa_r+0x956>
 80093f0:	9d00      	ldr	r5, [sp, #0]
 80093f2:	2331      	movs	r3, #49	; 0x31
 80093f4:	f805 3b01 	strb.w	r3, [r5], #1
 80093f8:	f10a 0a01 	add.w	sl, sl, #1
 80093fc:	e23f      	b.n	800987e <_dtoa_r+0x95e>
 80093fe:	07f2      	lsls	r2, r6, #31
 8009400:	d505      	bpl.n	800940e <_dtoa_r+0x4ee>
 8009402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009406:	f7f7 f94f 	bl	80006a8 <__aeabi_dmul>
 800940a:	3501      	adds	r5, #1
 800940c:	2301      	movs	r3, #1
 800940e:	1076      	asrs	r6, r6, #1
 8009410:	3708      	adds	r7, #8
 8009412:	e76c      	b.n	80092ee <_dtoa_r+0x3ce>
 8009414:	2502      	movs	r5, #2
 8009416:	e76f      	b.n	80092f8 <_dtoa_r+0x3d8>
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	f8cd a01c 	str.w	sl, [sp, #28]
 800941e:	930c      	str	r3, [sp, #48]	; 0x30
 8009420:	e78d      	b.n	800933e <_dtoa_r+0x41e>
 8009422:	9900      	ldr	r1, [sp, #0]
 8009424:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009428:	4b4e      	ldr	r3, [pc, #312]	; (8009564 <_dtoa_r+0x644>)
 800942a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800942e:	4401      	add	r1, r0
 8009430:	9102      	str	r1, [sp, #8]
 8009432:	9908      	ldr	r1, [sp, #32]
 8009434:	eeb0 8a47 	vmov.f32	s16, s14
 8009438:	eef0 8a67 	vmov.f32	s17, s15
 800943c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009440:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009444:	2900      	cmp	r1, #0
 8009446:	d045      	beq.n	80094d4 <_dtoa_r+0x5b4>
 8009448:	494c      	ldr	r1, [pc, #304]	; (800957c <_dtoa_r+0x65c>)
 800944a:	2000      	movs	r0, #0
 800944c:	f7f7 fa56 	bl	80008fc <__aeabi_ddiv>
 8009450:	ec53 2b18 	vmov	r2, r3, d8
 8009454:	f7f6 ff70 	bl	8000338 <__aeabi_dsub>
 8009458:	9d00      	ldr	r5, [sp, #0]
 800945a:	ec41 0b18 	vmov	d8, r0, r1
 800945e:	4639      	mov	r1, r7
 8009460:	4630      	mov	r0, r6
 8009462:	f7f7 fbd1 	bl	8000c08 <__aeabi_d2iz>
 8009466:	900c      	str	r0, [sp, #48]	; 0x30
 8009468:	f7f7 f8b4 	bl	80005d4 <__aeabi_i2d>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4630      	mov	r0, r6
 8009472:	4639      	mov	r1, r7
 8009474:	f7f6 ff60 	bl	8000338 <__aeabi_dsub>
 8009478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800947a:	3330      	adds	r3, #48	; 0x30
 800947c:	f805 3b01 	strb.w	r3, [r5], #1
 8009480:	ec53 2b18 	vmov	r2, r3, d8
 8009484:	4606      	mov	r6, r0
 8009486:	460f      	mov	r7, r1
 8009488:	f7f7 fb80 	bl	8000b8c <__aeabi_dcmplt>
 800948c:	2800      	cmp	r0, #0
 800948e:	d165      	bne.n	800955c <_dtoa_r+0x63c>
 8009490:	4632      	mov	r2, r6
 8009492:	463b      	mov	r3, r7
 8009494:	4935      	ldr	r1, [pc, #212]	; (800956c <_dtoa_r+0x64c>)
 8009496:	2000      	movs	r0, #0
 8009498:	f7f6 ff4e 	bl	8000338 <__aeabi_dsub>
 800949c:	ec53 2b18 	vmov	r2, r3, d8
 80094a0:	f7f7 fb74 	bl	8000b8c <__aeabi_dcmplt>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f040 80b9 	bne.w	800961c <_dtoa_r+0x6fc>
 80094aa:	9b02      	ldr	r3, [sp, #8]
 80094ac:	429d      	cmp	r5, r3
 80094ae:	f43f af75 	beq.w	800939c <_dtoa_r+0x47c>
 80094b2:	4b2f      	ldr	r3, [pc, #188]	; (8009570 <_dtoa_r+0x650>)
 80094b4:	ec51 0b18 	vmov	r0, r1, d8
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f8f5 	bl	80006a8 <__aeabi_dmul>
 80094be:	4b2c      	ldr	r3, [pc, #176]	; (8009570 <_dtoa_r+0x650>)
 80094c0:	ec41 0b18 	vmov	d8, r0, r1
 80094c4:	2200      	movs	r2, #0
 80094c6:	4630      	mov	r0, r6
 80094c8:	4639      	mov	r1, r7
 80094ca:	f7f7 f8ed 	bl	80006a8 <__aeabi_dmul>
 80094ce:	4606      	mov	r6, r0
 80094d0:	460f      	mov	r7, r1
 80094d2:	e7c4      	b.n	800945e <_dtoa_r+0x53e>
 80094d4:	ec51 0b17 	vmov	r0, r1, d7
 80094d8:	f7f7 f8e6 	bl	80006a8 <__aeabi_dmul>
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	9d00      	ldr	r5, [sp, #0]
 80094e0:	930c      	str	r3, [sp, #48]	; 0x30
 80094e2:	ec41 0b18 	vmov	d8, r0, r1
 80094e6:	4639      	mov	r1, r7
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7f7 fb8d 	bl	8000c08 <__aeabi_d2iz>
 80094ee:	9011      	str	r0, [sp, #68]	; 0x44
 80094f0:	f7f7 f870 	bl	80005d4 <__aeabi_i2d>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4630      	mov	r0, r6
 80094fa:	4639      	mov	r1, r7
 80094fc:	f7f6 ff1c 	bl	8000338 <__aeabi_dsub>
 8009500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009502:	3330      	adds	r3, #48	; 0x30
 8009504:	f805 3b01 	strb.w	r3, [r5], #1
 8009508:	9b02      	ldr	r3, [sp, #8]
 800950a:	429d      	cmp	r5, r3
 800950c:	4606      	mov	r6, r0
 800950e:	460f      	mov	r7, r1
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	d134      	bne.n	8009580 <_dtoa_r+0x660>
 8009516:	4b19      	ldr	r3, [pc, #100]	; (800957c <_dtoa_r+0x65c>)
 8009518:	ec51 0b18 	vmov	r0, r1, d8
 800951c:	f7f6 ff0e 	bl	800033c <__adddf3>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f7 fb4e 	bl	8000bc8 <__aeabi_dcmpgt>
 800952c:	2800      	cmp	r0, #0
 800952e:	d175      	bne.n	800961c <_dtoa_r+0x6fc>
 8009530:	ec53 2b18 	vmov	r2, r3, d8
 8009534:	4911      	ldr	r1, [pc, #68]	; (800957c <_dtoa_r+0x65c>)
 8009536:	2000      	movs	r0, #0
 8009538:	f7f6 fefe 	bl	8000338 <__aeabi_dsub>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f7 fb22 	bl	8000b8c <__aeabi_dcmplt>
 8009548:	2800      	cmp	r0, #0
 800954a:	f43f af27 	beq.w	800939c <_dtoa_r+0x47c>
 800954e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009550:	1e6b      	subs	r3, r5, #1
 8009552:	930c      	str	r3, [sp, #48]	; 0x30
 8009554:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009558:	2b30      	cmp	r3, #48	; 0x30
 800955a:	d0f8      	beq.n	800954e <_dtoa_r+0x62e>
 800955c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009560:	e04a      	b.n	80095f8 <_dtoa_r+0x6d8>
 8009562:	bf00      	nop
 8009564:	0800b498 	.word	0x0800b498
 8009568:	0800b470 	.word	0x0800b470
 800956c:	3ff00000 	.word	0x3ff00000
 8009570:	40240000 	.word	0x40240000
 8009574:	401c0000 	.word	0x401c0000
 8009578:	40140000 	.word	0x40140000
 800957c:	3fe00000 	.word	0x3fe00000
 8009580:	4baf      	ldr	r3, [pc, #700]	; (8009840 <_dtoa_r+0x920>)
 8009582:	f7f7 f891 	bl	80006a8 <__aeabi_dmul>
 8009586:	4606      	mov	r6, r0
 8009588:	460f      	mov	r7, r1
 800958a:	e7ac      	b.n	80094e6 <_dtoa_r+0x5c6>
 800958c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009590:	9d00      	ldr	r5, [sp, #0]
 8009592:	4642      	mov	r2, r8
 8009594:	464b      	mov	r3, r9
 8009596:	4630      	mov	r0, r6
 8009598:	4639      	mov	r1, r7
 800959a:	f7f7 f9af 	bl	80008fc <__aeabi_ddiv>
 800959e:	f7f7 fb33 	bl	8000c08 <__aeabi_d2iz>
 80095a2:	9002      	str	r0, [sp, #8]
 80095a4:	f7f7 f816 	bl	80005d4 <__aeabi_i2d>
 80095a8:	4642      	mov	r2, r8
 80095aa:	464b      	mov	r3, r9
 80095ac:	f7f7 f87c 	bl	80006a8 <__aeabi_dmul>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4630      	mov	r0, r6
 80095b6:	4639      	mov	r1, r7
 80095b8:	f7f6 febe 	bl	8000338 <__aeabi_dsub>
 80095bc:	9e02      	ldr	r6, [sp, #8]
 80095be:	9f01      	ldr	r7, [sp, #4]
 80095c0:	3630      	adds	r6, #48	; 0x30
 80095c2:	f805 6b01 	strb.w	r6, [r5], #1
 80095c6:	9e00      	ldr	r6, [sp, #0]
 80095c8:	1bae      	subs	r6, r5, r6
 80095ca:	42b7      	cmp	r7, r6
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	d137      	bne.n	8009642 <_dtoa_r+0x722>
 80095d2:	f7f6 feb3 	bl	800033c <__adddf3>
 80095d6:	4642      	mov	r2, r8
 80095d8:	464b      	mov	r3, r9
 80095da:	4606      	mov	r6, r0
 80095dc:	460f      	mov	r7, r1
 80095de:	f7f7 faf3 	bl	8000bc8 <__aeabi_dcmpgt>
 80095e2:	b9c8      	cbnz	r0, 8009618 <_dtoa_r+0x6f8>
 80095e4:	4642      	mov	r2, r8
 80095e6:	464b      	mov	r3, r9
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	f7f7 fac4 	bl	8000b78 <__aeabi_dcmpeq>
 80095f0:	b110      	cbz	r0, 80095f8 <_dtoa_r+0x6d8>
 80095f2:	9b02      	ldr	r3, [sp, #8]
 80095f4:	07d9      	lsls	r1, r3, #31
 80095f6:	d40f      	bmi.n	8009618 <_dtoa_r+0x6f8>
 80095f8:	4620      	mov	r0, r4
 80095fa:	4659      	mov	r1, fp
 80095fc:	f000 fac8 	bl	8009b90 <_Bfree>
 8009600:	2300      	movs	r3, #0
 8009602:	702b      	strb	r3, [r5, #0]
 8009604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009606:	f10a 0001 	add.w	r0, sl, #1
 800960a:	6018      	str	r0, [r3, #0]
 800960c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800960e:	2b00      	cmp	r3, #0
 8009610:	f43f acd8 	beq.w	8008fc4 <_dtoa_r+0xa4>
 8009614:	601d      	str	r5, [r3, #0]
 8009616:	e4d5      	b.n	8008fc4 <_dtoa_r+0xa4>
 8009618:	f8cd a01c 	str.w	sl, [sp, #28]
 800961c:	462b      	mov	r3, r5
 800961e:	461d      	mov	r5, r3
 8009620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009624:	2a39      	cmp	r2, #57	; 0x39
 8009626:	d108      	bne.n	800963a <_dtoa_r+0x71a>
 8009628:	9a00      	ldr	r2, [sp, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d1f7      	bne.n	800961e <_dtoa_r+0x6fe>
 800962e:	9a07      	ldr	r2, [sp, #28]
 8009630:	9900      	ldr	r1, [sp, #0]
 8009632:	3201      	adds	r2, #1
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	2230      	movs	r2, #48	; 0x30
 8009638:	700a      	strb	r2, [r1, #0]
 800963a:	781a      	ldrb	r2, [r3, #0]
 800963c:	3201      	adds	r2, #1
 800963e:	701a      	strb	r2, [r3, #0]
 8009640:	e78c      	b.n	800955c <_dtoa_r+0x63c>
 8009642:	4b7f      	ldr	r3, [pc, #508]	; (8009840 <_dtoa_r+0x920>)
 8009644:	2200      	movs	r2, #0
 8009646:	f7f7 f82f 	bl	80006a8 <__aeabi_dmul>
 800964a:	2200      	movs	r2, #0
 800964c:	2300      	movs	r3, #0
 800964e:	4606      	mov	r6, r0
 8009650:	460f      	mov	r7, r1
 8009652:	f7f7 fa91 	bl	8000b78 <__aeabi_dcmpeq>
 8009656:	2800      	cmp	r0, #0
 8009658:	d09b      	beq.n	8009592 <_dtoa_r+0x672>
 800965a:	e7cd      	b.n	80095f8 <_dtoa_r+0x6d8>
 800965c:	9a08      	ldr	r2, [sp, #32]
 800965e:	2a00      	cmp	r2, #0
 8009660:	f000 80c4 	beq.w	80097ec <_dtoa_r+0x8cc>
 8009664:	9a05      	ldr	r2, [sp, #20]
 8009666:	2a01      	cmp	r2, #1
 8009668:	f300 80a8 	bgt.w	80097bc <_dtoa_r+0x89c>
 800966c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800966e:	2a00      	cmp	r2, #0
 8009670:	f000 80a0 	beq.w	80097b4 <_dtoa_r+0x894>
 8009674:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009678:	9e06      	ldr	r6, [sp, #24]
 800967a:	4645      	mov	r5, r8
 800967c:	9a04      	ldr	r2, [sp, #16]
 800967e:	2101      	movs	r1, #1
 8009680:	441a      	add	r2, r3
 8009682:	4620      	mov	r0, r4
 8009684:	4498      	add	r8, r3
 8009686:	9204      	str	r2, [sp, #16]
 8009688:	f000 fb3e 	bl	8009d08 <__i2b>
 800968c:	4607      	mov	r7, r0
 800968e:	2d00      	cmp	r5, #0
 8009690:	dd0b      	ble.n	80096aa <_dtoa_r+0x78a>
 8009692:	9b04      	ldr	r3, [sp, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	dd08      	ble.n	80096aa <_dtoa_r+0x78a>
 8009698:	42ab      	cmp	r3, r5
 800969a:	9a04      	ldr	r2, [sp, #16]
 800969c:	bfa8      	it	ge
 800969e:	462b      	movge	r3, r5
 80096a0:	eba8 0803 	sub.w	r8, r8, r3
 80096a4:	1aed      	subs	r5, r5, r3
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	9b06      	ldr	r3, [sp, #24]
 80096ac:	b1fb      	cbz	r3, 80096ee <_dtoa_r+0x7ce>
 80096ae:	9b08      	ldr	r3, [sp, #32]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 809f 	beq.w	80097f4 <_dtoa_r+0x8d4>
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	dd11      	ble.n	80096de <_dtoa_r+0x7be>
 80096ba:	4639      	mov	r1, r7
 80096bc:	4632      	mov	r2, r6
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 fbde 	bl	8009e80 <__pow5mult>
 80096c4:	465a      	mov	r2, fp
 80096c6:	4601      	mov	r1, r0
 80096c8:	4607      	mov	r7, r0
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fb32 	bl	8009d34 <__multiply>
 80096d0:	4659      	mov	r1, fp
 80096d2:	9007      	str	r0, [sp, #28]
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fa5b 	bl	8009b90 <_Bfree>
 80096da:	9b07      	ldr	r3, [sp, #28]
 80096dc:	469b      	mov	fp, r3
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	1b9a      	subs	r2, r3, r6
 80096e2:	d004      	beq.n	80096ee <_dtoa_r+0x7ce>
 80096e4:	4659      	mov	r1, fp
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 fbca 	bl	8009e80 <__pow5mult>
 80096ec:	4683      	mov	fp, r0
 80096ee:	2101      	movs	r1, #1
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 fb09 	bl	8009d08 <__i2b>
 80096f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	4606      	mov	r6, r0
 80096fc:	dd7c      	ble.n	80097f8 <_dtoa_r+0x8d8>
 80096fe:	461a      	mov	r2, r3
 8009700:	4601      	mov	r1, r0
 8009702:	4620      	mov	r0, r4
 8009704:	f000 fbbc 	bl	8009e80 <__pow5mult>
 8009708:	9b05      	ldr	r3, [sp, #20]
 800970a:	2b01      	cmp	r3, #1
 800970c:	4606      	mov	r6, r0
 800970e:	dd76      	ble.n	80097fe <_dtoa_r+0x8de>
 8009710:	2300      	movs	r3, #0
 8009712:	9306      	str	r3, [sp, #24]
 8009714:	6933      	ldr	r3, [r6, #16]
 8009716:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800971a:	6918      	ldr	r0, [r3, #16]
 800971c:	f000 faa4 	bl	8009c68 <__hi0bits>
 8009720:	f1c0 0020 	rsb	r0, r0, #32
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	4418      	add	r0, r3
 8009728:	f010 001f 	ands.w	r0, r0, #31
 800972c:	f000 8086 	beq.w	800983c <_dtoa_r+0x91c>
 8009730:	f1c0 0320 	rsb	r3, r0, #32
 8009734:	2b04      	cmp	r3, #4
 8009736:	dd7f      	ble.n	8009838 <_dtoa_r+0x918>
 8009738:	f1c0 001c 	rsb	r0, r0, #28
 800973c:	9b04      	ldr	r3, [sp, #16]
 800973e:	4403      	add	r3, r0
 8009740:	4480      	add	r8, r0
 8009742:	4405      	add	r5, r0
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	f1b8 0f00 	cmp.w	r8, #0
 800974a:	dd05      	ble.n	8009758 <_dtoa_r+0x838>
 800974c:	4659      	mov	r1, fp
 800974e:	4642      	mov	r2, r8
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fbef 	bl	8009f34 <__lshift>
 8009756:	4683      	mov	fp, r0
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	dd05      	ble.n	800976a <_dtoa_r+0x84a>
 800975e:	4631      	mov	r1, r6
 8009760:	461a      	mov	r2, r3
 8009762:	4620      	mov	r0, r4
 8009764:	f000 fbe6 	bl	8009f34 <__lshift>
 8009768:	4606      	mov	r6, r0
 800976a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d069      	beq.n	8009844 <_dtoa_r+0x924>
 8009770:	4631      	mov	r1, r6
 8009772:	4658      	mov	r0, fp
 8009774:	f000 fc4a 	bl	800a00c <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	da63      	bge.n	8009844 <_dtoa_r+0x924>
 800977c:	2300      	movs	r3, #0
 800977e:	4659      	mov	r1, fp
 8009780:	220a      	movs	r2, #10
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fa26 	bl	8009bd4 <__multadd>
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800978e:	4683      	mov	fp, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 818f 	beq.w	8009ab4 <_dtoa_r+0xb94>
 8009796:	4639      	mov	r1, r7
 8009798:	2300      	movs	r3, #0
 800979a:	220a      	movs	r2, #10
 800979c:	4620      	mov	r0, r4
 800979e:	f000 fa19 	bl	8009bd4 <__multadd>
 80097a2:	f1b9 0f00 	cmp.w	r9, #0
 80097a6:	4607      	mov	r7, r0
 80097a8:	f300 808e 	bgt.w	80098c8 <_dtoa_r+0x9a8>
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	dc50      	bgt.n	8009854 <_dtoa_r+0x934>
 80097b2:	e089      	b.n	80098c8 <_dtoa_r+0x9a8>
 80097b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097ba:	e75d      	b.n	8009678 <_dtoa_r+0x758>
 80097bc:	9b01      	ldr	r3, [sp, #4]
 80097be:	1e5e      	subs	r6, r3, #1
 80097c0:	9b06      	ldr	r3, [sp, #24]
 80097c2:	42b3      	cmp	r3, r6
 80097c4:	bfbf      	itttt	lt
 80097c6:	9b06      	ldrlt	r3, [sp, #24]
 80097c8:	9606      	strlt	r6, [sp, #24]
 80097ca:	1af2      	sublt	r2, r6, r3
 80097cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80097ce:	bfb6      	itet	lt
 80097d0:	189b      	addlt	r3, r3, r2
 80097d2:	1b9e      	subge	r6, r3, r6
 80097d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	bfb8      	it	lt
 80097da:	2600      	movlt	r6, #0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bfb5      	itete	lt
 80097e0:	eba8 0503 	sublt.w	r5, r8, r3
 80097e4:	9b01      	ldrge	r3, [sp, #4]
 80097e6:	2300      	movlt	r3, #0
 80097e8:	4645      	movge	r5, r8
 80097ea:	e747      	b.n	800967c <_dtoa_r+0x75c>
 80097ec:	9e06      	ldr	r6, [sp, #24]
 80097ee:	9f08      	ldr	r7, [sp, #32]
 80097f0:	4645      	mov	r5, r8
 80097f2:	e74c      	b.n	800968e <_dtoa_r+0x76e>
 80097f4:	9a06      	ldr	r2, [sp, #24]
 80097f6:	e775      	b.n	80096e4 <_dtoa_r+0x7c4>
 80097f8:	9b05      	ldr	r3, [sp, #20]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	dc18      	bgt.n	8009830 <_dtoa_r+0x910>
 80097fe:	9b02      	ldr	r3, [sp, #8]
 8009800:	b9b3      	cbnz	r3, 8009830 <_dtoa_r+0x910>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009808:	b9a3      	cbnz	r3, 8009834 <_dtoa_r+0x914>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009810:	0d1b      	lsrs	r3, r3, #20
 8009812:	051b      	lsls	r3, r3, #20
 8009814:	b12b      	cbz	r3, 8009822 <_dtoa_r+0x902>
 8009816:	9b04      	ldr	r3, [sp, #16]
 8009818:	3301      	adds	r3, #1
 800981a:	9304      	str	r3, [sp, #16]
 800981c:	f108 0801 	add.w	r8, r8, #1
 8009820:	2301      	movs	r3, #1
 8009822:	9306      	str	r3, [sp, #24]
 8009824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009826:	2b00      	cmp	r3, #0
 8009828:	f47f af74 	bne.w	8009714 <_dtoa_r+0x7f4>
 800982c:	2001      	movs	r0, #1
 800982e:	e779      	b.n	8009724 <_dtoa_r+0x804>
 8009830:	2300      	movs	r3, #0
 8009832:	e7f6      	b.n	8009822 <_dtoa_r+0x902>
 8009834:	9b02      	ldr	r3, [sp, #8]
 8009836:	e7f4      	b.n	8009822 <_dtoa_r+0x902>
 8009838:	d085      	beq.n	8009746 <_dtoa_r+0x826>
 800983a:	4618      	mov	r0, r3
 800983c:	301c      	adds	r0, #28
 800983e:	e77d      	b.n	800973c <_dtoa_r+0x81c>
 8009840:	40240000 	.word	0x40240000
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc38      	bgt.n	80098bc <_dtoa_r+0x99c>
 800984a:	9b05      	ldr	r3, [sp, #20]
 800984c:	2b02      	cmp	r3, #2
 800984e:	dd35      	ble.n	80098bc <_dtoa_r+0x99c>
 8009850:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d10d      	bne.n	8009876 <_dtoa_r+0x956>
 800985a:	4631      	mov	r1, r6
 800985c:	464b      	mov	r3, r9
 800985e:	2205      	movs	r2, #5
 8009860:	4620      	mov	r0, r4
 8009862:	f000 f9b7 	bl	8009bd4 <__multadd>
 8009866:	4601      	mov	r1, r0
 8009868:	4606      	mov	r6, r0
 800986a:	4658      	mov	r0, fp
 800986c:	f000 fbce 	bl	800a00c <__mcmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	f73f adbd 	bgt.w	80093f0 <_dtoa_r+0x4d0>
 8009876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009878:	9d00      	ldr	r5, [sp, #0]
 800987a:	ea6f 0a03 	mvn.w	sl, r3
 800987e:	f04f 0800 	mov.w	r8, #0
 8009882:	4631      	mov	r1, r6
 8009884:	4620      	mov	r0, r4
 8009886:	f000 f983 	bl	8009b90 <_Bfree>
 800988a:	2f00      	cmp	r7, #0
 800988c:	f43f aeb4 	beq.w	80095f8 <_dtoa_r+0x6d8>
 8009890:	f1b8 0f00 	cmp.w	r8, #0
 8009894:	d005      	beq.n	80098a2 <_dtoa_r+0x982>
 8009896:	45b8      	cmp	r8, r7
 8009898:	d003      	beq.n	80098a2 <_dtoa_r+0x982>
 800989a:	4641      	mov	r1, r8
 800989c:	4620      	mov	r0, r4
 800989e:	f000 f977 	bl	8009b90 <_Bfree>
 80098a2:	4639      	mov	r1, r7
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 f973 	bl	8009b90 <_Bfree>
 80098aa:	e6a5      	b.n	80095f8 <_dtoa_r+0x6d8>
 80098ac:	2600      	movs	r6, #0
 80098ae:	4637      	mov	r7, r6
 80098b0:	e7e1      	b.n	8009876 <_dtoa_r+0x956>
 80098b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80098b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80098b8:	4637      	mov	r7, r6
 80098ba:	e599      	b.n	80093f0 <_dtoa_r+0x4d0>
 80098bc:	9b08      	ldr	r3, [sp, #32]
 80098be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 80fd 	beq.w	8009ac2 <_dtoa_r+0xba2>
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	dd05      	ble.n	80098d8 <_dtoa_r+0x9b8>
 80098cc:	4639      	mov	r1, r7
 80098ce:	462a      	mov	r2, r5
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fb2f 	bl	8009f34 <__lshift>
 80098d6:	4607      	mov	r7, r0
 80098d8:	9b06      	ldr	r3, [sp, #24]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d05c      	beq.n	8009998 <_dtoa_r+0xa78>
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 f915 	bl	8009b10 <_Balloc>
 80098e6:	4605      	mov	r5, r0
 80098e8:	b928      	cbnz	r0, 80098f6 <_dtoa_r+0x9d6>
 80098ea:	4b80      	ldr	r3, [pc, #512]	; (8009aec <_dtoa_r+0xbcc>)
 80098ec:	4602      	mov	r2, r0
 80098ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80098f2:	f7ff bb2e 	b.w	8008f52 <_dtoa_r+0x32>
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	3202      	adds	r2, #2
 80098fa:	0092      	lsls	r2, r2, #2
 80098fc:	f107 010c 	add.w	r1, r7, #12
 8009900:	300c      	adds	r0, #12
 8009902:	f7fe fde1 	bl	80084c8 <memcpy>
 8009906:	2201      	movs	r2, #1
 8009908:	4629      	mov	r1, r5
 800990a:	4620      	mov	r0, r4
 800990c:	f000 fb12 	bl	8009f34 <__lshift>
 8009910:	9b00      	ldr	r3, [sp, #0]
 8009912:	3301      	adds	r3, #1
 8009914:	9301      	str	r3, [sp, #4]
 8009916:	9b00      	ldr	r3, [sp, #0]
 8009918:	444b      	add	r3, r9
 800991a:	9307      	str	r3, [sp, #28]
 800991c:	9b02      	ldr	r3, [sp, #8]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	46b8      	mov	r8, r7
 8009924:	9306      	str	r3, [sp, #24]
 8009926:	4607      	mov	r7, r0
 8009928:	9b01      	ldr	r3, [sp, #4]
 800992a:	4631      	mov	r1, r6
 800992c:	3b01      	subs	r3, #1
 800992e:	4658      	mov	r0, fp
 8009930:	9302      	str	r3, [sp, #8]
 8009932:	f7ff fa69 	bl	8008e08 <quorem>
 8009936:	4603      	mov	r3, r0
 8009938:	3330      	adds	r3, #48	; 0x30
 800993a:	9004      	str	r0, [sp, #16]
 800993c:	4641      	mov	r1, r8
 800993e:	4658      	mov	r0, fp
 8009940:	9308      	str	r3, [sp, #32]
 8009942:	f000 fb63 	bl	800a00c <__mcmp>
 8009946:	463a      	mov	r2, r7
 8009948:	4681      	mov	r9, r0
 800994a:	4631      	mov	r1, r6
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fb79 	bl	800a044 <__mdiff>
 8009952:	68c2      	ldr	r2, [r0, #12]
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	4605      	mov	r5, r0
 8009958:	bb02      	cbnz	r2, 800999c <_dtoa_r+0xa7c>
 800995a:	4601      	mov	r1, r0
 800995c:	4658      	mov	r0, fp
 800995e:	f000 fb55 	bl	800a00c <__mcmp>
 8009962:	9b08      	ldr	r3, [sp, #32]
 8009964:	4602      	mov	r2, r0
 8009966:	4629      	mov	r1, r5
 8009968:	4620      	mov	r0, r4
 800996a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800996e:	f000 f90f 	bl	8009b90 <_Bfree>
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009976:	9d01      	ldr	r5, [sp, #4]
 8009978:	ea43 0102 	orr.w	r1, r3, r2
 800997c:	9b06      	ldr	r3, [sp, #24]
 800997e:	430b      	orrs	r3, r1
 8009980:	9b08      	ldr	r3, [sp, #32]
 8009982:	d10d      	bne.n	80099a0 <_dtoa_r+0xa80>
 8009984:	2b39      	cmp	r3, #57	; 0x39
 8009986:	d029      	beq.n	80099dc <_dtoa_r+0xabc>
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	dd01      	ble.n	8009992 <_dtoa_r+0xa72>
 800998e:	9b04      	ldr	r3, [sp, #16]
 8009990:	3331      	adds	r3, #49	; 0x31
 8009992:	9a02      	ldr	r2, [sp, #8]
 8009994:	7013      	strb	r3, [r2, #0]
 8009996:	e774      	b.n	8009882 <_dtoa_r+0x962>
 8009998:	4638      	mov	r0, r7
 800999a:	e7b9      	b.n	8009910 <_dtoa_r+0x9f0>
 800999c:	2201      	movs	r2, #1
 800999e:	e7e2      	b.n	8009966 <_dtoa_r+0xa46>
 80099a0:	f1b9 0f00 	cmp.w	r9, #0
 80099a4:	db06      	blt.n	80099b4 <_dtoa_r+0xa94>
 80099a6:	9905      	ldr	r1, [sp, #20]
 80099a8:	ea41 0909 	orr.w	r9, r1, r9
 80099ac:	9906      	ldr	r1, [sp, #24]
 80099ae:	ea59 0101 	orrs.w	r1, r9, r1
 80099b2:	d120      	bne.n	80099f6 <_dtoa_r+0xad6>
 80099b4:	2a00      	cmp	r2, #0
 80099b6:	ddec      	ble.n	8009992 <_dtoa_r+0xa72>
 80099b8:	4659      	mov	r1, fp
 80099ba:	2201      	movs	r2, #1
 80099bc:	4620      	mov	r0, r4
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	f000 fab8 	bl	8009f34 <__lshift>
 80099c4:	4631      	mov	r1, r6
 80099c6:	4683      	mov	fp, r0
 80099c8:	f000 fb20 	bl	800a00c <__mcmp>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	dc02      	bgt.n	80099d8 <_dtoa_r+0xab8>
 80099d2:	d1de      	bne.n	8009992 <_dtoa_r+0xa72>
 80099d4:	07da      	lsls	r2, r3, #31
 80099d6:	d5dc      	bpl.n	8009992 <_dtoa_r+0xa72>
 80099d8:	2b39      	cmp	r3, #57	; 0x39
 80099da:	d1d8      	bne.n	800998e <_dtoa_r+0xa6e>
 80099dc:	9a02      	ldr	r2, [sp, #8]
 80099de:	2339      	movs	r3, #57	; 0x39
 80099e0:	7013      	strb	r3, [r2, #0]
 80099e2:	462b      	mov	r3, r5
 80099e4:	461d      	mov	r5, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099ec:	2a39      	cmp	r2, #57	; 0x39
 80099ee:	d050      	beq.n	8009a92 <_dtoa_r+0xb72>
 80099f0:	3201      	adds	r2, #1
 80099f2:	701a      	strb	r2, [r3, #0]
 80099f4:	e745      	b.n	8009882 <_dtoa_r+0x962>
 80099f6:	2a00      	cmp	r2, #0
 80099f8:	dd03      	ble.n	8009a02 <_dtoa_r+0xae2>
 80099fa:	2b39      	cmp	r3, #57	; 0x39
 80099fc:	d0ee      	beq.n	80099dc <_dtoa_r+0xabc>
 80099fe:	3301      	adds	r3, #1
 8009a00:	e7c7      	b.n	8009992 <_dtoa_r+0xa72>
 8009a02:	9a01      	ldr	r2, [sp, #4]
 8009a04:	9907      	ldr	r1, [sp, #28]
 8009a06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a0a:	428a      	cmp	r2, r1
 8009a0c:	d02a      	beq.n	8009a64 <_dtoa_r+0xb44>
 8009a0e:	4659      	mov	r1, fp
 8009a10:	2300      	movs	r3, #0
 8009a12:	220a      	movs	r2, #10
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 f8dd 	bl	8009bd4 <__multadd>
 8009a1a:	45b8      	cmp	r8, r7
 8009a1c:	4683      	mov	fp, r0
 8009a1e:	f04f 0300 	mov.w	r3, #0
 8009a22:	f04f 020a 	mov.w	r2, #10
 8009a26:	4641      	mov	r1, r8
 8009a28:	4620      	mov	r0, r4
 8009a2a:	d107      	bne.n	8009a3c <_dtoa_r+0xb1c>
 8009a2c:	f000 f8d2 	bl	8009bd4 <__multadd>
 8009a30:	4680      	mov	r8, r0
 8009a32:	4607      	mov	r7, r0
 8009a34:	9b01      	ldr	r3, [sp, #4]
 8009a36:	3301      	adds	r3, #1
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	e775      	b.n	8009928 <_dtoa_r+0xa08>
 8009a3c:	f000 f8ca 	bl	8009bd4 <__multadd>
 8009a40:	4639      	mov	r1, r7
 8009a42:	4680      	mov	r8, r0
 8009a44:	2300      	movs	r3, #0
 8009a46:	220a      	movs	r2, #10
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 f8c3 	bl	8009bd4 <__multadd>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	e7f0      	b.n	8009a34 <_dtoa_r+0xb14>
 8009a52:	f1b9 0f00 	cmp.w	r9, #0
 8009a56:	9a00      	ldr	r2, [sp, #0]
 8009a58:	bfcc      	ite	gt
 8009a5a:	464d      	movgt	r5, r9
 8009a5c:	2501      	movle	r5, #1
 8009a5e:	4415      	add	r5, r2
 8009a60:	f04f 0800 	mov.w	r8, #0
 8009a64:	4659      	mov	r1, fp
 8009a66:	2201      	movs	r2, #1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	f000 fa62 	bl	8009f34 <__lshift>
 8009a70:	4631      	mov	r1, r6
 8009a72:	4683      	mov	fp, r0
 8009a74:	f000 faca 	bl	800a00c <__mcmp>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	dcb2      	bgt.n	80099e2 <_dtoa_r+0xac2>
 8009a7c:	d102      	bne.n	8009a84 <_dtoa_r+0xb64>
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	07db      	lsls	r3, r3, #31
 8009a82:	d4ae      	bmi.n	80099e2 <_dtoa_r+0xac2>
 8009a84:	462b      	mov	r3, r5
 8009a86:	461d      	mov	r5, r3
 8009a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a8c:	2a30      	cmp	r2, #48	; 0x30
 8009a8e:	d0fa      	beq.n	8009a86 <_dtoa_r+0xb66>
 8009a90:	e6f7      	b.n	8009882 <_dtoa_r+0x962>
 8009a92:	9a00      	ldr	r2, [sp, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d1a5      	bne.n	80099e4 <_dtoa_r+0xac4>
 8009a98:	f10a 0a01 	add.w	sl, sl, #1
 8009a9c:	2331      	movs	r3, #49	; 0x31
 8009a9e:	e779      	b.n	8009994 <_dtoa_r+0xa74>
 8009aa0:	4b13      	ldr	r3, [pc, #76]	; (8009af0 <_dtoa_r+0xbd0>)
 8009aa2:	f7ff baaf 	b.w	8009004 <_dtoa_r+0xe4>
 8009aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f47f aa86 	bne.w	8008fba <_dtoa_r+0x9a>
 8009aae:	4b11      	ldr	r3, [pc, #68]	; (8009af4 <_dtoa_r+0xbd4>)
 8009ab0:	f7ff baa8 	b.w	8009004 <_dtoa_r+0xe4>
 8009ab4:	f1b9 0f00 	cmp.w	r9, #0
 8009ab8:	dc03      	bgt.n	8009ac2 <_dtoa_r+0xba2>
 8009aba:	9b05      	ldr	r3, [sp, #20]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	f73f aec9 	bgt.w	8009854 <_dtoa_r+0x934>
 8009ac2:	9d00      	ldr	r5, [sp, #0]
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4658      	mov	r0, fp
 8009ac8:	f7ff f99e 	bl	8008e08 <quorem>
 8009acc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009ad0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ad4:	9a00      	ldr	r2, [sp, #0]
 8009ad6:	1aaa      	subs	r2, r5, r2
 8009ad8:	4591      	cmp	r9, r2
 8009ada:	ddba      	ble.n	8009a52 <_dtoa_r+0xb32>
 8009adc:	4659      	mov	r1, fp
 8009ade:	2300      	movs	r3, #0
 8009ae0:	220a      	movs	r2, #10
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f000 f876 	bl	8009bd4 <__multadd>
 8009ae8:	4683      	mov	fp, r0
 8009aea:	e7eb      	b.n	8009ac4 <_dtoa_r+0xba4>
 8009aec:	0800b3ff 	.word	0x0800b3ff
 8009af0:	0800b358 	.word	0x0800b358
 8009af4:	0800b37c 	.word	0x0800b37c

08009af8 <_localeconv_r>:
 8009af8:	4800      	ldr	r0, [pc, #0]	; (8009afc <_localeconv_r+0x4>)
 8009afa:	4770      	bx	lr
 8009afc:	20000164 	.word	0x20000164

08009b00 <malloc>:
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <malloc+0xc>)
 8009b02:	4601      	mov	r1, r0
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	f000 bbe1 	b.w	800a2cc <_malloc_r>
 8009b0a:	bf00      	nop
 8009b0c:	20000010 	.word	0x20000010

08009b10 <_Balloc>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b14:	4604      	mov	r4, r0
 8009b16:	460d      	mov	r5, r1
 8009b18:	b976      	cbnz	r6, 8009b38 <_Balloc+0x28>
 8009b1a:	2010      	movs	r0, #16
 8009b1c:	f7ff fff0 	bl	8009b00 <malloc>
 8009b20:	4602      	mov	r2, r0
 8009b22:	6260      	str	r0, [r4, #36]	; 0x24
 8009b24:	b920      	cbnz	r0, 8009b30 <_Balloc+0x20>
 8009b26:	4b18      	ldr	r3, [pc, #96]	; (8009b88 <_Balloc+0x78>)
 8009b28:	4818      	ldr	r0, [pc, #96]	; (8009b8c <_Balloc+0x7c>)
 8009b2a:	2166      	movs	r1, #102	; 0x66
 8009b2c:	f000 fd94 	bl	800a658 <__assert_func>
 8009b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b34:	6006      	str	r6, [r0, #0]
 8009b36:	60c6      	str	r6, [r0, #12]
 8009b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b3a:	68f3      	ldr	r3, [r6, #12]
 8009b3c:	b183      	cbz	r3, 8009b60 <_Balloc+0x50>
 8009b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b46:	b9b8      	cbnz	r0, 8009b78 <_Balloc+0x68>
 8009b48:	2101      	movs	r1, #1
 8009b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b4e:	1d72      	adds	r2, r6, #5
 8009b50:	0092      	lsls	r2, r2, #2
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 fb5a 	bl	800a20c <_calloc_r>
 8009b58:	b160      	cbz	r0, 8009b74 <_Balloc+0x64>
 8009b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b5e:	e00e      	b.n	8009b7e <_Balloc+0x6e>
 8009b60:	2221      	movs	r2, #33	; 0x21
 8009b62:	2104      	movs	r1, #4
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fb51 	bl	800a20c <_calloc_r>
 8009b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6c:	60f0      	str	r0, [r6, #12]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e4      	bne.n	8009b3e <_Balloc+0x2e>
 8009b74:	2000      	movs	r0, #0
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
 8009b78:	6802      	ldr	r2, [r0, #0]
 8009b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b84:	e7f7      	b.n	8009b76 <_Balloc+0x66>
 8009b86:	bf00      	nop
 8009b88:	0800b389 	.word	0x0800b389
 8009b8c:	0800b410 	.word	0x0800b410

08009b90 <_Bfree>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b94:	4605      	mov	r5, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	b976      	cbnz	r6, 8009bb8 <_Bfree+0x28>
 8009b9a:	2010      	movs	r0, #16
 8009b9c:	f7ff ffb0 	bl	8009b00 <malloc>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6268      	str	r0, [r5, #36]	; 0x24
 8009ba4:	b920      	cbnz	r0, 8009bb0 <_Bfree+0x20>
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <_Bfree+0x3c>)
 8009ba8:	4809      	ldr	r0, [pc, #36]	; (8009bd0 <_Bfree+0x40>)
 8009baa:	218a      	movs	r1, #138	; 0x8a
 8009bac:	f000 fd54 	bl	800a658 <__assert_func>
 8009bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bb4:	6006      	str	r6, [r0, #0]
 8009bb6:	60c6      	str	r6, [r0, #12]
 8009bb8:	b13c      	cbz	r4, 8009bca <_Bfree+0x3a>
 8009bba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bbc:	6862      	ldr	r2, [r4, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bc4:	6021      	str	r1, [r4, #0]
 8009bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	0800b389 	.word	0x0800b389
 8009bd0:	0800b410 	.word	0x0800b410

08009bd4 <__multadd>:
 8009bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd8:	690e      	ldr	r6, [r1, #16]
 8009bda:	4607      	mov	r7, r0
 8009bdc:	4698      	mov	r8, r3
 8009bde:	460c      	mov	r4, r1
 8009be0:	f101 0014 	add.w	r0, r1, #20
 8009be4:	2300      	movs	r3, #0
 8009be6:	6805      	ldr	r5, [r0, #0]
 8009be8:	b2a9      	uxth	r1, r5
 8009bea:	fb02 8101 	mla	r1, r2, r1, r8
 8009bee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009bf2:	0c2d      	lsrs	r5, r5, #16
 8009bf4:	fb02 c505 	mla	r5, r2, r5, ip
 8009bf8:	b289      	uxth	r1, r1
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009c00:	429e      	cmp	r6, r3
 8009c02:	f840 1b04 	str.w	r1, [r0], #4
 8009c06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009c0a:	dcec      	bgt.n	8009be6 <__multadd+0x12>
 8009c0c:	f1b8 0f00 	cmp.w	r8, #0
 8009c10:	d022      	beq.n	8009c58 <__multadd+0x84>
 8009c12:	68a3      	ldr	r3, [r4, #8]
 8009c14:	42b3      	cmp	r3, r6
 8009c16:	dc19      	bgt.n	8009c4c <__multadd+0x78>
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	f7ff ff77 	bl	8009b10 <_Balloc>
 8009c22:	4605      	mov	r5, r0
 8009c24:	b928      	cbnz	r0, 8009c32 <__multadd+0x5e>
 8009c26:	4602      	mov	r2, r0
 8009c28:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <__multadd+0x8c>)
 8009c2a:	480e      	ldr	r0, [pc, #56]	; (8009c64 <__multadd+0x90>)
 8009c2c:	21b5      	movs	r1, #181	; 0xb5
 8009c2e:	f000 fd13 	bl	800a658 <__assert_func>
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	3202      	adds	r2, #2
 8009c36:	f104 010c 	add.w	r1, r4, #12
 8009c3a:	0092      	lsls	r2, r2, #2
 8009c3c:	300c      	adds	r0, #12
 8009c3e:	f7fe fc43 	bl	80084c8 <memcpy>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7ff ffa3 	bl	8009b90 <_Bfree>
 8009c4a:	462c      	mov	r4, r5
 8009c4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009c50:	3601      	adds	r6, #1
 8009c52:	f8c3 8014 	str.w	r8, [r3, #20]
 8009c56:	6126      	str	r6, [r4, #16]
 8009c58:	4620      	mov	r0, r4
 8009c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800b3ff 	.word	0x0800b3ff
 8009c64:	0800b410 	.word	0x0800b410

08009c68 <__hi0bits>:
 8009c68:	0c03      	lsrs	r3, r0, #16
 8009c6a:	041b      	lsls	r3, r3, #16
 8009c6c:	b9d3      	cbnz	r3, 8009ca4 <__hi0bits+0x3c>
 8009c6e:	0400      	lsls	r0, r0, #16
 8009c70:	2310      	movs	r3, #16
 8009c72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c76:	bf04      	itt	eq
 8009c78:	0200      	lsleq	r0, r0, #8
 8009c7a:	3308      	addeq	r3, #8
 8009c7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c80:	bf04      	itt	eq
 8009c82:	0100      	lsleq	r0, r0, #4
 8009c84:	3304      	addeq	r3, #4
 8009c86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c8a:	bf04      	itt	eq
 8009c8c:	0080      	lsleq	r0, r0, #2
 8009c8e:	3302      	addeq	r3, #2
 8009c90:	2800      	cmp	r0, #0
 8009c92:	db05      	blt.n	8009ca0 <__hi0bits+0x38>
 8009c94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c98:	f103 0301 	add.w	r3, r3, #1
 8009c9c:	bf08      	it	eq
 8009c9e:	2320      	moveq	r3, #32
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	4770      	bx	lr
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e7e4      	b.n	8009c72 <__hi0bits+0xa>

08009ca8 <__lo0bits>:
 8009ca8:	6803      	ldr	r3, [r0, #0]
 8009caa:	f013 0207 	ands.w	r2, r3, #7
 8009cae:	4601      	mov	r1, r0
 8009cb0:	d00b      	beq.n	8009cca <__lo0bits+0x22>
 8009cb2:	07da      	lsls	r2, r3, #31
 8009cb4:	d424      	bmi.n	8009d00 <__lo0bits+0x58>
 8009cb6:	0798      	lsls	r0, r3, #30
 8009cb8:	bf49      	itett	mi
 8009cba:	085b      	lsrmi	r3, r3, #1
 8009cbc:	089b      	lsrpl	r3, r3, #2
 8009cbe:	2001      	movmi	r0, #1
 8009cc0:	600b      	strmi	r3, [r1, #0]
 8009cc2:	bf5c      	itt	pl
 8009cc4:	600b      	strpl	r3, [r1, #0]
 8009cc6:	2002      	movpl	r0, #2
 8009cc8:	4770      	bx	lr
 8009cca:	b298      	uxth	r0, r3
 8009ccc:	b9b0      	cbnz	r0, 8009cfc <__lo0bits+0x54>
 8009cce:	0c1b      	lsrs	r3, r3, #16
 8009cd0:	2010      	movs	r0, #16
 8009cd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009cd6:	bf04      	itt	eq
 8009cd8:	0a1b      	lsreq	r3, r3, #8
 8009cda:	3008      	addeq	r0, #8
 8009cdc:	071a      	lsls	r2, r3, #28
 8009cde:	bf04      	itt	eq
 8009ce0:	091b      	lsreq	r3, r3, #4
 8009ce2:	3004      	addeq	r0, #4
 8009ce4:	079a      	lsls	r2, r3, #30
 8009ce6:	bf04      	itt	eq
 8009ce8:	089b      	lsreq	r3, r3, #2
 8009cea:	3002      	addeq	r0, #2
 8009cec:	07da      	lsls	r2, r3, #31
 8009cee:	d403      	bmi.n	8009cf8 <__lo0bits+0x50>
 8009cf0:	085b      	lsrs	r3, r3, #1
 8009cf2:	f100 0001 	add.w	r0, r0, #1
 8009cf6:	d005      	beq.n	8009d04 <__lo0bits+0x5c>
 8009cf8:	600b      	str	r3, [r1, #0]
 8009cfa:	4770      	bx	lr
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	e7e8      	b.n	8009cd2 <__lo0bits+0x2a>
 8009d00:	2000      	movs	r0, #0
 8009d02:	4770      	bx	lr
 8009d04:	2020      	movs	r0, #32
 8009d06:	4770      	bx	lr

08009d08 <__i2b>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	f7ff feff 	bl	8009b10 <_Balloc>
 8009d12:	4602      	mov	r2, r0
 8009d14:	b928      	cbnz	r0, 8009d22 <__i2b+0x1a>
 8009d16:	4b05      	ldr	r3, [pc, #20]	; (8009d2c <__i2b+0x24>)
 8009d18:	4805      	ldr	r0, [pc, #20]	; (8009d30 <__i2b+0x28>)
 8009d1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d1e:	f000 fc9b 	bl	800a658 <__assert_func>
 8009d22:	2301      	movs	r3, #1
 8009d24:	6144      	str	r4, [r0, #20]
 8009d26:	6103      	str	r3, [r0, #16]
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	bf00      	nop
 8009d2c:	0800b3ff 	.word	0x0800b3ff
 8009d30:	0800b410 	.word	0x0800b410

08009d34 <__multiply>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	4614      	mov	r4, r2
 8009d3a:	690a      	ldr	r2, [r1, #16]
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	bfb8      	it	lt
 8009d42:	460b      	movlt	r3, r1
 8009d44:	460d      	mov	r5, r1
 8009d46:	bfbc      	itt	lt
 8009d48:	4625      	movlt	r5, r4
 8009d4a:	461c      	movlt	r4, r3
 8009d4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009d50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d54:	68ab      	ldr	r3, [r5, #8]
 8009d56:	6869      	ldr	r1, [r5, #4]
 8009d58:	eb0a 0709 	add.w	r7, sl, r9
 8009d5c:	42bb      	cmp	r3, r7
 8009d5e:	b085      	sub	sp, #20
 8009d60:	bfb8      	it	lt
 8009d62:	3101      	addlt	r1, #1
 8009d64:	f7ff fed4 	bl	8009b10 <_Balloc>
 8009d68:	b930      	cbnz	r0, 8009d78 <__multiply+0x44>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	4b42      	ldr	r3, [pc, #264]	; (8009e78 <__multiply+0x144>)
 8009d6e:	4843      	ldr	r0, [pc, #268]	; (8009e7c <__multiply+0x148>)
 8009d70:	f240 115d 	movw	r1, #349	; 0x15d
 8009d74:	f000 fc70 	bl	800a658 <__assert_func>
 8009d78:	f100 0614 	add.w	r6, r0, #20
 8009d7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009d80:	4633      	mov	r3, r6
 8009d82:	2200      	movs	r2, #0
 8009d84:	4543      	cmp	r3, r8
 8009d86:	d31e      	bcc.n	8009dc6 <__multiply+0x92>
 8009d88:	f105 0c14 	add.w	ip, r5, #20
 8009d8c:	f104 0314 	add.w	r3, r4, #20
 8009d90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009d94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009d98:	9202      	str	r2, [sp, #8]
 8009d9a:	ebac 0205 	sub.w	r2, ip, r5
 8009d9e:	3a15      	subs	r2, #21
 8009da0:	f022 0203 	bic.w	r2, r2, #3
 8009da4:	3204      	adds	r2, #4
 8009da6:	f105 0115 	add.w	r1, r5, #21
 8009daa:	458c      	cmp	ip, r1
 8009dac:	bf38      	it	cc
 8009dae:	2204      	movcc	r2, #4
 8009db0:	9201      	str	r2, [sp, #4]
 8009db2:	9a02      	ldr	r2, [sp, #8]
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d808      	bhi.n	8009dcc <__multiply+0x98>
 8009dba:	2f00      	cmp	r7, #0
 8009dbc:	dc55      	bgt.n	8009e6a <__multiply+0x136>
 8009dbe:	6107      	str	r7, [r0, #16]
 8009dc0:	b005      	add	sp, #20
 8009dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc6:	f843 2b04 	str.w	r2, [r3], #4
 8009dca:	e7db      	b.n	8009d84 <__multiply+0x50>
 8009dcc:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dd0:	f1ba 0f00 	cmp.w	sl, #0
 8009dd4:	d020      	beq.n	8009e18 <__multiply+0xe4>
 8009dd6:	f105 0e14 	add.w	lr, r5, #20
 8009dda:	46b1      	mov	r9, r6
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009de2:	f8d9 b000 	ldr.w	fp, [r9]
 8009de6:	b2a1      	uxth	r1, r4
 8009de8:	fa1f fb8b 	uxth.w	fp, fp
 8009dec:	fb0a b101 	mla	r1, sl, r1, fp
 8009df0:	4411      	add	r1, r2
 8009df2:	f8d9 2000 	ldr.w	r2, [r9]
 8009df6:	0c24      	lsrs	r4, r4, #16
 8009df8:	0c12      	lsrs	r2, r2, #16
 8009dfa:	fb0a 2404 	mla	r4, sl, r4, r2
 8009dfe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009e02:	b289      	uxth	r1, r1
 8009e04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e08:	45f4      	cmp	ip, lr
 8009e0a:	f849 1b04 	str.w	r1, [r9], #4
 8009e0e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009e12:	d8e4      	bhi.n	8009dde <__multiply+0xaa>
 8009e14:	9901      	ldr	r1, [sp, #4]
 8009e16:	5072      	str	r2, [r6, r1]
 8009e18:	9a03      	ldr	r2, [sp, #12]
 8009e1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	f1b9 0f00 	cmp.w	r9, #0
 8009e24:	d01f      	beq.n	8009e66 <__multiply+0x132>
 8009e26:	6834      	ldr	r4, [r6, #0]
 8009e28:	f105 0114 	add.w	r1, r5, #20
 8009e2c:	46b6      	mov	lr, r6
 8009e2e:	f04f 0a00 	mov.w	sl, #0
 8009e32:	880a      	ldrh	r2, [r1, #0]
 8009e34:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009e38:	fb09 b202 	mla	r2, r9, r2, fp
 8009e3c:	4492      	add	sl, r2
 8009e3e:	b2a4      	uxth	r4, r4
 8009e40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009e44:	f84e 4b04 	str.w	r4, [lr], #4
 8009e48:	f851 4b04 	ldr.w	r4, [r1], #4
 8009e4c:	f8be 2000 	ldrh.w	r2, [lr]
 8009e50:	0c24      	lsrs	r4, r4, #16
 8009e52:	fb09 2404 	mla	r4, r9, r4, r2
 8009e56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009e5a:	458c      	cmp	ip, r1
 8009e5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e60:	d8e7      	bhi.n	8009e32 <__multiply+0xfe>
 8009e62:	9a01      	ldr	r2, [sp, #4]
 8009e64:	50b4      	str	r4, [r6, r2]
 8009e66:	3604      	adds	r6, #4
 8009e68:	e7a3      	b.n	8009db2 <__multiply+0x7e>
 8009e6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1a5      	bne.n	8009dbe <__multiply+0x8a>
 8009e72:	3f01      	subs	r7, #1
 8009e74:	e7a1      	b.n	8009dba <__multiply+0x86>
 8009e76:	bf00      	nop
 8009e78:	0800b3ff 	.word	0x0800b3ff
 8009e7c:	0800b410 	.word	0x0800b410

08009e80 <__pow5mult>:
 8009e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e84:	4615      	mov	r5, r2
 8009e86:	f012 0203 	ands.w	r2, r2, #3
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	460f      	mov	r7, r1
 8009e8e:	d007      	beq.n	8009ea0 <__pow5mult+0x20>
 8009e90:	4c25      	ldr	r4, [pc, #148]	; (8009f28 <__pow5mult+0xa8>)
 8009e92:	3a01      	subs	r2, #1
 8009e94:	2300      	movs	r3, #0
 8009e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e9a:	f7ff fe9b 	bl	8009bd4 <__multadd>
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	10ad      	asrs	r5, r5, #2
 8009ea2:	d03d      	beq.n	8009f20 <__pow5mult+0xa0>
 8009ea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ea6:	b97c      	cbnz	r4, 8009ec8 <__pow5mult+0x48>
 8009ea8:	2010      	movs	r0, #16
 8009eaa:	f7ff fe29 	bl	8009b00 <malloc>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6270      	str	r0, [r6, #36]	; 0x24
 8009eb2:	b928      	cbnz	r0, 8009ec0 <__pow5mult+0x40>
 8009eb4:	4b1d      	ldr	r3, [pc, #116]	; (8009f2c <__pow5mult+0xac>)
 8009eb6:	481e      	ldr	r0, [pc, #120]	; (8009f30 <__pow5mult+0xb0>)
 8009eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ebc:	f000 fbcc 	bl	800a658 <__assert_func>
 8009ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ec4:	6004      	str	r4, [r0, #0]
 8009ec6:	60c4      	str	r4, [r0, #12]
 8009ec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ed0:	b94c      	cbnz	r4, 8009ee6 <__pow5mult+0x66>
 8009ed2:	f240 2171 	movw	r1, #625	; 0x271
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7ff ff16 	bl	8009d08 <__i2b>
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	f04f 0900 	mov.w	r9, #0
 8009eea:	07eb      	lsls	r3, r5, #31
 8009eec:	d50a      	bpl.n	8009f04 <__pow5mult+0x84>
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7ff ff1e 	bl	8009d34 <__multiply>
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4680      	mov	r8, r0
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7ff fe47 	bl	8009b90 <_Bfree>
 8009f02:	4647      	mov	r7, r8
 8009f04:	106d      	asrs	r5, r5, #1
 8009f06:	d00b      	beq.n	8009f20 <__pow5mult+0xa0>
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	b938      	cbnz	r0, 8009f1c <__pow5mult+0x9c>
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff ff0f 	bl	8009d34 <__multiply>
 8009f16:	6020      	str	r0, [r4, #0]
 8009f18:	f8c0 9000 	str.w	r9, [r0]
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	e7e4      	b.n	8009eea <__pow5mult+0x6a>
 8009f20:	4638      	mov	r0, r7
 8009f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f26:	bf00      	nop
 8009f28:	0800b560 	.word	0x0800b560
 8009f2c:	0800b389 	.word	0x0800b389
 8009f30:	0800b410 	.word	0x0800b410

08009f34 <__lshift>:
 8009f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6849      	ldr	r1, [r1, #4]
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	4607      	mov	r7, r0
 8009f46:	4691      	mov	r9, r2
 8009f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f4c:	f108 0601 	add.w	r6, r8, #1
 8009f50:	42b3      	cmp	r3, r6
 8009f52:	db0b      	blt.n	8009f6c <__lshift+0x38>
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff fddb 	bl	8009b10 <_Balloc>
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	b948      	cbnz	r0, 8009f72 <__lshift+0x3e>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	4b28      	ldr	r3, [pc, #160]	; (800a004 <__lshift+0xd0>)
 8009f62:	4829      	ldr	r0, [pc, #164]	; (800a008 <__lshift+0xd4>)
 8009f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f68:	f000 fb76 	bl	800a658 <__assert_func>
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	e7ee      	b.n	8009f50 <__lshift+0x1c>
 8009f72:	2300      	movs	r3, #0
 8009f74:	f100 0114 	add.w	r1, r0, #20
 8009f78:	f100 0210 	add.w	r2, r0, #16
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	4553      	cmp	r3, sl
 8009f80:	db33      	blt.n	8009fea <__lshift+0xb6>
 8009f82:	6920      	ldr	r0, [r4, #16]
 8009f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f88:	f104 0314 	add.w	r3, r4, #20
 8009f8c:	f019 091f 	ands.w	r9, r9, #31
 8009f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f98:	d02b      	beq.n	8009ff2 <__lshift+0xbe>
 8009f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f9e:	468a      	mov	sl, r1
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8009fa8:	4302      	orrs	r2, r0
 8009faa:	f84a 2b04 	str.w	r2, [sl], #4
 8009fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb2:	459c      	cmp	ip, r3
 8009fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fb8:	d8f3      	bhi.n	8009fa2 <__lshift+0x6e>
 8009fba:	ebac 0304 	sub.w	r3, ip, r4
 8009fbe:	3b15      	subs	r3, #21
 8009fc0:	f023 0303 	bic.w	r3, r3, #3
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	f104 0015 	add.w	r0, r4, #21
 8009fca:	4584      	cmp	ip, r0
 8009fcc:	bf38      	it	cc
 8009fce:	2304      	movcc	r3, #4
 8009fd0:	50ca      	str	r2, [r1, r3]
 8009fd2:	b10a      	cbz	r2, 8009fd8 <__lshift+0xa4>
 8009fd4:	f108 0602 	add.w	r6, r8, #2
 8009fd8:	3e01      	subs	r6, #1
 8009fda:	4638      	mov	r0, r7
 8009fdc:	612e      	str	r6, [r5, #16]
 8009fde:	4621      	mov	r1, r4
 8009fe0:	f7ff fdd6 	bl	8009b90 <_Bfree>
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fee:	3301      	adds	r3, #1
 8009ff0:	e7c5      	b.n	8009f7e <__lshift+0x4a>
 8009ff2:	3904      	subs	r1, #4
 8009ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ffc:	459c      	cmp	ip, r3
 8009ffe:	d8f9      	bhi.n	8009ff4 <__lshift+0xc0>
 800a000:	e7ea      	b.n	8009fd8 <__lshift+0xa4>
 800a002:	bf00      	nop
 800a004:	0800b3ff 	.word	0x0800b3ff
 800a008:	0800b410 	.word	0x0800b410

0800a00c <__mcmp>:
 800a00c:	b530      	push	{r4, r5, lr}
 800a00e:	6902      	ldr	r2, [r0, #16]
 800a010:	690c      	ldr	r4, [r1, #16]
 800a012:	1b12      	subs	r2, r2, r4
 800a014:	d10e      	bne.n	800a034 <__mcmp+0x28>
 800a016:	f100 0314 	add.w	r3, r0, #20
 800a01a:	3114      	adds	r1, #20
 800a01c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a02c:	42a5      	cmp	r5, r4
 800a02e:	d003      	beq.n	800a038 <__mcmp+0x2c>
 800a030:	d305      	bcc.n	800a03e <__mcmp+0x32>
 800a032:	2201      	movs	r2, #1
 800a034:	4610      	mov	r0, r2
 800a036:	bd30      	pop	{r4, r5, pc}
 800a038:	4283      	cmp	r3, r0
 800a03a:	d3f3      	bcc.n	800a024 <__mcmp+0x18>
 800a03c:	e7fa      	b.n	800a034 <__mcmp+0x28>
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295
 800a042:	e7f7      	b.n	800a034 <__mcmp+0x28>

0800a044 <__mdiff>:
 800a044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	460c      	mov	r4, r1
 800a04a:	4606      	mov	r6, r0
 800a04c:	4611      	mov	r1, r2
 800a04e:	4620      	mov	r0, r4
 800a050:	4617      	mov	r7, r2
 800a052:	f7ff ffdb 	bl	800a00c <__mcmp>
 800a056:	1e05      	subs	r5, r0, #0
 800a058:	d110      	bne.n	800a07c <__mdiff+0x38>
 800a05a:	4629      	mov	r1, r5
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff fd57 	bl	8009b10 <_Balloc>
 800a062:	b930      	cbnz	r0, 800a072 <__mdiff+0x2e>
 800a064:	4b39      	ldr	r3, [pc, #228]	; (800a14c <__mdiff+0x108>)
 800a066:	4602      	mov	r2, r0
 800a068:	f240 2132 	movw	r1, #562	; 0x232
 800a06c:	4838      	ldr	r0, [pc, #224]	; (800a150 <__mdiff+0x10c>)
 800a06e:	f000 faf3 	bl	800a658 <__assert_func>
 800a072:	2301      	movs	r3, #1
 800a074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	bfa4      	itt	ge
 800a07e:	463b      	movge	r3, r7
 800a080:	4627      	movge	r7, r4
 800a082:	4630      	mov	r0, r6
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	bfa6      	itte	ge
 800a088:	461c      	movge	r4, r3
 800a08a:	2500      	movge	r5, #0
 800a08c:	2501      	movlt	r5, #1
 800a08e:	f7ff fd3f 	bl	8009b10 <_Balloc>
 800a092:	b920      	cbnz	r0, 800a09e <__mdiff+0x5a>
 800a094:	4b2d      	ldr	r3, [pc, #180]	; (800a14c <__mdiff+0x108>)
 800a096:	4602      	mov	r2, r0
 800a098:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a09c:	e7e6      	b.n	800a06c <__mdiff+0x28>
 800a09e:	693e      	ldr	r6, [r7, #16]
 800a0a0:	60c5      	str	r5, [r0, #12]
 800a0a2:	6925      	ldr	r5, [r4, #16]
 800a0a4:	f107 0114 	add.w	r1, r7, #20
 800a0a8:	f104 0914 	add.w	r9, r4, #20
 800a0ac:	f100 0e14 	add.w	lr, r0, #20
 800a0b0:	f107 0210 	add.w	r2, r7, #16
 800a0b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a0b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a0bc:	46f2      	mov	sl, lr
 800a0be:	2700      	movs	r7, #0
 800a0c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0c8:	fa1f f883 	uxth.w	r8, r3
 800a0cc:	fa17 f78b 	uxtah	r7, r7, fp
 800a0d0:	0c1b      	lsrs	r3, r3, #16
 800a0d2:	eba7 0808 	sub.w	r8, r7, r8
 800a0d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0de:	fa1f f888 	uxth.w	r8, r8
 800a0e2:	141f      	asrs	r7, r3, #16
 800a0e4:	454d      	cmp	r5, r9
 800a0e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0ea:	f84a 3b04 	str.w	r3, [sl], #4
 800a0ee:	d8e7      	bhi.n	800a0c0 <__mdiff+0x7c>
 800a0f0:	1b2b      	subs	r3, r5, r4
 800a0f2:	3b15      	subs	r3, #21
 800a0f4:	f023 0303 	bic.w	r3, r3, #3
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	3415      	adds	r4, #21
 800a0fc:	42a5      	cmp	r5, r4
 800a0fe:	bf38      	it	cc
 800a100:	2304      	movcc	r3, #4
 800a102:	4419      	add	r1, r3
 800a104:	4473      	add	r3, lr
 800a106:	469e      	mov	lr, r3
 800a108:	460d      	mov	r5, r1
 800a10a:	4565      	cmp	r5, ip
 800a10c:	d30e      	bcc.n	800a12c <__mdiff+0xe8>
 800a10e:	f10c 0203 	add.w	r2, ip, #3
 800a112:	1a52      	subs	r2, r2, r1
 800a114:	f022 0203 	bic.w	r2, r2, #3
 800a118:	3903      	subs	r1, #3
 800a11a:	458c      	cmp	ip, r1
 800a11c:	bf38      	it	cc
 800a11e:	2200      	movcc	r2, #0
 800a120:	441a      	add	r2, r3
 800a122:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a126:	b17b      	cbz	r3, 800a148 <__mdiff+0x104>
 800a128:	6106      	str	r6, [r0, #16]
 800a12a:	e7a5      	b.n	800a078 <__mdiff+0x34>
 800a12c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a130:	fa17 f488 	uxtah	r4, r7, r8
 800a134:	1422      	asrs	r2, r4, #16
 800a136:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a13a:	b2a4      	uxth	r4, r4
 800a13c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a140:	f84e 4b04 	str.w	r4, [lr], #4
 800a144:	1417      	asrs	r7, r2, #16
 800a146:	e7e0      	b.n	800a10a <__mdiff+0xc6>
 800a148:	3e01      	subs	r6, #1
 800a14a:	e7ea      	b.n	800a122 <__mdiff+0xde>
 800a14c:	0800b3ff 	.word	0x0800b3ff
 800a150:	0800b410 	.word	0x0800b410

0800a154 <__d2b>:
 800a154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a158:	4689      	mov	r9, r1
 800a15a:	2101      	movs	r1, #1
 800a15c:	ec57 6b10 	vmov	r6, r7, d0
 800a160:	4690      	mov	r8, r2
 800a162:	f7ff fcd5 	bl	8009b10 <_Balloc>
 800a166:	4604      	mov	r4, r0
 800a168:	b930      	cbnz	r0, 800a178 <__d2b+0x24>
 800a16a:	4602      	mov	r2, r0
 800a16c:	4b25      	ldr	r3, [pc, #148]	; (800a204 <__d2b+0xb0>)
 800a16e:	4826      	ldr	r0, [pc, #152]	; (800a208 <__d2b+0xb4>)
 800a170:	f240 310a 	movw	r1, #778	; 0x30a
 800a174:	f000 fa70 	bl	800a658 <__assert_func>
 800a178:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a17c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a180:	bb35      	cbnz	r5, 800a1d0 <__d2b+0x7c>
 800a182:	2e00      	cmp	r6, #0
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	d028      	beq.n	800a1da <__d2b+0x86>
 800a188:	4668      	mov	r0, sp
 800a18a:	9600      	str	r6, [sp, #0]
 800a18c:	f7ff fd8c 	bl	8009ca8 <__lo0bits>
 800a190:	9900      	ldr	r1, [sp, #0]
 800a192:	b300      	cbz	r0, 800a1d6 <__d2b+0x82>
 800a194:	9a01      	ldr	r2, [sp, #4]
 800a196:	f1c0 0320 	rsb	r3, r0, #32
 800a19a:	fa02 f303 	lsl.w	r3, r2, r3
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	40c2      	lsrs	r2, r0
 800a1a2:	6163      	str	r3, [r4, #20]
 800a1a4:	9201      	str	r2, [sp, #4]
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	61a3      	str	r3, [r4, #24]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bf14      	ite	ne
 800a1ae:	2202      	movne	r2, #2
 800a1b0:	2201      	moveq	r2, #1
 800a1b2:	6122      	str	r2, [r4, #16]
 800a1b4:	b1d5      	cbz	r5, 800a1ec <__d2b+0x98>
 800a1b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1ba:	4405      	add	r5, r0
 800a1bc:	f8c9 5000 	str.w	r5, [r9]
 800a1c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1c4:	f8c8 0000 	str.w	r0, [r8]
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	b003      	add	sp, #12
 800a1cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1d4:	e7d5      	b.n	800a182 <__d2b+0x2e>
 800a1d6:	6161      	str	r1, [r4, #20]
 800a1d8:	e7e5      	b.n	800a1a6 <__d2b+0x52>
 800a1da:	a801      	add	r0, sp, #4
 800a1dc:	f7ff fd64 	bl	8009ca8 <__lo0bits>
 800a1e0:	9b01      	ldr	r3, [sp, #4]
 800a1e2:	6163      	str	r3, [r4, #20]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	6122      	str	r2, [r4, #16]
 800a1e8:	3020      	adds	r0, #32
 800a1ea:	e7e3      	b.n	800a1b4 <__d2b+0x60>
 800a1ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1f4:	f8c9 0000 	str.w	r0, [r9]
 800a1f8:	6918      	ldr	r0, [r3, #16]
 800a1fa:	f7ff fd35 	bl	8009c68 <__hi0bits>
 800a1fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a202:	e7df      	b.n	800a1c4 <__d2b+0x70>
 800a204:	0800b3ff 	.word	0x0800b3ff
 800a208:	0800b410 	.word	0x0800b410

0800a20c <_calloc_r>:
 800a20c:	b513      	push	{r0, r1, r4, lr}
 800a20e:	434a      	muls	r2, r1
 800a210:	4611      	mov	r1, r2
 800a212:	9201      	str	r2, [sp, #4]
 800a214:	f000 f85a 	bl	800a2cc <_malloc_r>
 800a218:	4604      	mov	r4, r0
 800a21a:	b118      	cbz	r0, 800a224 <_calloc_r+0x18>
 800a21c:	9a01      	ldr	r2, [sp, #4]
 800a21e:	2100      	movs	r1, #0
 800a220:	f7fe f960 	bl	80084e4 <memset>
 800a224:	4620      	mov	r0, r4
 800a226:	b002      	add	sp, #8
 800a228:	bd10      	pop	{r4, pc}
	...

0800a22c <_free_r>:
 800a22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a22e:	2900      	cmp	r1, #0
 800a230:	d048      	beq.n	800a2c4 <_free_r+0x98>
 800a232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a236:	9001      	str	r0, [sp, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f1a1 0404 	sub.w	r4, r1, #4
 800a23e:	bfb8      	it	lt
 800a240:	18e4      	addlt	r4, r4, r3
 800a242:	f000 fa65 	bl	800a710 <__malloc_lock>
 800a246:	4a20      	ldr	r2, [pc, #128]	; (800a2c8 <_free_r+0x9c>)
 800a248:	9801      	ldr	r0, [sp, #4]
 800a24a:	6813      	ldr	r3, [r2, #0]
 800a24c:	4615      	mov	r5, r2
 800a24e:	b933      	cbnz	r3, 800a25e <_free_r+0x32>
 800a250:	6063      	str	r3, [r4, #4]
 800a252:	6014      	str	r4, [r2, #0]
 800a254:	b003      	add	sp, #12
 800a256:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a25a:	f000 ba5f 	b.w	800a71c <__malloc_unlock>
 800a25e:	42a3      	cmp	r3, r4
 800a260:	d90b      	bls.n	800a27a <_free_r+0x4e>
 800a262:	6821      	ldr	r1, [r4, #0]
 800a264:	1862      	adds	r2, r4, r1
 800a266:	4293      	cmp	r3, r2
 800a268:	bf04      	itt	eq
 800a26a:	681a      	ldreq	r2, [r3, #0]
 800a26c:	685b      	ldreq	r3, [r3, #4]
 800a26e:	6063      	str	r3, [r4, #4]
 800a270:	bf04      	itt	eq
 800a272:	1852      	addeq	r2, r2, r1
 800a274:	6022      	streq	r2, [r4, #0]
 800a276:	602c      	str	r4, [r5, #0]
 800a278:	e7ec      	b.n	800a254 <_free_r+0x28>
 800a27a:	461a      	mov	r2, r3
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	b10b      	cbz	r3, 800a284 <_free_r+0x58>
 800a280:	42a3      	cmp	r3, r4
 800a282:	d9fa      	bls.n	800a27a <_free_r+0x4e>
 800a284:	6811      	ldr	r1, [r2, #0]
 800a286:	1855      	adds	r5, r2, r1
 800a288:	42a5      	cmp	r5, r4
 800a28a:	d10b      	bne.n	800a2a4 <_free_r+0x78>
 800a28c:	6824      	ldr	r4, [r4, #0]
 800a28e:	4421      	add	r1, r4
 800a290:	1854      	adds	r4, r2, r1
 800a292:	42a3      	cmp	r3, r4
 800a294:	6011      	str	r1, [r2, #0]
 800a296:	d1dd      	bne.n	800a254 <_free_r+0x28>
 800a298:	681c      	ldr	r4, [r3, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	6053      	str	r3, [r2, #4]
 800a29e:	4421      	add	r1, r4
 800a2a0:	6011      	str	r1, [r2, #0]
 800a2a2:	e7d7      	b.n	800a254 <_free_r+0x28>
 800a2a4:	d902      	bls.n	800a2ac <_free_r+0x80>
 800a2a6:	230c      	movs	r3, #12
 800a2a8:	6003      	str	r3, [r0, #0]
 800a2aa:	e7d3      	b.n	800a254 <_free_r+0x28>
 800a2ac:	6825      	ldr	r5, [r4, #0]
 800a2ae:	1961      	adds	r1, r4, r5
 800a2b0:	428b      	cmp	r3, r1
 800a2b2:	bf04      	itt	eq
 800a2b4:	6819      	ldreq	r1, [r3, #0]
 800a2b6:	685b      	ldreq	r3, [r3, #4]
 800a2b8:	6063      	str	r3, [r4, #4]
 800a2ba:	bf04      	itt	eq
 800a2bc:	1949      	addeq	r1, r1, r5
 800a2be:	6021      	streq	r1, [r4, #0]
 800a2c0:	6054      	str	r4, [r2, #4]
 800a2c2:	e7c7      	b.n	800a254 <_free_r+0x28>
 800a2c4:	b003      	add	sp, #12
 800a2c6:	bd30      	pop	{r4, r5, pc}
 800a2c8:	200054e4 	.word	0x200054e4

0800a2cc <_malloc_r>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	1ccd      	adds	r5, r1, #3
 800a2d0:	f025 0503 	bic.w	r5, r5, #3
 800a2d4:	3508      	adds	r5, #8
 800a2d6:	2d0c      	cmp	r5, #12
 800a2d8:	bf38      	it	cc
 800a2da:	250c      	movcc	r5, #12
 800a2dc:	2d00      	cmp	r5, #0
 800a2de:	4606      	mov	r6, r0
 800a2e0:	db01      	blt.n	800a2e6 <_malloc_r+0x1a>
 800a2e2:	42a9      	cmp	r1, r5
 800a2e4:	d903      	bls.n	800a2ee <_malloc_r+0x22>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	6033      	str	r3, [r6, #0]
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ee:	f000 fa0f 	bl	800a710 <__malloc_lock>
 800a2f2:	4921      	ldr	r1, [pc, #132]	; (800a378 <_malloc_r+0xac>)
 800a2f4:	680a      	ldr	r2, [r1, #0]
 800a2f6:	4614      	mov	r4, r2
 800a2f8:	b99c      	cbnz	r4, 800a322 <_malloc_r+0x56>
 800a2fa:	4f20      	ldr	r7, [pc, #128]	; (800a37c <_malloc_r+0xb0>)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	b923      	cbnz	r3, 800a30a <_malloc_r+0x3e>
 800a300:	4621      	mov	r1, r4
 800a302:	4630      	mov	r0, r6
 800a304:	f000 f998 	bl	800a638 <_sbrk_r>
 800a308:	6038      	str	r0, [r7, #0]
 800a30a:	4629      	mov	r1, r5
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 f993 	bl	800a638 <_sbrk_r>
 800a312:	1c43      	adds	r3, r0, #1
 800a314:	d123      	bne.n	800a35e <_malloc_r+0x92>
 800a316:	230c      	movs	r3, #12
 800a318:	6033      	str	r3, [r6, #0]
 800a31a:	4630      	mov	r0, r6
 800a31c:	f000 f9fe 	bl	800a71c <__malloc_unlock>
 800a320:	e7e3      	b.n	800a2ea <_malloc_r+0x1e>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	1b5b      	subs	r3, r3, r5
 800a326:	d417      	bmi.n	800a358 <_malloc_r+0x8c>
 800a328:	2b0b      	cmp	r3, #11
 800a32a:	d903      	bls.n	800a334 <_malloc_r+0x68>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	441c      	add	r4, r3
 800a330:	6025      	str	r5, [r4, #0]
 800a332:	e004      	b.n	800a33e <_malloc_r+0x72>
 800a334:	6863      	ldr	r3, [r4, #4]
 800a336:	42a2      	cmp	r2, r4
 800a338:	bf0c      	ite	eq
 800a33a:	600b      	streq	r3, [r1, #0]
 800a33c:	6053      	strne	r3, [r2, #4]
 800a33e:	4630      	mov	r0, r6
 800a340:	f000 f9ec 	bl	800a71c <__malloc_unlock>
 800a344:	f104 000b 	add.w	r0, r4, #11
 800a348:	1d23      	adds	r3, r4, #4
 800a34a:	f020 0007 	bic.w	r0, r0, #7
 800a34e:	1ac2      	subs	r2, r0, r3
 800a350:	d0cc      	beq.n	800a2ec <_malloc_r+0x20>
 800a352:	1a1b      	subs	r3, r3, r0
 800a354:	50a3      	str	r3, [r4, r2]
 800a356:	e7c9      	b.n	800a2ec <_malloc_r+0x20>
 800a358:	4622      	mov	r2, r4
 800a35a:	6864      	ldr	r4, [r4, #4]
 800a35c:	e7cc      	b.n	800a2f8 <_malloc_r+0x2c>
 800a35e:	1cc4      	adds	r4, r0, #3
 800a360:	f024 0403 	bic.w	r4, r4, #3
 800a364:	42a0      	cmp	r0, r4
 800a366:	d0e3      	beq.n	800a330 <_malloc_r+0x64>
 800a368:	1a21      	subs	r1, r4, r0
 800a36a:	4630      	mov	r0, r6
 800a36c:	f000 f964 	bl	800a638 <_sbrk_r>
 800a370:	3001      	adds	r0, #1
 800a372:	d1dd      	bne.n	800a330 <_malloc_r+0x64>
 800a374:	e7cf      	b.n	800a316 <_malloc_r+0x4a>
 800a376:	bf00      	nop
 800a378:	200054e4 	.word	0x200054e4
 800a37c:	200054e8 	.word	0x200054e8

0800a380 <__ssputs_r>:
 800a380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a384:	688e      	ldr	r6, [r1, #8]
 800a386:	429e      	cmp	r6, r3
 800a388:	4682      	mov	sl, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	4690      	mov	r8, r2
 800a38e:	461f      	mov	r7, r3
 800a390:	d838      	bhi.n	800a404 <__ssputs_r+0x84>
 800a392:	898a      	ldrh	r2, [r1, #12]
 800a394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a398:	d032      	beq.n	800a400 <__ssputs_r+0x80>
 800a39a:	6825      	ldr	r5, [r4, #0]
 800a39c:	6909      	ldr	r1, [r1, #16]
 800a39e:	eba5 0901 	sub.w	r9, r5, r1
 800a3a2:	6965      	ldr	r5, [r4, #20]
 800a3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	444b      	add	r3, r9
 800a3b0:	106d      	asrs	r5, r5, #1
 800a3b2:	429d      	cmp	r5, r3
 800a3b4:	bf38      	it	cc
 800a3b6:	461d      	movcc	r5, r3
 800a3b8:	0553      	lsls	r3, r2, #21
 800a3ba:	d531      	bpl.n	800a420 <__ssputs_r+0xa0>
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7ff ff85 	bl	800a2cc <_malloc_r>
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	b950      	cbnz	r0, 800a3dc <__ssputs_r+0x5c>
 800a3c6:	230c      	movs	r3, #12
 800a3c8:	f8ca 3000 	str.w	r3, [sl]
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3dc:	6921      	ldr	r1, [r4, #16]
 800a3de:	464a      	mov	r2, r9
 800a3e0:	f7fe f872 	bl	80084c8 <memcpy>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	6126      	str	r6, [r4, #16]
 800a3f2:	6165      	str	r5, [r4, #20]
 800a3f4:	444e      	add	r6, r9
 800a3f6:	eba5 0509 	sub.w	r5, r5, r9
 800a3fa:	6026      	str	r6, [r4, #0]
 800a3fc:	60a5      	str	r5, [r4, #8]
 800a3fe:	463e      	mov	r6, r7
 800a400:	42be      	cmp	r6, r7
 800a402:	d900      	bls.n	800a406 <__ssputs_r+0x86>
 800a404:	463e      	mov	r6, r7
 800a406:	4632      	mov	r2, r6
 800a408:	6820      	ldr	r0, [r4, #0]
 800a40a:	4641      	mov	r1, r8
 800a40c:	f000 f966 	bl	800a6dc <memmove>
 800a410:	68a3      	ldr	r3, [r4, #8]
 800a412:	6822      	ldr	r2, [r4, #0]
 800a414:	1b9b      	subs	r3, r3, r6
 800a416:	4432      	add	r2, r6
 800a418:	60a3      	str	r3, [r4, #8]
 800a41a:	6022      	str	r2, [r4, #0]
 800a41c:	2000      	movs	r0, #0
 800a41e:	e7db      	b.n	800a3d8 <__ssputs_r+0x58>
 800a420:	462a      	mov	r2, r5
 800a422:	f000 f981 	bl	800a728 <_realloc_r>
 800a426:	4606      	mov	r6, r0
 800a428:	2800      	cmp	r0, #0
 800a42a:	d1e1      	bne.n	800a3f0 <__ssputs_r+0x70>
 800a42c:	6921      	ldr	r1, [r4, #16]
 800a42e:	4650      	mov	r0, sl
 800a430:	f7ff fefc 	bl	800a22c <_free_r>
 800a434:	e7c7      	b.n	800a3c6 <__ssputs_r+0x46>
	...

0800a438 <_svfiprintf_r>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	4698      	mov	r8, r3
 800a43e:	898b      	ldrh	r3, [r1, #12]
 800a440:	061b      	lsls	r3, r3, #24
 800a442:	b09d      	sub	sp, #116	; 0x74
 800a444:	4607      	mov	r7, r0
 800a446:	460d      	mov	r5, r1
 800a448:	4614      	mov	r4, r2
 800a44a:	d50e      	bpl.n	800a46a <_svfiprintf_r+0x32>
 800a44c:	690b      	ldr	r3, [r1, #16]
 800a44e:	b963      	cbnz	r3, 800a46a <_svfiprintf_r+0x32>
 800a450:	2140      	movs	r1, #64	; 0x40
 800a452:	f7ff ff3b 	bl	800a2cc <_malloc_r>
 800a456:	6028      	str	r0, [r5, #0]
 800a458:	6128      	str	r0, [r5, #16]
 800a45a:	b920      	cbnz	r0, 800a466 <_svfiprintf_r+0x2e>
 800a45c:	230c      	movs	r3, #12
 800a45e:	603b      	str	r3, [r7, #0]
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	e0d1      	b.n	800a60a <_svfiprintf_r+0x1d2>
 800a466:	2340      	movs	r3, #64	; 0x40
 800a468:	616b      	str	r3, [r5, #20]
 800a46a:	2300      	movs	r3, #0
 800a46c:	9309      	str	r3, [sp, #36]	; 0x24
 800a46e:	2320      	movs	r3, #32
 800a470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a474:	f8cd 800c 	str.w	r8, [sp, #12]
 800a478:	2330      	movs	r3, #48	; 0x30
 800a47a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a624 <_svfiprintf_r+0x1ec>
 800a47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a482:	f04f 0901 	mov.w	r9, #1
 800a486:	4623      	mov	r3, r4
 800a488:	469a      	mov	sl, r3
 800a48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a48e:	b10a      	cbz	r2, 800a494 <_svfiprintf_r+0x5c>
 800a490:	2a25      	cmp	r2, #37	; 0x25
 800a492:	d1f9      	bne.n	800a488 <_svfiprintf_r+0x50>
 800a494:	ebba 0b04 	subs.w	fp, sl, r4
 800a498:	d00b      	beq.n	800a4b2 <_svfiprintf_r+0x7a>
 800a49a:	465b      	mov	r3, fp
 800a49c:	4622      	mov	r2, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7ff ff6d 	bl	800a380 <__ssputs_r>
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	f000 80aa 	beq.w	800a600 <_svfiprintf_r+0x1c8>
 800a4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ae:	445a      	add	r2, fp
 800a4b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 80a2 	beq.w	800a600 <_svfiprintf_r+0x1c8>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4c6:	f10a 0a01 	add.w	sl, sl, #1
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	9307      	str	r3, [sp, #28]
 800a4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4d4:	4654      	mov	r4, sl
 800a4d6:	2205      	movs	r2, #5
 800a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4dc:	4851      	ldr	r0, [pc, #324]	; (800a624 <_svfiprintf_r+0x1ec>)
 800a4de:	f7f5 fed7 	bl	8000290 <memchr>
 800a4e2:	9a04      	ldr	r2, [sp, #16]
 800a4e4:	b9d8      	cbnz	r0, 800a51e <_svfiprintf_r+0xe6>
 800a4e6:	06d0      	lsls	r0, r2, #27
 800a4e8:	bf44      	itt	mi
 800a4ea:	2320      	movmi	r3, #32
 800a4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f0:	0711      	lsls	r1, r2, #28
 800a4f2:	bf44      	itt	mi
 800a4f4:	232b      	movmi	r3, #43	; 0x2b
 800a4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a500:	d015      	beq.n	800a52e <_svfiprintf_r+0xf6>
 800a502:	9a07      	ldr	r2, [sp, #28]
 800a504:	4654      	mov	r4, sl
 800a506:	2000      	movs	r0, #0
 800a508:	f04f 0c0a 	mov.w	ip, #10
 800a50c:	4621      	mov	r1, r4
 800a50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a512:	3b30      	subs	r3, #48	; 0x30
 800a514:	2b09      	cmp	r3, #9
 800a516:	d94e      	bls.n	800a5b6 <_svfiprintf_r+0x17e>
 800a518:	b1b0      	cbz	r0, 800a548 <_svfiprintf_r+0x110>
 800a51a:	9207      	str	r2, [sp, #28]
 800a51c:	e014      	b.n	800a548 <_svfiprintf_r+0x110>
 800a51e:	eba0 0308 	sub.w	r3, r0, r8
 800a522:	fa09 f303 	lsl.w	r3, r9, r3
 800a526:	4313      	orrs	r3, r2
 800a528:	9304      	str	r3, [sp, #16]
 800a52a:	46a2      	mov	sl, r4
 800a52c:	e7d2      	b.n	800a4d4 <_svfiprintf_r+0x9c>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	1d19      	adds	r1, r3, #4
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	9103      	str	r1, [sp, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfbb      	ittet	lt
 800a53a:	425b      	neglt	r3, r3
 800a53c:	f042 0202 	orrlt.w	r2, r2, #2
 800a540:	9307      	strge	r3, [sp, #28]
 800a542:	9307      	strlt	r3, [sp, #28]
 800a544:	bfb8      	it	lt
 800a546:	9204      	strlt	r2, [sp, #16]
 800a548:	7823      	ldrb	r3, [r4, #0]
 800a54a:	2b2e      	cmp	r3, #46	; 0x2e
 800a54c:	d10c      	bne.n	800a568 <_svfiprintf_r+0x130>
 800a54e:	7863      	ldrb	r3, [r4, #1]
 800a550:	2b2a      	cmp	r3, #42	; 0x2a
 800a552:	d135      	bne.n	800a5c0 <_svfiprintf_r+0x188>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	1d1a      	adds	r2, r3, #4
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	9203      	str	r2, [sp, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfb8      	it	lt
 800a560:	f04f 33ff 	movlt.w	r3, #4294967295
 800a564:	3402      	adds	r4, #2
 800a566:	9305      	str	r3, [sp, #20]
 800a568:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a634 <_svfiprintf_r+0x1fc>
 800a56c:	7821      	ldrb	r1, [r4, #0]
 800a56e:	2203      	movs	r2, #3
 800a570:	4650      	mov	r0, sl
 800a572:	f7f5 fe8d 	bl	8000290 <memchr>
 800a576:	b140      	cbz	r0, 800a58a <_svfiprintf_r+0x152>
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	eba0 000a 	sub.w	r0, r0, sl
 800a57e:	fa03 f000 	lsl.w	r0, r3, r0
 800a582:	9b04      	ldr	r3, [sp, #16]
 800a584:	4303      	orrs	r3, r0
 800a586:	3401      	adds	r4, #1
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58e:	4826      	ldr	r0, [pc, #152]	; (800a628 <_svfiprintf_r+0x1f0>)
 800a590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a594:	2206      	movs	r2, #6
 800a596:	f7f5 fe7b 	bl	8000290 <memchr>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d038      	beq.n	800a610 <_svfiprintf_r+0x1d8>
 800a59e:	4b23      	ldr	r3, [pc, #140]	; (800a62c <_svfiprintf_r+0x1f4>)
 800a5a0:	bb1b      	cbnz	r3, 800a5ea <_svfiprintf_r+0x1b2>
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	3307      	adds	r3, #7
 800a5a6:	f023 0307 	bic.w	r3, r3, #7
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	9303      	str	r3, [sp, #12]
 800a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b0:	4433      	add	r3, r6
 800a5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b4:	e767      	b.n	800a486 <_svfiprintf_r+0x4e>
 800a5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	2001      	movs	r0, #1
 800a5be:	e7a5      	b.n	800a50c <_svfiprintf_r+0xd4>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	3401      	adds	r4, #1
 800a5c4:	9305      	str	r3, [sp, #20]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	f04f 0c0a 	mov.w	ip, #10
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d2:	3a30      	subs	r2, #48	; 0x30
 800a5d4:	2a09      	cmp	r2, #9
 800a5d6:	d903      	bls.n	800a5e0 <_svfiprintf_r+0x1a8>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d0c5      	beq.n	800a568 <_svfiprintf_r+0x130>
 800a5dc:	9105      	str	r1, [sp, #20]
 800a5de:	e7c3      	b.n	800a568 <_svfiprintf_r+0x130>
 800a5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e7f0      	b.n	800a5cc <_svfiprintf_r+0x194>
 800a5ea:	ab03      	add	r3, sp, #12
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	4b0f      	ldr	r3, [pc, #60]	; (800a630 <_svfiprintf_r+0x1f8>)
 800a5f2:	a904      	add	r1, sp, #16
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7fe f81d 	bl	8008634 <_printf_float>
 800a5fa:	1c42      	adds	r2, r0, #1
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	d1d6      	bne.n	800a5ae <_svfiprintf_r+0x176>
 800a600:	89ab      	ldrh	r3, [r5, #12]
 800a602:	065b      	lsls	r3, r3, #25
 800a604:	f53f af2c 	bmi.w	800a460 <_svfiprintf_r+0x28>
 800a608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a60a:	b01d      	add	sp, #116	; 0x74
 800a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a610:	ab03      	add	r3, sp, #12
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	462a      	mov	r2, r5
 800a616:	4b06      	ldr	r3, [pc, #24]	; (800a630 <_svfiprintf_r+0x1f8>)
 800a618:	a904      	add	r1, sp, #16
 800a61a:	4638      	mov	r0, r7
 800a61c:	f7fe faae 	bl	8008b7c <_printf_i>
 800a620:	e7eb      	b.n	800a5fa <_svfiprintf_r+0x1c2>
 800a622:	bf00      	nop
 800a624:	0800b56c 	.word	0x0800b56c
 800a628:	0800b576 	.word	0x0800b576
 800a62c:	08008635 	.word	0x08008635
 800a630:	0800a381 	.word	0x0800a381
 800a634:	0800b572 	.word	0x0800b572

0800a638 <_sbrk_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d06      	ldr	r5, [pc, #24]	; (800a654 <_sbrk_r+0x1c>)
 800a63c:	2300      	movs	r3, #0
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	602b      	str	r3, [r5, #0]
 800a644:	f7f7 f83e 	bl	80016c4 <_sbrk>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_sbrk_r+0x1a>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_sbrk_r+0x1a>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	200056c4 	.word	0x200056c4

0800a658 <__assert_func>:
 800a658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a65a:	4614      	mov	r4, r2
 800a65c:	461a      	mov	r2, r3
 800a65e:	4b09      	ldr	r3, [pc, #36]	; (800a684 <__assert_func+0x2c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4605      	mov	r5, r0
 800a664:	68d8      	ldr	r0, [r3, #12]
 800a666:	b14c      	cbz	r4, 800a67c <__assert_func+0x24>
 800a668:	4b07      	ldr	r3, [pc, #28]	; (800a688 <__assert_func+0x30>)
 800a66a:	9100      	str	r1, [sp, #0]
 800a66c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a670:	4906      	ldr	r1, [pc, #24]	; (800a68c <__assert_func+0x34>)
 800a672:	462b      	mov	r3, r5
 800a674:	f000 f80e 	bl	800a694 <fiprintf>
 800a678:	f000 faa4 	bl	800abc4 <abort>
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <__assert_func+0x38>)
 800a67e:	461c      	mov	r4, r3
 800a680:	e7f3      	b.n	800a66a <__assert_func+0x12>
 800a682:	bf00      	nop
 800a684:	20000010 	.word	0x20000010
 800a688:	0800b57d 	.word	0x0800b57d
 800a68c:	0800b58a 	.word	0x0800b58a
 800a690:	0800b5b8 	.word	0x0800b5b8

0800a694 <fiprintf>:
 800a694:	b40e      	push	{r1, r2, r3}
 800a696:	b503      	push	{r0, r1, lr}
 800a698:	4601      	mov	r1, r0
 800a69a:	ab03      	add	r3, sp, #12
 800a69c:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <fiprintf+0x20>)
 800a69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a2:	6800      	ldr	r0, [r0, #0]
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	f000 f88f 	bl	800a7c8 <_vfiprintf_r>
 800a6aa:	b002      	add	sp, #8
 800a6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b0:	b003      	add	sp, #12
 800a6b2:	4770      	bx	lr
 800a6b4:	20000010 	.word	0x20000010

0800a6b8 <__ascii_mbtowc>:
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	b901      	cbnz	r1, 800a6be <__ascii_mbtowc+0x6>
 800a6bc:	a901      	add	r1, sp, #4
 800a6be:	b142      	cbz	r2, 800a6d2 <__ascii_mbtowc+0x1a>
 800a6c0:	b14b      	cbz	r3, 800a6d6 <__ascii_mbtowc+0x1e>
 800a6c2:	7813      	ldrb	r3, [r2, #0]
 800a6c4:	600b      	str	r3, [r1, #0]
 800a6c6:	7812      	ldrb	r2, [r2, #0]
 800a6c8:	1e10      	subs	r0, r2, #0
 800a6ca:	bf18      	it	ne
 800a6cc:	2001      	movne	r0, #1
 800a6ce:	b002      	add	sp, #8
 800a6d0:	4770      	bx	lr
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	e7fb      	b.n	800a6ce <__ascii_mbtowc+0x16>
 800a6d6:	f06f 0001 	mvn.w	r0, #1
 800a6da:	e7f8      	b.n	800a6ce <__ascii_mbtowc+0x16>

0800a6dc <memmove>:
 800a6dc:	4288      	cmp	r0, r1
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	eb01 0402 	add.w	r4, r1, r2
 800a6e4:	d902      	bls.n	800a6ec <memmove+0x10>
 800a6e6:	4284      	cmp	r4, r0
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	d807      	bhi.n	800a6fc <memmove+0x20>
 800a6ec:	1e43      	subs	r3, r0, #1
 800a6ee:	42a1      	cmp	r1, r4
 800a6f0:	d008      	beq.n	800a704 <memmove+0x28>
 800a6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6fa:	e7f8      	b.n	800a6ee <memmove+0x12>
 800a6fc:	4402      	add	r2, r0
 800a6fe:	4601      	mov	r1, r0
 800a700:	428a      	cmp	r2, r1
 800a702:	d100      	bne.n	800a706 <memmove+0x2a>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a70a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a70e:	e7f7      	b.n	800a700 <memmove+0x24>

0800a710 <__malloc_lock>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__malloc_lock+0x8>)
 800a712:	f000 bc17 	b.w	800af44 <__retarget_lock_acquire_recursive>
 800a716:	bf00      	nop
 800a718:	200056cc 	.word	0x200056cc

0800a71c <__malloc_unlock>:
 800a71c:	4801      	ldr	r0, [pc, #4]	; (800a724 <__malloc_unlock+0x8>)
 800a71e:	f000 bc12 	b.w	800af46 <__retarget_lock_release_recursive>
 800a722:	bf00      	nop
 800a724:	200056cc 	.word	0x200056cc

0800a728 <_realloc_r>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	4607      	mov	r7, r0
 800a72c:	4614      	mov	r4, r2
 800a72e:	460e      	mov	r6, r1
 800a730:	b921      	cbnz	r1, 800a73c <_realloc_r+0x14>
 800a732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a736:	4611      	mov	r1, r2
 800a738:	f7ff bdc8 	b.w	800a2cc <_malloc_r>
 800a73c:	b922      	cbnz	r2, 800a748 <_realloc_r+0x20>
 800a73e:	f7ff fd75 	bl	800a22c <_free_r>
 800a742:	4625      	mov	r5, r4
 800a744:	4628      	mov	r0, r5
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	f000 fc62 	bl	800b010 <_malloc_usable_size_r>
 800a74c:	42a0      	cmp	r0, r4
 800a74e:	d20f      	bcs.n	800a770 <_realloc_r+0x48>
 800a750:	4621      	mov	r1, r4
 800a752:	4638      	mov	r0, r7
 800a754:	f7ff fdba 	bl	800a2cc <_malloc_r>
 800a758:	4605      	mov	r5, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d0f2      	beq.n	800a744 <_realloc_r+0x1c>
 800a75e:	4631      	mov	r1, r6
 800a760:	4622      	mov	r2, r4
 800a762:	f7fd feb1 	bl	80084c8 <memcpy>
 800a766:	4631      	mov	r1, r6
 800a768:	4638      	mov	r0, r7
 800a76a:	f7ff fd5f 	bl	800a22c <_free_r>
 800a76e:	e7e9      	b.n	800a744 <_realloc_r+0x1c>
 800a770:	4635      	mov	r5, r6
 800a772:	e7e7      	b.n	800a744 <_realloc_r+0x1c>

0800a774 <__sfputc_r>:
 800a774:	6893      	ldr	r3, [r2, #8]
 800a776:	3b01      	subs	r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	b410      	push	{r4}
 800a77c:	6093      	str	r3, [r2, #8]
 800a77e:	da08      	bge.n	800a792 <__sfputc_r+0x1e>
 800a780:	6994      	ldr	r4, [r2, #24]
 800a782:	42a3      	cmp	r3, r4
 800a784:	db01      	blt.n	800a78a <__sfputc_r+0x16>
 800a786:	290a      	cmp	r1, #10
 800a788:	d103      	bne.n	800a792 <__sfputc_r+0x1e>
 800a78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a78e:	f000 b94b 	b.w	800aa28 <__swbuf_r>
 800a792:	6813      	ldr	r3, [r2, #0]
 800a794:	1c58      	adds	r0, r3, #1
 800a796:	6010      	str	r0, [r2, #0]
 800a798:	7019      	strb	r1, [r3, #0]
 800a79a:	4608      	mov	r0, r1
 800a79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <__sfputs_r>:
 800a7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	4614      	mov	r4, r2
 800a7aa:	18d5      	adds	r5, r2, r3
 800a7ac:	42ac      	cmp	r4, r5
 800a7ae:	d101      	bne.n	800a7b4 <__sfputs_r+0x12>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e007      	b.n	800a7c4 <__sfputs_r+0x22>
 800a7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b8:	463a      	mov	r2, r7
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ffda 	bl	800a774 <__sfputc_r>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d1f3      	bne.n	800a7ac <__sfputs_r+0xa>
 800a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7c8 <_vfiprintf_r>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	b09d      	sub	sp, #116	; 0x74
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	4698      	mov	r8, r3
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	b118      	cbz	r0, 800a7e0 <_vfiprintf_r+0x18>
 800a7d8:	6983      	ldr	r3, [r0, #24]
 800a7da:	b90b      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x18>
 800a7dc:	f000 fb14 	bl	800ae08 <__sinit>
 800a7e0:	4b89      	ldr	r3, [pc, #548]	; (800aa08 <_vfiprintf_r+0x240>)
 800a7e2:	429d      	cmp	r5, r3
 800a7e4:	d11b      	bne.n	800a81e <_vfiprintf_r+0x56>
 800a7e6:	6875      	ldr	r5, [r6, #4]
 800a7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ea:	07d9      	lsls	r1, r3, #31
 800a7ec:	d405      	bmi.n	800a7fa <_vfiprintf_r+0x32>
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	059a      	lsls	r2, r3, #22
 800a7f2:	d402      	bmi.n	800a7fa <_vfiprintf_r+0x32>
 800a7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f6:	f000 fba5 	bl	800af44 <__retarget_lock_acquire_recursive>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	071b      	lsls	r3, r3, #28
 800a7fe:	d501      	bpl.n	800a804 <_vfiprintf_r+0x3c>
 800a800:	692b      	ldr	r3, [r5, #16]
 800a802:	b9eb      	cbnz	r3, 800a840 <_vfiprintf_r+0x78>
 800a804:	4629      	mov	r1, r5
 800a806:	4630      	mov	r0, r6
 800a808:	f000 f96e 	bl	800aae8 <__swsetup_r>
 800a80c:	b1c0      	cbz	r0, 800a840 <_vfiprintf_r+0x78>
 800a80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a810:	07dc      	lsls	r4, r3, #31
 800a812:	d50e      	bpl.n	800a832 <_vfiprintf_r+0x6a>
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	b01d      	add	sp, #116	; 0x74
 800a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81e:	4b7b      	ldr	r3, [pc, #492]	; (800aa0c <_vfiprintf_r+0x244>)
 800a820:	429d      	cmp	r5, r3
 800a822:	d101      	bne.n	800a828 <_vfiprintf_r+0x60>
 800a824:	68b5      	ldr	r5, [r6, #8]
 800a826:	e7df      	b.n	800a7e8 <_vfiprintf_r+0x20>
 800a828:	4b79      	ldr	r3, [pc, #484]	; (800aa10 <_vfiprintf_r+0x248>)
 800a82a:	429d      	cmp	r5, r3
 800a82c:	bf08      	it	eq
 800a82e:	68f5      	ldreq	r5, [r6, #12]
 800a830:	e7da      	b.n	800a7e8 <_vfiprintf_r+0x20>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	0598      	lsls	r0, r3, #22
 800a836:	d4ed      	bmi.n	800a814 <_vfiprintf_r+0x4c>
 800a838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a83a:	f000 fb84 	bl	800af46 <__retarget_lock_release_recursive>
 800a83e:	e7e9      	b.n	800a814 <_vfiprintf_r+0x4c>
 800a840:	2300      	movs	r3, #0
 800a842:	9309      	str	r3, [sp, #36]	; 0x24
 800a844:	2320      	movs	r3, #32
 800a846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a84a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a84e:	2330      	movs	r3, #48	; 0x30
 800a850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa14 <_vfiprintf_r+0x24c>
 800a854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a858:	f04f 0901 	mov.w	r9, #1
 800a85c:	4623      	mov	r3, r4
 800a85e:	469a      	mov	sl, r3
 800a860:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a864:	b10a      	cbz	r2, 800a86a <_vfiprintf_r+0xa2>
 800a866:	2a25      	cmp	r2, #37	; 0x25
 800a868:	d1f9      	bne.n	800a85e <_vfiprintf_r+0x96>
 800a86a:	ebba 0b04 	subs.w	fp, sl, r4
 800a86e:	d00b      	beq.n	800a888 <_vfiprintf_r+0xc0>
 800a870:	465b      	mov	r3, fp
 800a872:	4622      	mov	r2, r4
 800a874:	4629      	mov	r1, r5
 800a876:	4630      	mov	r0, r6
 800a878:	f7ff ff93 	bl	800a7a2 <__sfputs_r>
 800a87c:	3001      	adds	r0, #1
 800a87e:	f000 80aa 	beq.w	800a9d6 <_vfiprintf_r+0x20e>
 800a882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a884:	445a      	add	r2, fp
 800a886:	9209      	str	r2, [sp, #36]	; 0x24
 800a888:	f89a 3000 	ldrb.w	r3, [sl]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f000 80a2 	beq.w	800a9d6 <_vfiprintf_r+0x20e>
 800a892:	2300      	movs	r3, #0
 800a894:	f04f 32ff 	mov.w	r2, #4294967295
 800a898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a89c:	f10a 0a01 	add.w	sl, sl, #1
 800a8a0:	9304      	str	r3, [sp, #16]
 800a8a2:	9307      	str	r3, [sp, #28]
 800a8a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8a8:	931a      	str	r3, [sp, #104]	; 0x68
 800a8aa:	4654      	mov	r4, sl
 800a8ac:	2205      	movs	r2, #5
 800a8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b2:	4858      	ldr	r0, [pc, #352]	; (800aa14 <_vfiprintf_r+0x24c>)
 800a8b4:	f7f5 fcec 	bl	8000290 <memchr>
 800a8b8:	9a04      	ldr	r2, [sp, #16]
 800a8ba:	b9d8      	cbnz	r0, 800a8f4 <_vfiprintf_r+0x12c>
 800a8bc:	06d1      	lsls	r1, r2, #27
 800a8be:	bf44      	itt	mi
 800a8c0:	2320      	movmi	r3, #32
 800a8c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8c6:	0713      	lsls	r3, r2, #28
 800a8c8:	bf44      	itt	mi
 800a8ca:	232b      	movmi	r3, #43	; 0x2b
 800a8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d6:	d015      	beq.n	800a904 <_vfiprintf_r+0x13c>
 800a8d8:	9a07      	ldr	r2, [sp, #28]
 800a8da:	4654      	mov	r4, sl
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f04f 0c0a 	mov.w	ip, #10
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8e8:	3b30      	subs	r3, #48	; 0x30
 800a8ea:	2b09      	cmp	r3, #9
 800a8ec:	d94e      	bls.n	800a98c <_vfiprintf_r+0x1c4>
 800a8ee:	b1b0      	cbz	r0, 800a91e <_vfiprintf_r+0x156>
 800a8f0:	9207      	str	r2, [sp, #28]
 800a8f2:	e014      	b.n	800a91e <_vfiprintf_r+0x156>
 800a8f4:	eba0 0308 	sub.w	r3, r0, r8
 800a8f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	46a2      	mov	sl, r4
 800a902:	e7d2      	b.n	800a8aa <_vfiprintf_r+0xe2>
 800a904:	9b03      	ldr	r3, [sp, #12]
 800a906:	1d19      	adds	r1, r3, #4
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	9103      	str	r1, [sp, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	bfbb      	ittet	lt
 800a910:	425b      	neglt	r3, r3
 800a912:	f042 0202 	orrlt.w	r2, r2, #2
 800a916:	9307      	strge	r3, [sp, #28]
 800a918:	9307      	strlt	r3, [sp, #28]
 800a91a:	bfb8      	it	lt
 800a91c:	9204      	strlt	r2, [sp, #16]
 800a91e:	7823      	ldrb	r3, [r4, #0]
 800a920:	2b2e      	cmp	r3, #46	; 0x2e
 800a922:	d10c      	bne.n	800a93e <_vfiprintf_r+0x176>
 800a924:	7863      	ldrb	r3, [r4, #1]
 800a926:	2b2a      	cmp	r3, #42	; 0x2a
 800a928:	d135      	bne.n	800a996 <_vfiprintf_r+0x1ce>
 800a92a:	9b03      	ldr	r3, [sp, #12]
 800a92c:	1d1a      	adds	r2, r3, #4
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	9203      	str	r2, [sp, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	bfb8      	it	lt
 800a936:	f04f 33ff 	movlt.w	r3, #4294967295
 800a93a:	3402      	adds	r4, #2
 800a93c:	9305      	str	r3, [sp, #20]
 800a93e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa24 <_vfiprintf_r+0x25c>
 800a942:	7821      	ldrb	r1, [r4, #0]
 800a944:	2203      	movs	r2, #3
 800a946:	4650      	mov	r0, sl
 800a948:	f7f5 fca2 	bl	8000290 <memchr>
 800a94c:	b140      	cbz	r0, 800a960 <_vfiprintf_r+0x198>
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	eba0 000a 	sub.w	r0, r0, sl
 800a954:	fa03 f000 	lsl.w	r0, r3, r0
 800a958:	9b04      	ldr	r3, [sp, #16]
 800a95a:	4303      	orrs	r3, r0
 800a95c:	3401      	adds	r4, #1
 800a95e:	9304      	str	r3, [sp, #16]
 800a960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a964:	482c      	ldr	r0, [pc, #176]	; (800aa18 <_vfiprintf_r+0x250>)
 800a966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a96a:	2206      	movs	r2, #6
 800a96c:	f7f5 fc90 	bl	8000290 <memchr>
 800a970:	2800      	cmp	r0, #0
 800a972:	d03f      	beq.n	800a9f4 <_vfiprintf_r+0x22c>
 800a974:	4b29      	ldr	r3, [pc, #164]	; (800aa1c <_vfiprintf_r+0x254>)
 800a976:	bb1b      	cbnz	r3, 800a9c0 <_vfiprintf_r+0x1f8>
 800a978:	9b03      	ldr	r3, [sp, #12]
 800a97a:	3307      	adds	r3, #7
 800a97c:	f023 0307 	bic.w	r3, r3, #7
 800a980:	3308      	adds	r3, #8
 800a982:	9303      	str	r3, [sp, #12]
 800a984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a986:	443b      	add	r3, r7
 800a988:	9309      	str	r3, [sp, #36]	; 0x24
 800a98a:	e767      	b.n	800a85c <_vfiprintf_r+0x94>
 800a98c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a990:	460c      	mov	r4, r1
 800a992:	2001      	movs	r0, #1
 800a994:	e7a5      	b.n	800a8e2 <_vfiprintf_r+0x11a>
 800a996:	2300      	movs	r3, #0
 800a998:	3401      	adds	r4, #1
 800a99a:	9305      	str	r3, [sp, #20]
 800a99c:	4619      	mov	r1, r3
 800a99e:	f04f 0c0a 	mov.w	ip, #10
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9a8:	3a30      	subs	r2, #48	; 0x30
 800a9aa:	2a09      	cmp	r2, #9
 800a9ac:	d903      	bls.n	800a9b6 <_vfiprintf_r+0x1ee>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0c5      	beq.n	800a93e <_vfiprintf_r+0x176>
 800a9b2:	9105      	str	r1, [sp, #20]
 800a9b4:	e7c3      	b.n	800a93e <_vfiprintf_r+0x176>
 800a9b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e7f0      	b.n	800a9a2 <_vfiprintf_r+0x1da>
 800a9c0:	ab03      	add	r3, sp, #12
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	462a      	mov	r2, r5
 800a9c6:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <_vfiprintf_r+0x258>)
 800a9c8:	a904      	add	r1, sp, #16
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7fd fe32 	bl	8008634 <_printf_float>
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	1c78      	adds	r0, r7, #1
 800a9d4:	d1d6      	bne.n	800a984 <_vfiprintf_r+0x1bc>
 800a9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d8:	07d9      	lsls	r1, r3, #31
 800a9da:	d405      	bmi.n	800a9e8 <_vfiprintf_r+0x220>
 800a9dc:	89ab      	ldrh	r3, [r5, #12]
 800a9de:	059a      	lsls	r2, r3, #22
 800a9e0:	d402      	bmi.n	800a9e8 <_vfiprintf_r+0x220>
 800a9e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e4:	f000 faaf 	bl	800af46 <__retarget_lock_release_recursive>
 800a9e8:	89ab      	ldrh	r3, [r5, #12]
 800a9ea:	065b      	lsls	r3, r3, #25
 800a9ec:	f53f af12 	bmi.w	800a814 <_vfiprintf_r+0x4c>
 800a9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f2:	e711      	b.n	800a818 <_vfiprintf_r+0x50>
 800a9f4:	ab03      	add	r3, sp, #12
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	462a      	mov	r2, r5
 800a9fa:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <_vfiprintf_r+0x258>)
 800a9fc:	a904      	add	r1, sp, #16
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7fe f8bc 	bl	8008b7c <_printf_i>
 800aa04:	e7e4      	b.n	800a9d0 <_vfiprintf_r+0x208>
 800aa06:	bf00      	nop
 800aa08:	0800b6e4 	.word	0x0800b6e4
 800aa0c:	0800b704 	.word	0x0800b704
 800aa10:	0800b6c4 	.word	0x0800b6c4
 800aa14:	0800b56c 	.word	0x0800b56c
 800aa18:	0800b576 	.word	0x0800b576
 800aa1c:	08008635 	.word	0x08008635
 800aa20:	0800a7a3 	.word	0x0800a7a3
 800aa24:	0800b572 	.word	0x0800b572

0800aa28 <__swbuf_r>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	460e      	mov	r6, r1
 800aa2c:	4614      	mov	r4, r2
 800aa2e:	4605      	mov	r5, r0
 800aa30:	b118      	cbz	r0, 800aa3a <__swbuf_r+0x12>
 800aa32:	6983      	ldr	r3, [r0, #24]
 800aa34:	b90b      	cbnz	r3, 800aa3a <__swbuf_r+0x12>
 800aa36:	f000 f9e7 	bl	800ae08 <__sinit>
 800aa3a:	4b21      	ldr	r3, [pc, #132]	; (800aac0 <__swbuf_r+0x98>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	d12b      	bne.n	800aa98 <__swbuf_r+0x70>
 800aa40:	686c      	ldr	r4, [r5, #4]
 800aa42:	69a3      	ldr	r3, [r4, #24]
 800aa44:	60a3      	str	r3, [r4, #8]
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	071a      	lsls	r2, r3, #28
 800aa4a:	d52f      	bpl.n	800aaac <__swbuf_r+0x84>
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	b36b      	cbz	r3, 800aaac <__swbuf_r+0x84>
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	6820      	ldr	r0, [r4, #0]
 800aa54:	1ac0      	subs	r0, r0, r3
 800aa56:	6963      	ldr	r3, [r4, #20]
 800aa58:	b2f6      	uxtb	r6, r6
 800aa5a:	4283      	cmp	r3, r0
 800aa5c:	4637      	mov	r7, r6
 800aa5e:	dc04      	bgt.n	800aa6a <__swbuf_r+0x42>
 800aa60:	4621      	mov	r1, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	f000 f93c 	bl	800ace0 <_fflush_r>
 800aa68:	bb30      	cbnz	r0, 800aab8 <__swbuf_r+0x90>
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	60a3      	str	r3, [r4, #8]
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	701e      	strb	r6, [r3, #0]
 800aa78:	6963      	ldr	r3, [r4, #20]
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	4283      	cmp	r3, r0
 800aa7e:	d004      	beq.n	800aa8a <__swbuf_r+0x62>
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	07db      	lsls	r3, r3, #31
 800aa84:	d506      	bpl.n	800aa94 <__swbuf_r+0x6c>
 800aa86:	2e0a      	cmp	r6, #10
 800aa88:	d104      	bne.n	800aa94 <__swbuf_r+0x6c>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f000 f927 	bl	800ace0 <_fflush_r>
 800aa92:	b988      	cbnz	r0, 800aab8 <__swbuf_r+0x90>
 800aa94:	4638      	mov	r0, r7
 800aa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <__swbuf_r+0x9c>)
 800aa9a:	429c      	cmp	r4, r3
 800aa9c:	d101      	bne.n	800aaa2 <__swbuf_r+0x7a>
 800aa9e:	68ac      	ldr	r4, [r5, #8]
 800aaa0:	e7cf      	b.n	800aa42 <__swbuf_r+0x1a>
 800aaa2:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <__swbuf_r+0xa0>)
 800aaa4:	429c      	cmp	r4, r3
 800aaa6:	bf08      	it	eq
 800aaa8:	68ec      	ldreq	r4, [r5, #12]
 800aaaa:	e7ca      	b.n	800aa42 <__swbuf_r+0x1a>
 800aaac:	4621      	mov	r1, r4
 800aaae:	4628      	mov	r0, r5
 800aab0:	f000 f81a 	bl	800aae8 <__swsetup_r>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d0cb      	beq.n	800aa50 <__swbuf_r+0x28>
 800aab8:	f04f 37ff 	mov.w	r7, #4294967295
 800aabc:	e7ea      	b.n	800aa94 <__swbuf_r+0x6c>
 800aabe:	bf00      	nop
 800aac0:	0800b6e4 	.word	0x0800b6e4
 800aac4:	0800b704 	.word	0x0800b704
 800aac8:	0800b6c4 	.word	0x0800b6c4

0800aacc <__ascii_wctomb>:
 800aacc:	b149      	cbz	r1, 800aae2 <__ascii_wctomb+0x16>
 800aace:	2aff      	cmp	r2, #255	; 0xff
 800aad0:	bf85      	ittet	hi
 800aad2:	238a      	movhi	r3, #138	; 0x8a
 800aad4:	6003      	strhi	r3, [r0, #0]
 800aad6:	700a      	strbls	r2, [r1, #0]
 800aad8:	f04f 30ff 	movhi.w	r0, #4294967295
 800aadc:	bf98      	it	ls
 800aade:	2001      	movls	r0, #1
 800aae0:	4770      	bx	lr
 800aae2:	4608      	mov	r0, r1
 800aae4:	4770      	bx	lr
	...

0800aae8 <__swsetup_r>:
 800aae8:	4b32      	ldr	r3, [pc, #200]	; (800abb4 <__swsetup_r+0xcc>)
 800aaea:	b570      	push	{r4, r5, r6, lr}
 800aaec:	681d      	ldr	r5, [r3, #0]
 800aaee:	4606      	mov	r6, r0
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	b125      	cbz	r5, 800aafe <__swsetup_r+0x16>
 800aaf4:	69ab      	ldr	r3, [r5, #24]
 800aaf6:	b913      	cbnz	r3, 800aafe <__swsetup_r+0x16>
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 f985 	bl	800ae08 <__sinit>
 800aafe:	4b2e      	ldr	r3, [pc, #184]	; (800abb8 <__swsetup_r+0xd0>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	d10f      	bne.n	800ab24 <__swsetup_r+0x3c>
 800ab04:	686c      	ldr	r4, [r5, #4]
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab0c:	0719      	lsls	r1, r3, #28
 800ab0e:	d42c      	bmi.n	800ab6a <__swsetup_r+0x82>
 800ab10:	06dd      	lsls	r5, r3, #27
 800ab12:	d411      	bmi.n	800ab38 <__swsetup_r+0x50>
 800ab14:	2309      	movs	r3, #9
 800ab16:	6033      	str	r3, [r6, #0]
 800ab18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab1c:	81a3      	strh	r3, [r4, #12]
 800ab1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab22:	e03e      	b.n	800aba2 <__swsetup_r+0xba>
 800ab24:	4b25      	ldr	r3, [pc, #148]	; (800abbc <__swsetup_r+0xd4>)
 800ab26:	429c      	cmp	r4, r3
 800ab28:	d101      	bne.n	800ab2e <__swsetup_r+0x46>
 800ab2a:	68ac      	ldr	r4, [r5, #8]
 800ab2c:	e7eb      	b.n	800ab06 <__swsetup_r+0x1e>
 800ab2e:	4b24      	ldr	r3, [pc, #144]	; (800abc0 <__swsetup_r+0xd8>)
 800ab30:	429c      	cmp	r4, r3
 800ab32:	bf08      	it	eq
 800ab34:	68ec      	ldreq	r4, [r5, #12]
 800ab36:	e7e6      	b.n	800ab06 <__swsetup_r+0x1e>
 800ab38:	0758      	lsls	r0, r3, #29
 800ab3a:	d512      	bpl.n	800ab62 <__swsetup_r+0x7a>
 800ab3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab3e:	b141      	cbz	r1, 800ab52 <__swsetup_r+0x6a>
 800ab40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab44:	4299      	cmp	r1, r3
 800ab46:	d002      	beq.n	800ab4e <__swsetup_r+0x66>
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7ff fb6f 	bl	800a22c <_free_r>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	6363      	str	r3, [r4, #52]	; 0x34
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	6063      	str	r3, [r4, #4]
 800ab5e:	6923      	ldr	r3, [r4, #16]
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f043 0308 	orr.w	r3, r3, #8
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	6923      	ldr	r3, [r4, #16]
 800ab6c:	b94b      	cbnz	r3, 800ab82 <__swsetup_r+0x9a>
 800ab6e:	89a3      	ldrh	r3, [r4, #12]
 800ab70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab78:	d003      	beq.n	800ab82 <__swsetup_r+0x9a>
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f000 fa07 	bl	800af90 <__smakebuf_r>
 800ab82:	89a0      	ldrh	r0, [r4, #12]
 800ab84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab88:	f010 0301 	ands.w	r3, r0, #1
 800ab8c:	d00a      	beq.n	800aba4 <__swsetup_r+0xbc>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60a3      	str	r3, [r4, #8]
 800ab92:	6963      	ldr	r3, [r4, #20]
 800ab94:	425b      	negs	r3, r3
 800ab96:	61a3      	str	r3, [r4, #24]
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	b943      	cbnz	r3, 800abae <__swsetup_r+0xc6>
 800ab9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aba0:	d1ba      	bne.n	800ab18 <__swsetup_r+0x30>
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	0781      	lsls	r1, r0, #30
 800aba6:	bf58      	it	pl
 800aba8:	6963      	ldrpl	r3, [r4, #20]
 800abaa:	60a3      	str	r3, [r4, #8]
 800abac:	e7f4      	b.n	800ab98 <__swsetup_r+0xb0>
 800abae:	2000      	movs	r0, #0
 800abb0:	e7f7      	b.n	800aba2 <__swsetup_r+0xba>
 800abb2:	bf00      	nop
 800abb4:	20000010 	.word	0x20000010
 800abb8:	0800b6e4 	.word	0x0800b6e4
 800abbc:	0800b704 	.word	0x0800b704
 800abc0:	0800b6c4 	.word	0x0800b6c4

0800abc4 <abort>:
 800abc4:	b508      	push	{r3, lr}
 800abc6:	2006      	movs	r0, #6
 800abc8:	f000 fa52 	bl	800b070 <raise>
 800abcc:	2001      	movs	r0, #1
 800abce:	f7f6 fd1d 	bl	800160c <_exit>
	...

0800abd4 <__sflush_r>:
 800abd4:	898a      	ldrh	r2, [r1, #12]
 800abd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abda:	4605      	mov	r5, r0
 800abdc:	0710      	lsls	r0, r2, #28
 800abde:	460c      	mov	r4, r1
 800abe0:	d458      	bmi.n	800ac94 <__sflush_r+0xc0>
 800abe2:	684b      	ldr	r3, [r1, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	dc05      	bgt.n	800abf4 <__sflush_r+0x20>
 800abe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abea:	2b00      	cmp	r3, #0
 800abec:	dc02      	bgt.n	800abf4 <__sflush_r+0x20>
 800abee:	2000      	movs	r0, #0
 800abf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abf6:	2e00      	cmp	r6, #0
 800abf8:	d0f9      	beq.n	800abee <__sflush_r+0x1a>
 800abfa:	2300      	movs	r3, #0
 800abfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac00:	682f      	ldr	r7, [r5, #0]
 800ac02:	602b      	str	r3, [r5, #0]
 800ac04:	d032      	beq.n	800ac6c <__sflush_r+0x98>
 800ac06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	075a      	lsls	r2, r3, #29
 800ac0c:	d505      	bpl.n	800ac1a <__sflush_r+0x46>
 800ac0e:	6863      	ldr	r3, [r4, #4]
 800ac10:	1ac0      	subs	r0, r0, r3
 800ac12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac14:	b10b      	cbz	r3, 800ac1a <__sflush_r+0x46>
 800ac16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac18:	1ac0      	subs	r0, r0, r3
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac20:	6a21      	ldr	r1, [r4, #32]
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b0      	blx	r6
 800ac26:	1c43      	adds	r3, r0, #1
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	d106      	bne.n	800ac3a <__sflush_r+0x66>
 800ac2c:	6829      	ldr	r1, [r5, #0]
 800ac2e:	291d      	cmp	r1, #29
 800ac30:	d82c      	bhi.n	800ac8c <__sflush_r+0xb8>
 800ac32:	4a2a      	ldr	r2, [pc, #168]	; (800acdc <__sflush_r+0x108>)
 800ac34:	40ca      	lsrs	r2, r1
 800ac36:	07d6      	lsls	r6, r2, #31
 800ac38:	d528      	bpl.n	800ac8c <__sflush_r+0xb8>
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	6062      	str	r2, [r4, #4]
 800ac3e:	04d9      	lsls	r1, r3, #19
 800ac40:	6922      	ldr	r2, [r4, #16]
 800ac42:	6022      	str	r2, [r4, #0]
 800ac44:	d504      	bpl.n	800ac50 <__sflush_r+0x7c>
 800ac46:	1c42      	adds	r2, r0, #1
 800ac48:	d101      	bne.n	800ac4e <__sflush_r+0x7a>
 800ac4a:	682b      	ldr	r3, [r5, #0]
 800ac4c:	b903      	cbnz	r3, 800ac50 <__sflush_r+0x7c>
 800ac4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac52:	602f      	str	r7, [r5, #0]
 800ac54:	2900      	cmp	r1, #0
 800ac56:	d0ca      	beq.n	800abee <__sflush_r+0x1a>
 800ac58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac5c:	4299      	cmp	r1, r3
 800ac5e:	d002      	beq.n	800ac66 <__sflush_r+0x92>
 800ac60:	4628      	mov	r0, r5
 800ac62:	f7ff fae3 	bl	800a22c <_free_r>
 800ac66:	2000      	movs	r0, #0
 800ac68:	6360      	str	r0, [r4, #52]	; 0x34
 800ac6a:	e7c1      	b.n	800abf0 <__sflush_r+0x1c>
 800ac6c:	6a21      	ldr	r1, [r4, #32]
 800ac6e:	2301      	movs	r3, #1
 800ac70:	4628      	mov	r0, r5
 800ac72:	47b0      	blx	r6
 800ac74:	1c41      	adds	r1, r0, #1
 800ac76:	d1c7      	bne.n	800ac08 <__sflush_r+0x34>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0c4      	beq.n	800ac08 <__sflush_r+0x34>
 800ac7e:	2b1d      	cmp	r3, #29
 800ac80:	d001      	beq.n	800ac86 <__sflush_r+0xb2>
 800ac82:	2b16      	cmp	r3, #22
 800ac84:	d101      	bne.n	800ac8a <__sflush_r+0xb6>
 800ac86:	602f      	str	r7, [r5, #0]
 800ac88:	e7b1      	b.n	800abee <__sflush_r+0x1a>
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	e7ad      	b.n	800abf0 <__sflush_r+0x1c>
 800ac94:	690f      	ldr	r7, [r1, #16]
 800ac96:	2f00      	cmp	r7, #0
 800ac98:	d0a9      	beq.n	800abee <__sflush_r+0x1a>
 800ac9a:	0793      	lsls	r3, r2, #30
 800ac9c:	680e      	ldr	r6, [r1, #0]
 800ac9e:	bf08      	it	eq
 800aca0:	694b      	ldreq	r3, [r1, #20]
 800aca2:	600f      	str	r7, [r1, #0]
 800aca4:	bf18      	it	ne
 800aca6:	2300      	movne	r3, #0
 800aca8:	eba6 0807 	sub.w	r8, r6, r7
 800acac:	608b      	str	r3, [r1, #8]
 800acae:	f1b8 0f00 	cmp.w	r8, #0
 800acb2:	dd9c      	ble.n	800abee <__sflush_r+0x1a>
 800acb4:	6a21      	ldr	r1, [r4, #32]
 800acb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acb8:	4643      	mov	r3, r8
 800acba:	463a      	mov	r2, r7
 800acbc:	4628      	mov	r0, r5
 800acbe:	47b0      	blx	r6
 800acc0:	2800      	cmp	r0, #0
 800acc2:	dc06      	bgt.n	800acd2 <__sflush_r+0xfe>
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acca:	81a3      	strh	r3, [r4, #12]
 800accc:	f04f 30ff 	mov.w	r0, #4294967295
 800acd0:	e78e      	b.n	800abf0 <__sflush_r+0x1c>
 800acd2:	4407      	add	r7, r0
 800acd4:	eba8 0800 	sub.w	r8, r8, r0
 800acd8:	e7e9      	b.n	800acae <__sflush_r+0xda>
 800acda:	bf00      	nop
 800acdc:	20400001 	.word	0x20400001

0800ace0 <_fflush_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	690b      	ldr	r3, [r1, #16]
 800ace4:	4605      	mov	r5, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	b913      	cbnz	r3, 800acf0 <_fflush_r+0x10>
 800acea:	2500      	movs	r5, #0
 800acec:	4628      	mov	r0, r5
 800acee:	bd38      	pop	{r3, r4, r5, pc}
 800acf0:	b118      	cbz	r0, 800acfa <_fflush_r+0x1a>
 800acf2:	6983      	ldr	r3, [r0, #24]
 800acf4:	b90b      	cbnz	r3, 800acfa <_fflush_r+0x1a>
 800acf6:	f000 f887 	bl	800ae08 <__sinit>
 800acfa:	4b14      	ldr	r3, [pc, #80]	; (800ad4c <_fflush_r+0x6c>)
 800acfc:	429c      	cmp	r4, r3
 800acfe:	d11b      	bne.n	800ad38 <_fflush_r+0x58>
 800ad00:	686c      	ldr	r4, [r5, #4]
 800ad02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0ef      	beq.n	800acea <_fflush_r+0xa>
 800ad0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad0c:	07d0      	lsls	r0, r2, #31
 800ad0e:	d404      	bmi.n	800ad1a <_fflush_r+0x3a>
 800ad10:	0599      	lsls	r1, r3, #22
 800ad12:	d402      	bmi.n	800ad1a <_fflush_r+0x3a>
 800ad14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad16:	f000 f915 	bl	800af44 <__retarget_lock_acquire_recursive>
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	f7ff ff59 	bl	800abd4 <__sflush_r>
 800ad22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad24:	07da      	lsls	r2, r3, #31
 800ad26:	4605      	mov	r5, r0
 800ad28:	d4e0      	bmi.n	800acec <_fflush_r+0xc>
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	059b      	lsls	r3, r3, #22
 800ad2e:	d4dd      	bmi.n	800acec <_fflush_r+0xc>
 800ad30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad32:	f000 f908 	bl	800af46 <__retarget_lock_release_recursive>
 800ad36:	e7d9      	b.n	800acec <_fflush_r+0xc>
 800ad38:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <_fflush_r+0x70>)
 800ad3a:	429c      	cmp	r4, r3
 800ad3c:	d101      	bne.n	800ad42 <_fflush_r+0x62>
 800ad3e:	68ac      	ldr	r4, [r5, #8]
 800ad40:	e7df      	b.n	800ad02 <_fflush_r+0x22>
 800ad42:	4b04      	ldr	r3, [pc, #16]	; (800ad54 <_fflush_r+0x74>)
 800ad44:	429c      	cmp	r4, r3
 800ad46:	bf08      	it	eq
 800ad48:	68ec      	ldreq	r4, [r5, #12]
 800ad4a:	e7da      	b.n	800ad02 <_fflush_r+0x22>
 800ad4c:	0800b6e4 	.word	0x0800b6e4
 800ad50:	0800b704 	.word	0x0800b704
 800ad54:	0800b6c4 	.word	0x0800b6c4

0800ad58 <std>:
 800ad58:	2300      	movs	r3, #0
 800ad5a:	b510      	push	{r4, lr}
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad66:	6083      	str	r3, [r0, #8]
 800ad68:	8181      	strh	r1, [r0, #12]
 800ad6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad6c:	81c2      	strh	r2, [r0, #14]
 800ad6e:	6183      	str	r3, [r0, #24]
 800ad70:	4619      	mov	r1, r3
 800ad72:	2208      	movs	r2, #8
 800ad74:	305c      	adds	r0, #92	; 0x5c
 800ad76:	f7fd fbb5 	bl	80084e4 <memset>
 800ad7a:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <std+0x38>)
 800ad7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad7e:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <std+0x3c>)
 800ad80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad82:	4b05      	ldr	r3, [pc, #20]	; (800ad98 <std+0x40>)
 800ad84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad86:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <std+0x44>)
 800ad88:	6224      	str	r4, [r4, #32]
 800ad8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad8c:	bd10      	pop	{r4, pc}
 800ad8e:	bf00      	nop
 800ad90:	0800b0a9 	.word	0x0800b0a9
 800ad94:	0800b0cb 	.word	0x0800b0cb
 800ad98:	0800b103 	.word	0x0800b103
 800ad9c:	0800b127 	.word	0x0800b127

0800ada0 <_cleanup_r>:
 800ada0:	4901      	ldr	r1, [pc, #4]	; (800ada8 <_cleanup_r+0x8>)
 800ada2:	f000 b8af 	b.w	800af04 <_fwalk_reent>
 800ada6:	bf00      	nop
 800ada8:	0800ace1 	.word	0x0800ace1

0800adac <__sfmoreglue>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	1e4a      	subs	r2, r1, #1
 800adb0:	2568      	movs	r5, #104	; 0x68
 800adb2:	4355      	muls	r5, r2
 800adb4:	460e      	mov	r6, r1
 800adb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adba:	f7ff fa87 	bl	800a2cc <_malloc_r>
 800adbe:	4604      	mov	r4, r0
 800adc0:	b140      	cbz	r0, 800add4 <__sfmoreglue+0x28>
 800adc2:	2100      	movs	r1, #0
 800adc4:	e9c0 1600 	strd	r1, r6, [r0]
 800adc8:	300c      	adds	r0, #12
 800adca:	60a0      	str	r0, [r4, #8]
 800adcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800add0:	f7fd fb88 	bl	80084e4 <memset>
 800add4:	4620      	mov	r0, r4
 800add6:	bd70      	pop	{r4, r5, r6, pc}

0800add8 <__sfp_lock_acquire>:
 800add8:	4801      	ldr	r0, [pc, #4]	; (800ade0 <__sfp_lock_acquire+0x8>)
 800adda:	f000 b8b3 	b.w	800af44 <__retarget_lock_acquire_recursive>
 800adde:	bf00      	nop
 800ade0:	200056d0 	.word	0x200056d0

0800ade4 <__sfp_lock_release>:
 800ade4:	4801      	ldr	r0, [pc, #4]	; (800adec <__sfp_lock_release+0x8>)
 800ade6:	f000 b8ae 	b.w	800af46 <__retarget_lock_release_recursive>
 800adea:	bf00      	nop
 800adec:	200056d0 	.word	0x200056d0

0800adf0 <__sinit_lock_acquire>:
 800adf0:	4801      	ldr	r0, [pc, #4]	; (800adf8 <__sinit_lock_acquire+0x8>)
 800adf2:	f000 b8a7 	b.w	800af44 <__retarget_lock_acquire_recursive>
 800adf6:	bf00      	nop
 800adf8:	200056cb 	.word	0x200056cb

0800adfc <__sinit_lock_release>:
 800adfc:	4801      	ldr	r0, [pc, #4]	; (800ae04 <__sinit_lock_release+0x8>)
 800adfe:	f000 b8a2 	b.w	800af46 <__retarget_lock_release_recursive>
 800ae02:	bf00      	nop
 800ae04:	200056cb 	.word	0x200056cb

0800ae08 <__sinit>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	f7ff fff0 	bl	800adf0 <__sinit_lock_acquire>
 800ae10:	69a3      	ldr	r3, [r4, #24]
 800ae12:	b11b      	cbz	r3, 800ae1c <__sinit+0x14>
 800ae14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae18:	f7ff bff0 	b.w	800adfc <__sinit_lock_release>
 800ae1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae20:	6523      	str	r3, [r4, #80]	; 0x50
 800ae22:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <__sinit+0x68>)
 800ae24:	4a13      	ldr	r2, [pc, #76]	; (800ae74 <__sinit+0x6c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae2a:	42a3      	cmp	r3, r4
 800ae2c:	bf04      	itt	eq
 800ae2e:	2301      	moveq	r3, #1
 800ae30:	61a3      	streq	r3, [r4, #24]
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 f820 	bl	800ae78 <__sfp>
 800ae38:	6060      	str	r0, [r4, #4]
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f000 f81c 	bl	800ae78 <__sfp>
 800ae40:	60a0      	str	r0, [r4, #8]
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 f818 	bl	800ae78 <__sfp>
 800ae48:	2200      	movs	r2, #0
 800ae4a:	60e0      	str	r0, [r4, #12]
 800ae4c:	2104      	movs	r1, #4
 800ae4e:	6860      	ldr	r0, [r4, #4]
 800ae50:	f7ff ff82 	bl	800ad58 <std>
 800ae54:	68a0      	ldr	r0, [r4, #8]
 800ae56:	2201      	movs	r2, #1
 800ae58:	2109      	movs	r1, #9
 800ae5a:	f7ff ff7d 	bl	800ad58 <std>
 800ae5e:	68e0      	ldr	r0, [r4, #12]
 800ae60:	2202      	movs	r2, #2
 800ae62:	2112      	movs	r1, #18
 800ae64:	f7ff ff78 	bl	800ad58 <std>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	61a3      	str	r3, [r4, #24]
 800ae6c:	e7d2      	b.n	800ae14 <__sinit+0xc>
 800ae6e:	bf00      	nop
 800ae70:	0800b344 	.word	0x0800b344
 800ae74:	0800ada1 	.word	0x0800ada1

0800ae78 <__sfp>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	4607      	mov	r7, r0
 800ae7c:	f7ff ffac 	bl	800add8 <__sfp_lock_acquire>
 800ae80:	4b1e      	ldr	r3, [pc, #120]	; (800aefc <__sfp+0x84>)
 800ae82:	681e      	ldr	r6, [r3, #0]
 800ae84:	69b3      	ldr	r3, [r6, #24]
 800ae86:	b913      	cbnz	r3, 800ae8e <__sfp+0x16>
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f7ff ffbd 	bl	800ae08 <__sinit>
 800ae8e:	3648      	adds	r6, #72	; 0x48
 800ae90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	d503      	bpl.n	800aea0 <__sfp+0x28>
 800ae98:	6833      	ldr	r3, [r6, #0]
 800ae9a:	b30b      	cbz	r3, 800aee0 <__sfp+0x68>
 800ae9c:	6836      	ldr	r6, [r6, #0]
 800ae9e:	e7f7      	b.n	800ae90 <__sfp+0x18>
 800aea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aea4:	b9d5      	cbnz	r5, 800aedc <__sfp+0x64>
 800aea6:	4b16      	ldr	r3, [pc, #88]	; (800af00 <__sfp+0x88>)
 800aea8:	60e3      	str	r3, [r4, #12]
 800aeaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aeae:	6665      	str	r5, [r4, #100]	; 0x64
 800aeb0:	f000 f847 	bl	800af42 <__retarget_lock_init_recursive>
 800aeb4:	f7ff ff96 	bl	800ade4 <__sfp_lock_release>
 800aeb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aec0:	6025      	str	r5, [r4, #0]
 800aec2:	61a5      	str	r5, [r4, #24]
 800aec4:	2208      	movs	r2, #8
 800aec6:	4629      	mov	r1, r5
 800aec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aecc:	f7fd fb0a 	bl	80084e4 <memset>
 800aed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aed8:	4620      	mov	r0, r4
 800aeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aedc:	3468      	adds	r4, #104	; 0x68
 800aede:	e7d9      	b.n	800ae94 <__sfp+0x1c>
 800aee0:	2104      	movs	r1, #4
 800aee2:	4638      	mov	r0, r7
 800aee4:	f7ff ff62 	bl	800adac <__sfmoreglue>
 800aee8:	4604      	mov	r4, r0
 800aeea:	6030      	str	r0, [r6, #0]
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d1d5      	bne.n	800ae9c <__sfp+0x24>
 800aef0:	f7ff ff78 	bl	800ade4 <__sfp_lock_release>
 800aef4:	230c      	movs	r3, #12
 800aef6:	603b      	str	r3, [r7, #0]
 800aef8:	e7ee      	b.n	800aed8 <__sfp+0x60>
 800aefa:	bf00      	nop
 800aefc:	0800b344 	.word	0x0800b344
 800af00:	ffff0001 	.word	0xffff0001

0800af04 <_fwalk_reent>:
 800af04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af08:	4606      	mov	r6, r0
 800af0a:	4688      	mov	r8, r1
 800af0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af10:	2700      	movs	r7, #0
 800af12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af16:	f1b9 0901 	subs.w	r9, r9, #1
 800af1a:	d505      	bpl.n	800af28 <_fwalk_reent+0x24>
 800af1c:	6824      	ldr	r4, [r4, #0]
 800af1e:	2c00      	cmp	r4, #0
 800af20:	d1f7      	bne.n	800af12 <_fwalk_reent+0xe>
 800af22:	4638      	mov	r0, r7
 800af24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af28:	89ab      	ldrh	r3, [r5, #12]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d907      	bls.n	800af3e <_fwalk_reent+0x3a>
 800af2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af32:	3301      	adds	r3, #1
 800af34:	d003      	beq.n	800af3e <_fwalk_reent+0x3a>
 800af36:	4629      	mov	r1, r5
 800af38:	4630      	mov	r0, r6
 800af3a:	47c0      	blx	r8
 800af3c:	4307      	orrs	r7, r0
 800af3e:	3568      	adds	r5, #104	; 0x68
 800af40:	e7e9      	b.n	800af16 <_fwalk_reent+0x12>

0800af42 <__retarget_lock_init_recursive>:
 800af42:	4770      	bx	lr

0800af44 <__retarget_lock_acquire_recursive>:
 800af44:	4770      	bx	lr

0800af46 <__retarget_lock_release_recursive>:
 800af46:	4770      	bx	lr

0800af48 <__swhatbuf_r>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	460e      	mov	r6, r1
 800af4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af50:	2900      	cmp	r1, #0
 800af52:	b096      	sub	sp, #88	; 0x58
 800af54:	4614      	mov	r4, r2
 800af56:	461d      	mov	r5, r3
 800af58:	da07      	bge.n	800af6a <__swhatbuf_r+0x22>
 800af5a:	2300      	movs	r3, #0
 800af5c:	602b      	str	r3, [r5, #0]
 800af5e:	89b3      	ldrh	r3, [r6, #12]
 800af60:	061a      	lsls	r2, r3, #24
 800af62:	d410      	bmi.n	800af86 <__swhatbuf_r+0x3e>
 800af64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af68:	e00e      	b.n	800af88 <__swhatbuf_r+0x40>
 800af6a:	466a      	mov	r2, sp
 800af6c:	f000 f8f0 	bl	800b150 <_fstat_r>
 800af70:	2800      	cmp	r0, #0
 800af72:	dbf2      	blt.n	800af5a <__swhatbuf_r+0x12>
 800af74:	9a01      	ldr	r2, [sp, #4]
 800af76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af7e:	425a      	negs	r2, r3
 800af80:	415a      	adcs	r2, r3
 800af82:	602a      	str	r2, [r5, #0]
 800af84:	e7ee      	b.n	800af64 <__swhatbuf_r+0x1c>
 800af86:	2340      	movs	r3, #64	; 0x40
 800af88:	2000      	movs	r0, #0
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	b016      	add	sp, #88	; 0x58
 800af8e:	bd70      	pop	{r4, r5, r6, pc}

0800af90 <__smakebuf_r>:
 800af90:	898b      	ldrh	r3, [r1, #12]
 800af92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af94:	079d      	lsls	r5, r3, #30
 800af96:	4606      	mov	r6, r0
 800af98:	460c      	mov	r4, r1
 800af9a:	d507      	bpl.n	800afac <__smakebuf_r+0x1c>
 800af9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	6123      	str	r3, [r4, #16]
 800afa4:	2301      	movs	r3, #1
 800afa6:	6163      	str	r3, [r4, #20]
 800afa8:	b002      	add	sp, #8
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	ab01      	add	r3, sp, #4
 800afae:	466a      	mov	r2, sp
 800afb0:	f7ff ffca 	bl	800af48 <__swhatbuf_r>
 800afb4:	9900      	ldr	r1, [sp, #0]
 800afb6:	4605      	mov	r5, r0
 800afb8:	4630      	mov	r0, r6
 800afba:	f7ff f987 	bl	800a2cc <_malloc_r>
 800afbe:	b948      	cbnz	r0, 800afd4 <__smakebuf_r+0x44>
 800afc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc4:	059a      	lsls	r2, r3, #22
 800afc6:	d4ef      	bmi.n	800afa8 <__smakebuf_r+0x18>
 800afc8:	f023 0303 	bic.w	r3, r3, #3
 800afcc:	f043 0302 	orr.w	r3, r3, #2
 800afd0:	81a3      	strh	r3, [r4, #12]
 800afd2:	e7e3      	b.n	800af9c <__smakebuf_r+0xc>
 800afd4:	4b0d      	ldr	r3, [pc, #52]	; (800b00c <__smakebuf_r+0x7c>)
 800afd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	6020      	str	r0, [r4, #0]
 800afdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	9b00      	ldr	r3, [sp, #0]
 800afe4:	6163      	str	r3, [r4, #20]
 800afe6:	9b01      	ldr	r3, [sp, #4]
 800afe8:	6120      	str	r0, [r4, #16]
 800afea:	b15b      	cbz	r3, 800b004 <__smakebuf_r+0x74>
 800afec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aff0:	4630      	mov	r0, r6
 800aff2:	f000 f8bf 	bl	800b174 <_isatty_r>
 800aff6:	b128      	cbz	r0, 800b004 <__smakebuf_r+0x74>
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	f023 0303 	bic.w	r3, r3, #3
 800affe:	f043 0301 	orr.w	r3, r3, #1
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	89a0      	ldrh	r0, [r4, #12]
 800b006:	4305      	orrs	r5, r0
 800b008:	81a5      	strh	r5, [r4, #12]
 800b00a:	e7cd      	b.n	800afa8 <__smakebuf_r+0x18>
 800b00c:	0800ada1 	.word	0x0800ada1

0800b010 <_malloc_usable_size_r>:
 800b010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b014:	1f18      	subs	r0, r3, #4
 800b016:	2b00      	cmp	r3, #0
 800b018:	bfbc      	itt	lt
 800b01a:	580b      	ldrlt	r3, [r1, r0]
 800b01c:	18c0      	addlt	r0, r0, r3
 800b01e:	4770      	bx	lr

0800b020 <_raise_r>:
 800b020:	291f      	cmp	r1, #31
 800b022:	b538      	push	{r3, r4, r5, lr}
 800b024:	4604      	mov	r4, r0
 800b026:	460d      	mov	r5, r1
 800b028:	d904      	bls.n	800b034 <_raise_r+0x14>
 800b02a:	2316      	movs	r3, #22
 800b02c:	6003      	str	r3, [r0, #0]
 800b02e:	f04f 30ff 	mov.w	r0, #4294967295
 800b032:	bd38      	pop	{r3, r4, r5, pc}
 800b034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b036:	b112      	cbz	r2, 800b03e <_raise_r+0x1e>
 800b038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b03c:	b94b      	cbnz	r3, 800b052 <_raise_r+0x32>
 800b03e:	4620      	mov	r0, r4
 800b040:	f000 f830 	bl	800b0a4 <_getpid_r>
 800b044:	462a      	mov	r2, r5
 800b046:	4601      	mov	r1, r0
 800b048:	4620      	mov	r0, r4
 800b04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b04e:	f000 b817 	b.w	800b080 <_kill_r>
 800b052:	2b01      	cmp	r3, #1
 800b054:	d00a      	beq.n	800b06c <_raise_r+0x4c>
 800b056:	1c59      	adds	r1, r3, #1
 800b058:	d103      	bne.n	800b062 <_raise_r+0x42>
 800b05a:	2316      	movs	r3, #22
 800b05c:	6003      	str	r3, [r0, #0]
 800b05e:	2001      	movs	r0, #1
 800b060:	e7e7      	b.n	800b032 <_raise_r+0x12>
 800b062:	2400      	movs	r4, #0
 800b064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b068:	4628      	mov	r0, r5
 800b06a:	4798      	blx	r3
 800b06c:	2000      	movs	r0, #0
 800b06e:	e7e0      	b.n	800b032 <_raise_r+0x12>

0800b070 <raise>:
 800b070:	4b02      	ldr	r3, [pc, #8]	; (800b07c <raise+0xc>)
 800b072:	4601      	mov	r1, r0
 800b074:	6818      	ldr	r0, [r3, #0]
 800b076:	f7ff bfd3 	b.w	800b020 <_raise_r>
 800b07a:	bf00      	nop
 800b07c:	20000010 	.word	0x20000010

0800b080 <_kill_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4d07      	ldr	r5, [pc, #28]	; (800b0a0 <_kill_r+0x20>)
 800b084:	2300      	movs	r3, #0
 800b086:	4604      	mov	r4, r0
 800b088:	4608      	mov	r0, r1
 800b08a:	4611      	mov	r1, r2
 800b08c:	602b      	str	r3, [r5, #0]
 800b08e:	f7f6 faad 	bl	80015ec <_kill>
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	d102      	bne.n	800b09c <_kill_r+0x1c>
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	b103      	cbz	r3, 800b09c <_kill_r+0x1c>
 800b09a:	6023      	str	r3, [r4, #0]
 800b09c:	bd38      	pop	{r3, r4, r5, pc}
 800b09e:	bf00      	nop
 800b0a0:	200056c4 	.word	0x200056c4

0800b0a4 <_getpid_r>:
 800b0a4:	f7f6 ba9a 	b.w	80015dc <_getpid>

0800b0a8 <__sread>:
 800b0a8:	b510      	push	{r4, lr}
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b0:	f000 f882 	bl	800b1b8 <_read_r>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	bfab      	itete	ge
 800b0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800b0bc:	181b      	addge	r3, r3, r0
 800b0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0c2:	bfac      	ite	ge
 800b0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0c6:	81a3      	strhlt	r3, [r4, #12]
 800b0c8:	bd10      	pop	{r4, pc}

0800b0ca <__swrite>:
 800b0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ce:	461f      	mov	r7, r3
 800b0d0:	898b      	ldrh	r3, [r1, #12]
 800b0d2:	05db      	lsls	r3, r3, #23
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	4616      	mov	r6, r2
 800b0da:	d505      	bpl.n	800b0e8 <__swrite+0x1e>
 800b0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f000 f856 	bl	800b194 <_lseek_r>
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	463b      	mov	r3, r7
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fe:	f7fd b999 	b.w	8008434 <_write_r>

0800b102 <__sseek>:
 800b102:	b510      	push	{r4, lr}
 800b104:	460c      	mov	r4, r1
 800b106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b10a:	f000 f843 	bl	800b194 <_lseek_r>
 800b10e:	1c43      	adds	r3, r0, #1
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	bf15      	itete	ne
 800b114:	6560      	strne	r0, [r4, #84]	; 0x54
 800b116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b11e:	81a3      	strheq	r3, [r4, #12]
 800b120:	bf18      	it	ne
 800b122:	81a3      	strhne	r3, [r4, #12]
 800b124:	bd10      	pop	{r4, pc}

0800b126 <__sclose>:
 800b126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12a:	f000 b801 	b.w	800b130 <_close_r>
	...

0800b130 <_close_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d06      	ldr	r5, [pc, #24]	; (800b14c <_close_r+0x1c>)
 800b134:	2300      	movs	r3, #0
 800b136:	4604      	mov	r4, r0
 800b138:	4608      	mov	r0, r1
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	f7f6 fa8d 	bl	800165a <_close>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d102      	bne.n	800b14a <_close_r+0x1a>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	b103      	cbz	r3, 800b14a <_close_r+0x1a>
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	200056c4 	.word	0x200056c4

0800b150 <_fstat_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	4d07      	ldr	r5, [pc, #28]	; (800b170 <_fstat_r+0x20>)
 800b154:	2300      	movs	r3, #0
 800b156:	4604      	mov	r4, r0
 800b158:	4608      	mov	r0, r1
 800b15a:	4611      	mov	r1, r2
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	f7f6 fa88 	bl	8001672 <_fstat>
 800b162:	1c43      	adds	r3, r0, #1
 800b164:	d102      	bne.n	800b16c <_fstat_r+0x1c>
 800b166:	682b      	ldr	r3, [r5, #0]
 800b168:	b103      	cbz	r3, 800b16c <_fstat_r+0x1c>
 800b16a:	6023      	str	r3, [r4, #0]
 800b16c:	bd38      	pop	{r3, r4, r5, pc}
 800b16e:	bf00      	nop
 800b170:	200056c4 	.word	0x200056c4

0800b174 <_isatty_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d06      	ldr	r5, [pc, #24]	; (800b190 <_isatty_r+0x1c>)
 800b178:	2300      	movs	r3, #0
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	602b      	str	r3, [r5, #0]
 800b180:	f7f6 fa87 	bl	8001692 <_isatty>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d102      	bne.n	800b18e <_isatty_r+0x1a>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	b103      	cbz	r3, 800b18e <_isatty_r+0x1a>
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	200056c4 	.word	0x200056c4

0800b194 <_lseek_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d07      	ldr	r5, [pc, #28]	; (800b1b4 <_lseek_r+0x20>)
 800b198:	4604      	mov	r4, r0
 800b19a:	4608      	mov	r0, r1
 800b19c:	4611      	mov	r1, r2
 800b19e:	2200      	movs	r2, #0
 800b1a0:	602a      	str	r2, [r5, #0]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f7f6 fa80 	bl	80016a8 <_lseek>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_lseek_r+0x1e>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_lseek_r+0x1e>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	200056c4 	.word	0x200056c4

0800b1b8 <_read_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d07      	ldr	r5, [pc, #28]	; (800b1d8 <_read_r+0x20>)
 800b1bc:	4604      	mov	r4, r0
 800b1be:	4608      	mov	r0, r1
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	602a      	str	r2, [r5, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f7f6 fa2a 	bl	8001620 <_read>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_read_r+0x1e>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_read_r+0x1e>
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	200056c4 	.word	0x200056c4

0800b1dc <_init>:
 800b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1de:	bf00      	nop
 800b1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e2:	bc08      	pop	{r3}
 800b1e4:	469e      	mov	lr, r3
 800b1e6:	4770      	bx	lr

0800b1e8 <_fini>:
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ea:	bf00      	nop
 800b1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ee:	bc08      	pop	{r3}
 800b1f0:	469e      	mov	lr, r3
 800b1f2:	4770      	bx	lr
